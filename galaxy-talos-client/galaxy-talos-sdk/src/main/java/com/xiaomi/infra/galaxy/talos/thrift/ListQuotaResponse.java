/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-4")
public class ListQuotaResponse implements libthrift091.TBase<ListQuotaResponse, ListQuotaResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ListQuotaResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("ListQuotaResponse");

  private static final libthrift091.protocol.TField QUOTA_LIST_FIELD_DESC = new libthrift091.protocol.TField("quotaList", libthrift091.protocol.TType.LIST, (short)1);
  private static final libthrift091.protocol.TField APPROVED_TOTAL_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("approvedTotalQuota", libthrift091.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListQuotaResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListQuotaResponseTupleSchemeFactory());
  }

  /**
   * user existing approved quota
   * 
   */
  public List<PartitionQuotaInfo> quotaList; // required
  /**
   * approved quota total number
   * 
   */
  public int approvedTotalQuota; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * user existing approved quota
     * 
     */
    QUOTA_LIST((short)1, "quotaList"),
    /**
     * approved quota total number
     * 
     */
    APPROVED_TOTAL_QUOTA((short)2, "approvedTotalQuota");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUOTA_LIST
          return QUOTA_LIST;
        case 2: // APPROVED_TOTAL_QUOTA
          return APPROVED_TOTAL_QUOTA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPROVEDTOTALQUOTA_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUOTA_LIST, new libthrift091.meta_data.FieldMetaData("quotaList", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, PartitionQuotaInfo.class))));
    tmpMap.put(_Fields.APPROVED_TOTAL_QUOTA, new libthrift091.meta_data.FieldMetaData("approvedTotalQuota", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(ListQuotaResponse.class, metaDataMap);
  }

  public ListQuotaResponse() {
  }

  public ListQuotaResponse(
    List<PartitionQuotaInfo> quotaList,
    int approvedTotalQuota)
  {
    this();
    this.quotaList = quotaList;
    this.approvedTotalQuota = approvedTotalQuota;
    setApprovedTotalQuotaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListQuotaResponse(ListQuotaResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuotaList()) {
      List<PartitionQuotaInfo> __this__quotaList = new ArrayList<PartitionQuotaInfo>(other.quotaList.size());
      for (PartitionQuotaInfo other_element : other.quotaList) {
        __this__quotaList.add(new PartitionQuotaInfo(other_element));
      }
      this.quotaList = __this__quotaList;
    }
    this.approvedTotalQuota = other.approvedTotalQuota;
  }

  public ListQuotaResponse deepCopy() {
    return new ListQuotaResponse(this);
  }

  @Override
  public void clear() {
    this.quotaList = null;
    setApprovedTotalQuotaIsSet(false);
    this.approvedTotalQuota = 0;
  }

  public int getQuotaListSize() {
    return (this.quotaList == null) ? 0 : this.quotaList.size();
  }

  public java.util.Iterator<PartitionQuotaInfo> getQuotaListIterator() {
    return (this.quotaList == null) ? null : this.quotaList.iterator();
  }

  public void addToQuotaList(PartitionQuotaInfo elem) {
    if (this.quotaList == null) {
      this.quotaList = new ArrayList<PartitionQuotaInfo>();
    }
    this.quotaList.add(elem);
  }

  /**
   * user existing approved quota
   * 
   */
  public List<PartitionQuotaInfo> getQuotaList() {
    return this.quotaList;
  }

  /**
   * user existing approved quota
   * 
   */
  public ListQuotaResponse setQuotaList(List<PartitionQuotaInfo> quotaList) {
    this.quotaList = quotaList;
    return this;
  }

  public void unsetQuotaList() {
    this.quotaList = null;
  }

  /** Returns true if field quotaList is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotaList() {
    return this.quotaList != null;
  }

  public void setQuotaListIsSet(boolean value) {
    if (!value) {
      this.quotaList = null;
    }
  }

  /**
   * approved quota total number
   * 
   */
  public int getApprovedTotalQuota() {
    return this.approvedTotalQuota;
  }

  /**
   * approved quota total number
   * 
   */
  public ListQuotaResponse setApprovedTotalQuota(int approvedTotalQuota) {
    this.approvedTotalQuota = approvedTotalQuota;
    setApprovedTotalQuotaIsSet(true);
    return this;
  }

  public void unsetApprovedTotalQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVEDTOTALQUOTA_ISSET_ID);
  }

  /** Returns true if field approvedTotalQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovedTotalQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVEDTOTALQUOTA_ISSET_ID);
  }

  public void setApprovedTotalQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVEDTOTALQUOTA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUOTA_LIST:
      if (value == null) {
        unsetQuotaList();
      } else {
        setQuotaList((List<PartitionQuotaInfo>)value);
      }
      break;

    case APPROVED_TOTAL_QUOTA:
      if (value == null) {
        unsetApprovedTotalQuota();
      } else {
        setApprovedTotalQuota((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUOTA_LIST:
      return getQuotaList();

    case APPROVED_TOTAL_QUOTA:
      return Integer.valueOf(getApprovedTotalQuota());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUOTA_LIST:
      return isSetQuotaList();
    case APPROVED_TOTAL_QUOTA:
      return isSetApprovedTotalQuota();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListQuotaResponse)
      return this.equals((ListQuotaResponse)that);
    return false;
  }

  public boolean equals(ListQuotaResponse that) {
    if (that == null)
      return false;

    boolean this_present_quotaList = true && this.isSetQuotaList();
    boolean that_present_quotaList = true && that.isSetQuotaList();
    if (this_present_quotaList || that_present_quotaList) {
      if (!(this_present_quotaList && that_present_quotaList))
        return false;
      if (!this.quotaList.equals(that.quotaList))
        return false;
    }

    boolean this_present_approvedTotalQuota = true;
    boolean that_present_approvedTotalQuota = true;
    if (this_present_approvedTotalQuota || that_present_approvedTotalQuota) {
      if (!(this_present_approvedTotalQuota && that_present_approvedTotalQuota))
        return false;
      if (this.approvedTotalQuota != that.approvedTotalQuota)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_quotaList = true && (isSetQuotaList());
    list.add(present_quotaList);
    if (present_quotaList)
      list.add(quotaList);

    boolean present_approvedTotalQuota = true;
    list.add(present_approvedTotalQuota);
    if (present_approvedTotalQuota)
      list.add(approvedTotalQuota);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListQuotaResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuotaList()).compareTo(other.isSetQuotaList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotaList()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.quotaList, other.quotaList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovedTotalQuota()).compareTo(other.isSetApprovedTotalQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovedTotalQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.approvedTotalQuota, other.approvedTotalQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListQuotaResponse(");
    boolean first = true;

    sb.append("quotaList:");
    if (this.quotaList == null) {
      sb.append("null");
    } else {
      sb.append(this.quotaList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvedTotalQuota:");
    sb.append(this.approvedTotalQuota);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (quotaList == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'quotaList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'approvedTotalQuota' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListQuotaResponseStandardSchemeFactory implements SchemeFactory {
    public ListQuotaResponseStandardScheme getScheme() {
      return new ListQuotaResponseStandardScheme();
    }
  }

  private static class ListQuotaResponseStandardScheme extends StandardScheme<ListQuotaResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, ListQuotaResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUOTA_LIST
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list10 = iprot.readListBegin();
                struct.quotaList = new ArrayList<PartitionQuotaInfo>(_list10.size);
                PartitionQuotaInfo _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new PartitionQuotaInfo();
                  _elem11.read(iprot);
                  struct.quotaList.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setQuotaListIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPROVED_TOTAL_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.approvedTotalQuota = iprot.readI32();
              struct.setApprovedTotalQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetApprovedTotalQuota()) {
        throw new libthrift091.protocol.TProtocolException("Required field 'approvedTotalQuota' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, ListQuotaResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.quotaList != null) {
        oprot.writeFieldBegin(QUOTA_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, struct.quotaList.size()));
          for (PartitionQuotaInfo _iter13 : struct.quotaList)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPROVED_TOTAL_QUOTA_FIELD_DESC);
      oprot.writeI32(struct.approvedTotalQuota);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListQuotaResponseTupleSchemeFactory implements SchemeFactory {
    public ListQuotaResponseTupleScheme getScheme() {
      return new ListQuotaResponseTupleScheme();
    }
  }

  private static class ListQuotaResponseTupleScheme extends TupleScheme<ListQuotaResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, ListQuotaResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.quotaList.size());
        for (PartitionQuotaInfo _iter14 : struct.quotaList)
        {
          _iter14.write(oprot);
        }
      }
      oprot.writeI32(struct.approvedTotalQuota);
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, ListQuotaResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        libthrift091.protocol.TList _list15 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
        struct.quotaList = new ArrayList<PartitionQuotaInfo>(_list15.size);
        PartitionQuotaInfo _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = new PartitionQuotaInfo();
          _elem16.read(iprot);
          struct.quotaList.add(_elem16);
        }
      }
      struct.setQuotaListIsSet(true);
      struct.approvedTotalQuota = iprot.readI32();
      struct.setApprovedTotalQuotaIsSet(true);
    }
  }

}

