/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-5-20")
public class QueryOrgOffsetResponse implements libthrift091.TBase<QueryOrgOffsetResponse, QueryOrgOffsetResponse._Fields>, java.io.Serializable, Cloneable, Comparable<QueryOrgOffsetResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("QueryOrgOffsetResponse");

  private static final libthrift091.protocol.TField CONSUMER_GROUP_OFFSET_MAP_FIELD_DESC = new libthrift091.protocol.TField("consumerGroupOffsetMap", libthrift091.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryOrgOffsetResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryOrgOffsetResponseTupleSchemeFactory());
  }

  /**
   * The ConsumerGroupInfo and OffsetLag of specified consumerGroupPrefix and orgId
   * 
   */
  public Map<ConsumerGroupAndPartition,Long> consumerGroupOffsetMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * The ConsumerGroupInfo and OffsetLag of specified consumerGroupPrefix and orgId
     * 
     */
    CONSUMER_GROUP_OFFSET_MAP((short)1, "consumerGroupOffsetMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSUMER_GROUP_OFFSET_MAP
          return CONSUMER_GROUP_OFFSET_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSUMER_GROUP_OFFSET_MAP, new libthrift091.meta_data.FieldMetaData("consumerGroupOffsetMap", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.MapMetaData(libthrift091.protocol.TType.MAP, 
            new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, ConsumerGroupAndPartition.class), 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(QueryOrgOffsetResponse.class, metaDataMap);
  }

  public QueryOrgOffsetResponse() {
  }

  public QueryOrgOffsetResponse(
    Map<ConsumerGroupAndPartition,Long> consumerGroupOffsetMap)
  {
    this();
    this.consumerGroupOffsetMap = consumerGroupOffsetMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryOrgOffsetResponse(QueryOrgOffsetResponse other) {
    if (other.isSetConsumerGroupOffsetMap()) {
      Map<ConsumerGroupAndPartition,Long> __this__consumerGroupOffsetMap = new HashMap<ConsumerGroupAndPartition,Long>(other.consumerGroupOffsetMap.size());
      for (Map.Entry<ConsumerGroupAndPartition, Long> other_element : other.consumerGroupOffsetMap.entrySet()) {

        ConsumerGroupAndPartition other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        ConsumerGroupAndPartition __this__consumerGroupOffsetMap_copy_key = new ConsumerGroupAndPartition(other_element_key);

        Long __this__consumerGroupOffsetMap_copy_value = other_element_value;

        __this__consumerGroupOffsetMap.put(__this__consumerGroupOffsetMap_copy_key, __this__consumerGroupOffsetMap_copy_value);
      }
      this.consumerGroupOffsetMap = __this__consumerGroupOffsetMap;
    }
  }

  public QueryOrgOffsetResponse deepCopy() {
    return new QueryOrgOffsetResponse(this);
  }

  @Override
  public void clear() {
    this.consumerGroupOffsetMap = null;
  }

  public int getConsumerGroupOffsetMapSize() {
    return (this.consumerGroupOffsetMap == null) ? 0 : this.consumerGroupOffsetMap.size();
  }

  public void putToConsumerGroupOffsetMap(ConsumerGroupAndPartition key, long val) {
    if (this.consumerGroupOffsetMap == null) {
      this.consumerGroupOffsetMap = new HashMap<ConsumerGroupAndPartition,Long>();
    }
    this.consumerGroupOffsetMap.put(key, val);
  }

  /**
   * The ConsumerGroupInfo and OffsetLag of specified consumerGroupPrefix and orgId
   * 
   */
  public Map<ConsumerGroupAndPartition,Long> getConsumerGroupOffsetMap() {
    return this.consumerGroupOffsetMap;
  }

  /**
   * The ConsumerGroupInfo and OffsetLag of specified consumerGroupPrefix and orgId
   * 
   */
  public QueryOrgOffsetResponse setConsumerGroupOffsetMap(Map<ConsumerGroupAndPartition,Long> consumerGroupOffsetMap) {
    this.consumerGroupOffsetMap = consumerGroupOffsetMap;
    return this;
  }

  public void unsetConsumerGroupOffsetMap() {
    this.consumerGroupOffsetMap = null;
  }

  /** Returns true if field consumerGroupOffsetMap is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerGroupOffsetMap() {
    return this.consumerGroupOffsetMap != null;
  }

  public void setConsumerGroupOffsetMapIsSet(boolean value) {
    if (!value) {
      this.consumerGroupOffsetMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSUMER_GROUP_OFFSET_MAP:
      if (value == null) {
        unsetConsumerGroupOffsetMap();
      } else {
        setConsumerGroupOffsetMap((Map<ConsumerGroupAndPartition,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSUMER_GROUP_OFFSET_MAP:
      return getConsumerGroupOffsetMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSUMER_GROUP_OFFSET_MAP:
      return isSetConsumerGroupOffsetMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryOrgOffsetResponse)
      return this.equals((QueryOrgOffsetResponse)that);
    return false;
  }

  public boolean equals(QueryOrgOffsetResponse that) {
    if (that == null)
      return false;

    boolean this_present_consumerGroupOffsetMap = true && this.isSetConsumerGroupOffsetMap();
    boolean that_present_consumerGroupOffsetMap = true && that.isSetConsumerGroupOffsetMap();
    if (this_present_consumerGroupOffsetMap || that_present_consumerGroupOffsetMap) {
      if (!(this_present_consumerGroupOffsetMap && that_present_consumerGroupOffsetMap))
        return false;
      if (!this.consumerGroupOffsetMap.equals(that.consumerGroupOffsetMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_consumerGroupOffsetMap = true && (isSetConsumerGroupOffsetMap());
    list.add(present_consumerGroupOffsetMap);
    if (present_consumerGroupOffsetMap)
      list.add(consumerGroupOffsetMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryOrgOffsetResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConsumerGroupOffsetMap()).compareTo(other.isSetConsumerGroupOffsetMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerGroupOffsetMap()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.consumerGroupOffsetMap, other.consumerGroupOffsetMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryOrgOffsetResponse(");
    boolean first = true;

    sb.append("consumerGroupOffsetMap:");
    if (this.consumerGroupOffsetMap == null) {
      sb.append("null");
    } else {
      sb.append(this.consumerGroupOffsetMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (consumerGroupOffsetMap == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'consumerGroupOffsetMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryOrgOffsetResponseStandardSchemeFactory implements SchemeFactory {
    public QueryOrgOffsetResponseStandardScheme getScheme() {
      return new QueryOrgOffsetResponseStandardScheme();
    }
  }

  private static class QueryOrgOffsetResponseStandardScheme extends StandardScheme<QueryOrgOffsetResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, QueryOrgOffsetResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSUMER_GROUP_OFFSET_MAP
            if (schemeField.type == libthrift091.protocol.TType.MAP) {
              {
                libthrift091.protocol.TMap _map50 = iprot.readMapBegin();
                struct.consumerGroupOffsetMap = new HashMap<ConsumerGroupAndPartition,Long>(2*_map50.size);
                ConsumerGroupAndPartition _key51;
                long _val52;
                for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                {
                  _key51 = new ConsumerGroupAndPartition();
                  _key51.read(iprot);
                  _val52 = iprot.readI64();
                  struct.consumerGroupOffsetMap.put(_key51, _val52);
                }
                iprot.readMapEnd();
              }
              struct.setConsumerGroupOffsetMapIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, QueryOrgOffsetResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.consumerGroupOffsetMap != null) {
        oprot.writeFieldBegin(CONSUMER_GROUP_OFFSET_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRUCT, libthrift091.protocol.TType.I64, struct.consumerGroupOffsetMap.size()));
          for (Map.Entry<ConsumerGroupAndPartition, Long> _iter54 : struct.consumerGroupOffsetMap.entrySet())
          {
            _iter54.getKey().write(oprot);
            oprot.writeI64(_iter54.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryOrgOffsetResponseTupleSchemeFactory implements SchemeFactory {
    public QueryOrgOffsetResponseTupleScheme getScheme() {
      return new QueryOrgOffsetResponseTupleScheme();
    }
  }

  private static class QueryOrgOffsetResponseTupleScheme extends TupleScheme<QueryOrgOffsetResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, QueryOrgOffsetResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.consumerGroupOffsetMap.size());
        for (Map.Entry<ConsumerGroupAndPartition, Long> _iter55 : struct.consumerGroupOffsetMap.entrySet())
        {
          _iter55.getKey().write(oprot);
          oprot.writeI64(_iter55.getValue());
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, QueryOrgOffsetResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        libthrift091.protocol.TMap _map56 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRUCT, libthrift091.protocol.TType.I64, iprot.readI32());
        struct.consumerGroupOffsetMap = new HashMap<ConsumerGroupAndPartition,Long>(2*_map56.size);
        ConsumerGroupAndPartition _key57;
        long _val58;
        for (int _i59 = 0; _i59 < _map56.size; ++_i59)
        {
          _key57 = new ConsumerGroupAndPartition();
          _key57.read(iprot);
          _val58 = iprot.readI64();
          struct.consumerGroupOffsetMap.put(_key57, _val58);
        }
      }
      struct.setConsumerGroupOffsetMapIsSet(true);
    }
  }

}

