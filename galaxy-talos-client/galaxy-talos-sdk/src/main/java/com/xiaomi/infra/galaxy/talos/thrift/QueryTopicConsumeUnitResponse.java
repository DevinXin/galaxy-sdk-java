/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-18")
public class QueryTopicConsumeUnitResponse implements libthrift091.TBase<QueryTopicConsumeUnitResponse, QueryTopicConsumeUnitResponse._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTopicConsumeUnitResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("QueryTopicConsumeUnitResponse");

  private static final libthrift091.protocol.TField TOPIC_CONSUME_UNIT_MAP_FIELD_DESC = new libthrift091.protocol.TField("topicConsumeUnitMap", libthrift091.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryTopicConsumeUnitResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTopicConsumeUnitResponseTupleSchemeFactory());
  }

  /**
   * The topicConsumeUnitMap
   * 
   */
  public Map<String,List<PartitionConsumeUnit>> topicConsumeUnitMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * The topicConsumeUnitMap
     * 
     */
    TOPIC_CONSUME_UNIT_MAP((short)1, "topicConsumeUnitMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPIC_CONSUME_UNIT_MAP
          return TOPIC_CONSUME_UNIT_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPIC_CONSUME_UNIT_MAP, new libthrift091.meta_data.FieldMetaData("topicConsumeUnitMap", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.MapMetaData(libthrift091.protocol.TType.MAP, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING), 
            new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
                new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, PartitionConsumeUnit.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(QueryTopicConsumeUnitResponse.class, metaDataMap);
  }

  public QueryTopicConsumeUnitResponse() {
  }

  public QueryTopicConsumeUnitResponse(
    Map<String,List<PartitionConsumeUnit>> topicConsumeUnitMap)
  {
    this();
    this.topicConsumeUnitMap = topicConsumeUnitMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryTopicConsumeUnitResponse(QueryTopicConsumeUnitResponse other) {
    if (other.isSetTopicConsumeUnitMap()) {
      Map<String,List<PartitionConsumeUnit>> __this__topicConsumeUnitMap = new HashMap<String,List<PartitionConsumeUnit>>(other.topicConsumeUnitMap.size());
      for (Map.Entry<String, List<PartitionConsumeUnit>> other_element : other.topicConsumeUnitMap.entrySet()) {

        String other_element_key = other_element.getKey();
        List<PartitionConsumeUnit> other_element_value = other_element.getValue();

        String __this__topicConsumeUnitMap_copy_key = other_element_key;

        List<PartitionConsumeUnit> __this__topicConsumeUnitMap_copy_value = new ArrayList<PartitionConsumeUnit>(other_element_value.size());
        for (PartitionConsumeUnit other_element_value_element : other_element_value) {
          __this__topicConsumeUnitMap_copy_value.add(new PartitionConsumeUnit(other_element_value_element));
        }

        __this__topicConsumeUnitMap.put(__this__topicConsumeUnitMap_copy_key, __this__topicConsumeUnitMap_copy_value);
      }
      this.topicConsumeUnitMap = __this__topicConsumeUnitMap;
    }
  }

  public QueryTopicConsumeUnitResponse deepCopy() {
    return new QueryTopicConsumeUnitResponse(this);
  }

  @Override
  public void clear() {
    this.topicConsumeUnitMap = null;
  }

  public int getTopicConsumeUnitMapSize() {
    return (this.topicConsumeUnitMap == null) ? 0 : this.topicConsumeUnitMap.size();
  }

  public void putToTopicConsumeUnitMap(String key, List<PartitionConsumeUnit> val) {
    if (this.topicConsumeUnitMap == null) {
      this.topicConsumeUnitMap = new HashMap<String,List<PartitionConsumeUnit>>();
    }
    this.topicConsumeUnitMap.put(key, val);
  }

  /**
   * The topicConsumeUnitMap
   * 
   */
  public Map<String,List<PartitionConsumeUnit>> getTopicConsumeUnitMap() {
    return this.topicConsumeUnitMap;
  }

  /**
   * The topicConsumeUnitMap
   * 
   */
  public QueryTopicConsumeUnitResponse setTopicConsumeUnitMap(Map<String,List<PartitionConsumeUnit>> topicConsumeUnitMap) {
    this.topicConsumeUnitMap = topicConsumeUnitMap;
    return this;
  }

  public void unsetTopicConsumeUnitMap() {
    this.topicConsumeUnitMap = null;
  }

  /** Returns true if field topicConsumeUnitMap is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicConsumeUnitMap() {
    return this.topicConsumeUnitMap != null;
  }

  public void setTopicConsumeUnitMapIsSet(boolean value) {
    if (!value) {
      this.topicConsumeUnitMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOPIC_CONSUME_UNIT_MAP:
      if (value == null) {
        unsetTopicConsumeUnitMap();
      } else {
        setTopicConsumeUnitMap((Map<String,List<PartitionConsumeUnit>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPIC_CONSUME_UNIT_MAP:
      return getTopicConsumeUnitMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOPIC_CONSUME_UNIT_MAP:
      return isSetTopicConsumeUnitMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryTopicConsumeUnitResponse)
      return this.equals((QueryTopicConsumeUnitResponse)that);
    return false;
  }

  public boolean equals(QueryTopicConsumeUnitResponse that) {
    if (that == null)
      return false;

    boolean this_present_topicConsumeUnitMap = true && this.isSetTopicConsumeUnitMap();
    boolean that_present_topicConsumeUnitMap = true && that.isSetTopicConsumeUnitMap();
    if (this_present_topicConsumeUnitMap || that_present_topicConsumeUnitMap) {
      if (!(this_present_topicConsumeUnitMap && that_present_topicConsumeUnitMap))
        return false;
      if (!this.topicConsumeUnitMap.equals(that.topicConsumeUnitMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_topicConsumeUnitMap = true && (isSetTopicConsumeUnitMap());
    list.add(present_topicConsumeUnitMap);
    if (present_topicConsumeUnitMap)
      list.add(topicConsumeUnitMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryTopicConsumeUnitResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTopicConsumeUnitMap()).compareTo(other.isSetTopicConsumeUnitMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicConsumeUnitMap()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.topicConsumeUnitMap, other.topicConsumeUnitMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryTopicConsumeUnitResponse(");
    boolean first = true;

    sb.append("topicConsumeUnitMap:");
    if (this.topicConsumeUnitMap == null) {
      sb.append("null");
    } else {
      sb.append(this.topicConsumeUnitMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (topicConsumeUnitMap == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'topicConsumeUnitMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryTopicConsumeUnitResponseStandardSchemeFactory implements SchemeFactory {
    public QueryTopicConsumeUnitResponseStandardScheme getScheme() {
      return new QueryTopicConsumeUnitResponseStandardScheme();
    }
  }

  private static class QueryTopicConsumeUnitResponseStandardScheme extends StandardScheme<QueryTopicConsumeUnitResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, QueryTopicConsumeUnitResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPIC_CONSUME_UNIT_MAP
            if (schemeField.type == libthrift091.protocol.TType.MAP) {
              {
                libthrift091.protocol.TMap _map16 = iprot.readMapBegin();
                struct.topicConsumeUnitMap = new HashMap<String,List<PartitionConsumeUnit>>(2*_map16.size);
                String _key17;
                List<PartitionConsumeUnit> _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  {
                    libthrift091.protocol.TList _list20 = iprot.readListBegin();
                    _val18 = new ArrayList<PartitionConsumeUnit>(_list20.size);
                    PartitionConsumeUnit _elem21;
                    for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                    {
                      _elem21 = new PartitionConsumeUnit();
                      _elem21.read(iprot);
                      _val18.add(_elem21);
                    }
                    iprot.readListEnd();
                  }
                  struct.topicConsumeUnitMap.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setTopicConsumeUnitMapIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, QueryTopicConsumeUnitResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.topicConsumeUnitMap != null) {
        oprot.writeFieldBegin(TOPIC_CONSUME_UNIT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.LIST, struct.topicConsumeUnitMap.size()));
          for (Map.Entry<String, List<PartitionConsumeUnit>> _iter23 : struct.topicConsumeUnitMap.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            {
              oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, _iter23.getValue().size()));
              for (PartitionConsumeUnit _iter24 : _iter23.getValue())
              {
                _iter24.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTopicConsumeUnitResponseTupleSchemeFactory implements SchemeFactory {
    public QueryTopicConsumeUnitResponseTupleScheme getScheme() {
      return new QueryTopicConsumeUnitResponseTupleScheme();
    }
  }

  private static class QueryTopicConsumeUnitResponseTupleScheme extends TupleScheme<QueryTopicConsumeUnitResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, QueryTopicConsumeUnitResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.topicConsumeUnitMap.size());
        for (Map.Entry<String, List<PartitionConsumeUnit>> _iter25 : struct.topicConsumeUnitMap.entrySet())
        {
          oprot.writeString(_iter25.getKey());
          {
            oprot.writeI32(_iter25.getValue().size());
            for (PartitionConsumeUnit _iter26 : _iter25.getValue())
            {
              _iter26.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, QueryTopicConsumeUnitResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        libthrift091.protocol.TMap _map27 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.LIST, iprot.readI32());
        struct.topicConsumeUnitMap = new HashMap<String,List<PartitionConsumeUnit>>(2*_map27.size);
        String _key28;
        List<PartitionConsumeUnit> _val29;
        for (int _i30 = 0; _i30 < _map27.size; ++_i30)
        {
          _key28 = iprot.readString();
          {
            libthrift091.protocol.TList _list31 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
            _val29 = new ArrayList<PartitionConsumeUnit>(_list31.size);
            PartitionConsumeUnit _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = new PartitionConsumeUnit();
              _elem32.read(iprot);
              _val29.add(_elem32);
            }
          }
          struct.topicConsumeUnitMap.put(_key28, _val29);
        }
      }
      struct.setTopicConsumeUnitMapIsSet(true);
    }
  }

}

