/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-18")
public class PartitionConsumeUnit implements libthrift091.TBase<PartitionConsumeUnit, PartitionConsumeUnit._Fields>, java.io.Serializable, Cloneable, Comparable<PartitionConsumeUnit> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("PartitionConsumeUnit");

  private static final libthrift091.protocol.TField PARTITION_ID_FIELD_DESC = new libthrift091.protocol.TField("partitionId", libthrift091.protocol.TType.I32, (short)1);
  private static final libthrift091.protocol.TField IP_ADDR_FIELD_DESC = new libthrift091.protocol.TField("ipAddr", libthrift091.protocol.TType.STRING, (short)2);
  private static final libthrift091.protocol.TField CONSUMER_COMMIT_OFFSET_FIELD_DESC = new libthrift091.protocol.TField("consumerCommitOffset", libthrift091.protocol.TType.I64, (short)3);
  private static final libthrift091.protocol.TField CONSUMER_OFFSET_LAG_FIELD_DESC = new libthrift091.protocol.TField("consumerOffsetLag", libthrift091.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartitionConsumeUnitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartitionConsumeUnitTupleSchemeFactory());
  }

  /**
   * The partitionId
   * 
   */
  public int partitionId; // required
  /**
   * The specified ipAddr
   * 
   */
  public String ipAddr; // required
  /**
   * The consumer commit offset
   * 
   */
  public long consumerCommitOffset; // required
  /**
   * The consumer offset lag
   * 
   */
  public long consumerOffsetLag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * The partitionId
     * 
     */
    PARTITION_ID((short)1, "partitionId"),
    /**
     * The specified ipAddr
     * 
     */
    IP_ADDR((short)2, "ipAddr"),
    /**
     * The consumer commit offset
     * 
     */
    CONSUMER_COMMIT_OFFSET((short)3, "consumerCommitOffset"),
    /**
     * The consumer offset lag
     * 
     */
    CONSUMER_OFFSET_LAG((short)4, "consumerOffsetLag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_ID
          return PARTITION_ID;
        case 2: // IP_ADDR
          return IP_ADDR;
        case 3: // CONSUMER_COMMIT_OFFSET
          return CONSUMER_COMMIT_OFFSET;
        case 4: // CONSUMER_OFFSET_LAG
          return CONSUMER_OFFSET_LAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITIONID_ISSET_ID = 0;
  private static final int __CONSUMERCOMMITOFFSET_ISSET_ID = 1;
  private static final int __CONSUMEROFFSETLAG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_ID, new libthrift091.meta_data.FieldMetaData("partitionId", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_ADDR, new libthrift091.meta_data.FieldMetaData("ipAddr", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSUMER_COMMIT_OFFSET, new libthrift091.meta_data.FieldMetaData("consumerCommitOffset", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.CONSUMER_OFFSET_LAG, new libthrift091.meta_data.FieldMetaData("consumerOffsetLag", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(PartitionConsumeUnit.class, metaDataMap);
  }

  public PartitionConsumeUnit() {
  }

  public PartitionConsumeUnit(
    int partitionId,
    String ipAddr,
    long consumerCommitOffset,
    long consumerOffsetLag)
  {
    this();
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    this.ipAddr = ipAddr;
    this.consumerCommitOffset = consumerCommitOffset;
    setConsumerCommitOffsetIsSet(true);
    this.consumerOffsetLag = consumerOffsetLag;
    setConsumerOffsetLagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartitionConsumeUnit(PartitionConsumeUnit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partitionId = other.partitionId;
    if (other.isSetIpAddr()) {
      this.ipAddr = other.ipAddr;
    }
    this.consumerCommitOffset = other.consumerCommitOffset;
    this.consumerOffsetLag = other.consumerOffsetLag;
  }

  public PartitionConsumeUnit deepCopy() {
    return new PartitionConsumeUnit(this);
  }

  @Override
  public void clear() {
    setPartitionIdIsSet(false);
    this.partitionId = 0;
    this.ipAddr = null;
    setConsumerCommitOffsetIsSet(false);
    this.consumerCommitOffset = 0;
    setConsumerOffsetLagIsSet(false);
    this.consumerOffsetLag = 0;
  }

  /**
   * The partitionId
   * 
   */
  public int getPartitionId() {
    return this.partitionId;
  }

  /**
   * The partitionId
   * 
   */
  public PartitionConsumeUnit setPartitionId(int partitionId) {
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    return this;
  }

  public void unsetPartitionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  public void setPartitionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
  }

  /**
   * The specified ipAddr
   * 
   */
  public String getIpAddr() {
    return this.ipAddr;
  }

  /**
   * The specified ipAddr
   * 
   */
  public PartitionConsumeUnit setIpAddr(String ipAddr) {
    this.ipAddr = ipAddr;
    return this;
  }

  public void unsetIpAddr() {
    this.ipAddr = null;
  }

  /** Returns true if field ipAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddr() {
    return this.ipAddr != null;
  }

  public void setIpAddrIsSet(boolean value) {
    if (!value) {
      this.ipAddr = null;
    }
  }

  /**
   * The consumer commit offset
   * 
   */
  public long getConsumerCommitOffset() {
    return this.consumerCommitOffset;
  }

  /**
   * The consumer commit offset
   * 
   */
  public PartitionConsumeUnit setConsumerCommitOffset(long consumerCommitOffset) {
    this.consumerCommitOffset = consumerCommitOffset;
    setConsumerCommitOffsetIsSet(true);
    return this;
  }

  public void unsetConsumerCommitOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUMERCOMMITOFFSET_ISSET_ID);
  }

  /** Returns true if field consumerCommitOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerCommitOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUMERCOMMITOFFSET_ISSET_ID);
  }

  public void setConsumerCommitOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUMERCOMMITOFFSET_ISSET_ID, value);
  }

  /**
   * The consumer offset lag
   * 
   */
  public long getConsumerOffsetLag() {
    return this.consumerOffsetLag;
  }

  /**
   * The consumer offset lag
   * 
   */
  public PartitionConsumeUnit setConsumerOffsetLag(long consumerOffsetLag) {
    this.consumerOffsetLag = consumerOffsetLag;
    setConsumerOffsetLagIsSet(true);
    return this;
  }

  public void unsetConsumerOffsetLag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUMEROFFSETLAG_ISSET_ID);
  }

  /** Returns true if field consumerOffsetLag is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerOffsetLag() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUMEROFFSETLAG_ISSET_ID);
  }

  public void setConsumerOffsetLagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUMEROFFSETLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_ID:
      if (value == null) {
        unsetPartitionId();
      } else {
        setPartitionId((Integer)value);
      }
      break;

    case IP_ADDR:
      if (value == null) {
        unsetIpAddr();
      } else {
        setIpAddr((String)value);
      }
      break;

    case CONSUMER_COMMIT_OFFSET:
      if (value == null) {
        unsetConsumerCommitOffset();
      } else {
        setConsumerCommitOffset((Long)value);
      }
      break;

    case CONSUMER_OFFSET_LAG:
      if (value == null) {
        unsetConsumerOffsetLag();
      } else {
        setConsumerOffsetLag((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_ID:
      return Integer.valueOf(getPartitionId());

    case IP_ADDR:
      return getIpAddr();

    case CONSUMER_COMMIT_OFFSET:
      return Long.valueOf(getConsumerCommitOffset());

    case CONSUMER_OFFSET_LAG:
      return Long.valueOf(getConsumerOffsetLag());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_ID:
      return isSetPartitionId();
    case IP_ADDR:
      return isSetIpAddr();
    case CONSUMER_COMMIT_OFFSET:
      return isSetConsumerCommitOffset();
    case CONSUMER_OFFSET_LAG:
      return isSetConsumerOffsetLag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartitionConsumeUnit)
      return this.equals((PartitionConsumeUnit)that);
    return false;
  }

  public boolean equals(PartitionConsumeUnit that) {
    if (that == null)
      return false;

    boolean this_present_partitionId = true;
    boolean that_present_partitionId = true;
    if (this_present_partitionId || that_present_partitionId) {
      if (!(this_present_partitionId && that_present_partitionId))
        return false;
      if (this.partitionId != that.partitionId)
        return false;
    }

    boolean this_present_ipAddr = true && this.isSetIpAddr();
    boolean that_present_ipAddr = true && that.isSetIpAddr();
    if (this_present_ipAddr || that_present_ipAddr) {
      if (!(this_present_ipAddr && that_present_ipAddr))
        return false;
      if (!this.ipAddr.equals(that.ipAddr))
        return false;
    }

    boolean this_present_consumerCommitOffset = true;
    boolean that_present_consumerCommitOffset = true;
    if (this_present_consumerCommitOffset || that_present_consumerCommitOffset) {
      if (!(this_present_consumerCommitOffset && that_present_consumerCommitOffset))
        return false;
      if (this.consumerCommitOffset != that.consumerCommitOffset)
        return false;
    }

    boolean this_present_consumerOffsetLag = true;
    boolean that_present_consumerOffsetLag = true;
    if (this_present_consumerOffsetLag || that_present_consumerOffsetLag) {
      if (!(this_present_consumerOffsetLag && that_present_consumerOffsetLag))
        return false;
      if (this.consumerOffsetLag != that.consumerOffsetLag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partitionId = true;
    list.add(present_partitionId);
    if (present_partitionId)
      list.add(partitionId);

    boolean present_ipAddr = true && (isSetIpAddr());
    list.add(present_ipAddr);
    if (present_ipAddr)
      list.add(ipAddr);

    boolean present_consumerCommitOffset = true;
    list.add(present_consumerCommitOffset);
    if (present_consumerCommitOffset)
      list.add(consumerCommitOffset);

    boolean present_consumerOffsetLag = true;
    list.add(present_consumerOffsetLag);
    if (present_consumerOffsetLag)
      list.add(consumerOffsetLag);

    return list.hashCode();
  }

  @Override
  public int compareTo(PartitionConsumeUnit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartitionId()).compareTo(other.isSetPartitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionId()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionId, other.partitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddr()).compareTo(other.isSetIpAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddr()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.ipAddr, other.ipAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumerCommitOffset()).compareTo(other.isSetConsumerCommitOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerCommitOffset()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.consumerCommitOffset, other.consumerCommitOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumerOffsetLag()).compareTo(other.isSetConsumerOffsetLag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerOffsetLag()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.consumerOffsetLag, other.consumerOffsetLag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartitionConsumeUnit(");
    boolean first = true;

    sb.append("partitionId:");
    sb.append(this.partitionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddr:");
    if (this.ipAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumerCommitOffset:");
    sb.append(this.consumerCommitOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumerOffsetLag:");
    sb.append(this.consumerOffsetLag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // alas, we cannot check 'partitionId' because it's a primitive and you chose the non-beans generator.
    if (ipAddr == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'ipAddr' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'consumerCommitOffset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'consumerOffsetLag' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartitionConsumeUnitStandardSchemeFactory implements SchemeFactory {
    public PartitionConsumeUnitStandardScheme getScheme() {
      return new PartitionConsumeUnitStandardScheme();
    }
  }

  private static class PartitionConsumeUnitStandardScheme extends StandardScheme<PartitionConsumeUnit> {

    public void read(libthrift091.protocol.TProtocol iprot, PartitionConsumeUnit struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_ID
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionId = iprot.readI32();
              struct.setPartitionIdIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP_ADDR
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.ipAddr = iprot.readString();
              struct.setIpAddrIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONSUMER_COMMIT_OFFSET
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.consumerCommitOffset = iprot.readI64();
              struct.setConsumerCommitOffsetIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONSUMER_OFFSET_LAG
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.consumerOffsetLag = iprot.readI64();
              struct.setConsumerOffsetLagIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPartitionId()) {
        throw new libthrift091.protocol.TProtocolException("Required field 'partitionId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConsumerCommitOffset()) {
        throw new libthrift091.protocol.TProtocolException("Required field 'consumerCommitOffset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConsumerOffsetLag()) {
        throw new libthrift091.protocol.TProtocolException("Required field 'consumerOffsetLag' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, PartitionConsumeUnit struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
      oprot.writeI32(struct.partitionId);
      oprot.writeFieldEnd();
      if (struct.ipAddr != null) {
        oprot.writeFieldBegin(IP_ADDR_FIELD_DESC);
        oprot.writeString(struct.ipAddr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSUMER_COMMIT_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.consumerCommitOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSUMER_OFFSET_LAG_FIELD_DESC);
      oprot.writeI64(struct.consumerOffsetLag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartitionConsumeUnitTupleSchemeFactory implements SchemeFactory {
    public PartitionConsumeUnitTupleScheme getScheme() {
      return new PartitionConsumeUnitTupleScheme();
    }
  }

  private static class PartitionConsumeUnitTupleScheme extends TupleScheme<PartitionConsumeUnit> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, PartitionConsumeUnit struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.partitionId);
      oprot.writeString(struct.ipAddr);
      oprot.writeI64(struct.consumerCommitOffset);
      oprot.writeI64(struct.consumerOffsetLag);
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, PartitionConsumeUnit struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.partitionId = iprot.readI32();
      struct.setPartitionIdIsSet(true);
      struct.ipAddr = iprot.readString();
      struct.setIpAddrIsSet(true);
      struct.consumerCommitOffset = iprot.readI64();
      struct.setConsumerCommitOffsetIsSet(true);
      struct.consumerOffsetLag = iprot.readI64();
      struct.setConsumerOffsetLagIsSet(true);
    }
  }

}

