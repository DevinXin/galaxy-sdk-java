/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-8")
public class RenewResponse implements libthrift091.TBase<RenewResponse, RenewResponse._Fields>, java.io.Serializable, Cloneable, Comparable<RenewResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("RenewResponse");

  private static final libthrift091.protocol.TField WORKER_MAP_FIELD_DESC = new libthrift091.protocol.TField("workerMap", libthrift091.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RenewResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RenewResponseTupleSchemeFactory());
  }

  /**
   * alived worker and corresponding topicAndPartition
   * 
   */
  public Map<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> workerMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * alived worker and corresponding topicAndPartition
     * 
     */
    WORKER_MAP((short)1, "workerMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORKER_MAP
          return WORKER_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORKER_MAP, new libthrift091.meta_data.FieldMetaData("workerMap", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.MapMetaData(libthrift091.protocol.TType.MAP, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING), 
            new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
                new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(RenewResponse.class, metaDataMap);
  }

  public RenewResponse() {
  }

  public RenewResponse(
    Map<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> workerMap)
  {
    this();
    this.workerMap = workerMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RenewResponse(RenewResponse other) {
    if (other.isSetWorkerMap()) {
      Map<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> __this__workerMap = new HashMap<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>>(other.workerMap.size());
      for (Map.Entry<String, List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> other_element : other.workerMap.entrySet()) {

        String other_element_key = other_element.getKey();
        List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition> other_element_value = other_element.getValue();

        String __this__workerMap_copy_key = other_element_key;

        List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition> __this__workerMap_copy_value = new ArrayList<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>(other_element_value.size());
        for (com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition other_element_value_element : other_element_value) {
          __this__workerMap_copy_value.add(new com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition(other_element_value_element));
        }

        __this__workerMap.put(__this__workerMap_copy_key, __this__workerMap_copy_value);
      }
      this.workerMap = __this__workerMap;
    }
  }

  public RenewResponse deepCopy() {
    return new RenewResponse(this);
  }

  @Override
  public void clear() {
    this.workerMap = null;
  }

  public int getWorkerMapSize() {
    return (this.workerMap == null) ? 0 : this.workerMap.size();
  }

  public void putToWorkerMap(String key, List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition> val) {
    if (this.workerMap == null) {
      this.workerMap = new HashMap<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>>();
    }
    this.workerMap.put(key, val);
  }

  /**
   * alived worker and corresponding topicAndPartition
   * 
   */
  public Map<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> getWorkerMap() {
    return this.workerMap;
  }

  /**
   * alived worker and corresponding topicAndPartition
   * 
   */
  public RenewResponse setWorkerMap(Map<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> workerMap) {
    this.workerMap = workerMap;
    return this;
  }

  public void unsetWorkerMap() {
    this.workerMap = null;
  }

  /** Returns true if field workerMap is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerMap() {
    return this.workerMap != null;
  }

  public void setWorkerMapIsSet(boolean value) {
    if (!value) {
      this.workerMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WORKER_MAP:
      if (value == null) {
        unsetWorkerMap();
      } else {
        setWorkerMap((Map<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WORKER_MAP:
      return getWorkerMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WORKER_MAP:
      return isSetWorkerMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RenewResponse)
      return this.equals((RenewResponse)that);
    return false;
  }

  public boolean equals(RenewResponse that) {
    if (that == null)
      return false;

    boolean this_present_workerMap = true && this.isSetWorkerMap();
    boolean that_present_workerMap = true && that.isSetWorkerMap();
    if (this_present_workerMap || that_present_workerMap) {
      if (!(this_present_workerMap && that_present_workerMap))
        return false;
      if (!this.workerMap.equals(that.workerMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_workerMap = true && (isSetWorkerMap());
    list.add(present_workerMap);
    if (present_workerMap)
      list.add(workerMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(RenewResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWorkerMap()).compareTo(other.isSetWorkerMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerMap()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.workerMap, other.workerMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RenewResponse(");
    boolean first = true;

    sb.append("workerMap:");
    if (this.workerMap == null) {
      sb.append("null");
    } else {
      sb.append(this.workerMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (workerMap == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'workerMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RenewResponseStandardSchemeFactory implements SchemeFactory {
    public RenewResponseStandardScheme getScheme() {
      return new RenewResponseStandardScheme();
    }
  }

  private static class RenewResponseStandardScheme extends StandardScheme<RenewResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, RenewResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORKER_MAP
            if (schemeField.type == libthrift091.protocol.TType.MAP) {
              {
                libthrift091.protocol.TMap _map0 = iprot.readMapBegin();
                struct.workerMap = new HashMap<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>>(2*_map0.size);
                String _key1;
                List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition> _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  {
                    libthrift091.protocol.TList _list4 = iprot.readListBegin();
                    _val2 = new ArrayList<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>(_list4.size);
                    com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition _elem5;
                    for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                    {
                      _elem5 = new com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition();
                      _elem5.read(iprot);
                      _val2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.workerMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setWorkerMapIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, RenewResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.workerMap != null) {
        oprot.writeFieldBegin(WORKER_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.LIST, struct.workerMap.size()));
          for (Map.Entry<String, List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> _iter7 : struct.workerMap.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            {
              oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, _iter7.getValue().size()));
              for (com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition _iter8 : _iter7.getValue())
              {
                _iter8.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RenewResponseTupleSchemeFactory implements SchemeFactory {
    public RenewResponseTupleScheme getScheme() {
      return new RenewResponseTupleScheme();
    }
  }

  private static class RenewResponseTupleScheme extends TupleScheme<RenewResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, RenewResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.workerMap.size());
        for (Map.Entry<String, List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>> _iter9 : struct.workerMap.entrySet())
        {
          oprot.writeString(_iter9.getKey());
          {
            oprot.writeI32(_iter9.getValue().size());
            for (com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition _iter10 : _iter9.getValue())
            {
              _iter10.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, RenewResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        libthrift091.protocol.TMap _map11 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.LIST, iprot.readI32());
        struct.workerMap = new HashMap<String,List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>>(2*_map11.size);
        String _key12;
        List<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition> _val13;
        for (int _i14 = 0; _i14 < _map11.size; ++_i14)
        {
          _key12 = iprot.readString();
          {
            libthrift091.protocol.TList _list15 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
            _val13 = new ArrayList<com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition>(_list15.size);
            com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = new com.xiaomi.infra.galaxy.talos.thrift.TopicAndPartition();
              _elem16.read(iprot);
              _val13.add(_elem16);
            }
          }
          struct.workerMap.put(_key12, _val13);
        }
      }
      struct.setWorkerMapIsSet(true);
    }
  }

}

