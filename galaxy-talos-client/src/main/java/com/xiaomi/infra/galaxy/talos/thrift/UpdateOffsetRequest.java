/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-8")
public class UpdateOffsetRequest implements libthrift091.TBase<UpdateOffsetRequest, UpdateOffsetRequest._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateOffsetRequest> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("UpdateOffsetRequest");

  private static final libthrift091.protocol.TField CONSUME_UNIT_FIELD_DESC = new libthrift091.protocol.TField("consumeUnit", libthrift091.protocol.TType.STRUCT, (short)1);
  private static final libthrift091.protocol.TField MSG_OFFSET_FIELD_DESC = new libthrift091.protocol.TField("msgOffset", libthrift091.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateOffsetRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateOffsetRequestTupleSchemeFactory());
  }

  /**
   * consumeUnit instance
   * 
   */
  public ConsumeUnit consumeUnit; // required
  /**
   * consumeUnit offset consumed by worker
   * 
   */
  public long msgOffset; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * consumeUnit instance
     * 
     */
    CONSUME_UNIT((short)1, "consumeUnit"),
    /**
     * consumeUnit offset consumed by worker
     * 
     */
    MSG_OFFSET((short)2, "msgOffset");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSUME_UNIT
          return CONSUME_UNIT;
        case 2: // MSG_OFFSET
          return MSG_OFFSET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGOFFSET_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSUME_UNIT, new libthrift091.meta_data.FieldMetaData("consumeUnit", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, ConsumeUnit.class)));
    tmpMap.put(_Fields.MSG_OFFSET, new libthrift091.meta_data.FieldMetaData("msgOffset", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(UpdateOffsetRequest.class, metaDataMap);
  }

  public UpdateOffsetRequest() {
  }

  public UpdateOffsetRequest(
    ConsumeUnit consumeUnit,
    long msgOffset)
  {
    this();
    this.consumeUnit = consumeUnit;
    this.msgOffset = msgOffset;
    setMsgOffsetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateOffsetRequest(UpdateOffsetRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConsumeUnit()) {
      this.consumeUnit = new ConsumeUnit(other.consumeUnit);
    }
    this.msgOffset = other.msgOffset;
  }

  public UpdateOffsetRequest deepCopy() {
    return new UpdateOffsetRequest(this);
  }

  @Override
  public void clear() {
    this.consumeUnit = null;
    setMsgOffsetIsSet(false);
    this.msgOffset = 0;
  }

  /**
   * consumeUnit instance
   * 
   */
  public ConsumeUnit getConsumeUnit() {
    return this.consumeUnit;
  }

  /**
   * consumeUnit instance
   * 
   */
  public UpdateOffsetRequest setConsumeUnit(ConsumeUnit consumeUnit) {
    this.consumeUnit = consumeUnit;
    return this;
  }

  public void unsetConsumeUnit() {
    this.consumeUnit = null;
  }

  /** Returns true if field consumeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeUnit() {
    return this.consumeUnit != null;
  }

  public void setConsumeUnitIsSet(boolean value) {
    if (!value) {
      this.consumeUnit = null;
    }
  }

  /**
   * consumeUnit offset consumed by worker
   * 
   */
  public long getMsgOffset() {
    return this.msgOffset;
  }

  /**
   * consumeUnit offset consumed by worker
   * 
   */
  public UpdateOffsetRequest setMsgOffset(long msgOffset) {
    this.msgOffset = msgOffset;
    setMsgOffsetIsSet(true);
    return this;
  }

  public void unsetMsgOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGOFFSET_ISSET_ID);
  }

  /** Returns true if field msgOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGOFFSET_ISSET_ID);
  }

  public void setMsgOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGOFFSET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSUME_UNIT:
      if (value == null) {
        unsetConsumeUnit();
      } else {
        setConsumeUnit((ConsumeUnit)value);
      }
      break;

    case MSG_OFFSET:
      if (value == null) {
        unsetMsgOffset();
      } else {
        setMsgOffset((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSUME_UNIT:
      return getConsumeUnit();

    case MSG_OFFSET:
      return Long.valueOf(getMsgOffset());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSUME_UNIT:
      return isSetConsumeUnit();
    case MSG_OFFSET:
      return isSetMsgOffset();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateOffsetRequest)
      return this.equals((UpdateOffsetRequest)that);
    return false;
  }

  public boolean equals(UpdateOffsetRequest that) {
    if (that == null)
      return false;

    boolean this_present_consumeUnit = true && this.isSetConsumeUnit();
    boolean that_present_consumeUnit = true && that.isSetConsumeUnit();
    if (this_present_consumeUnit || that_present_consumeUnit) {
      if (!(this_present_consumeUnit && that_present_consumeUnit))
        return false;
      if (!this.consumeUnit.equals(that.consumeUnit))
        return false;
    }

    boolean this_present_msgOffset = true;
    boolean that_present_msgOffset = true;
    if (this_present_msgOffset || that_present_msgOffset) {
      if (!(this_present_msgOffset && that_present_msgOffset))
        return false;
      if (this.msgOffset != that.msgOffset)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_consumeUnit = true && (isSetConsumeUnit());
    list.add(present_consumeUnit);
    if (present_consumeUnit)
      list.add(consumeUnit);

    boolean present_msgOffset = true;
    list.add(present_msgOffset);
    if (present_msgOffset)
      list.add(msgOffset);

    return list.hashCode();
  }

  @Override
  public int compareTo(UpdateOffsetRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConsumeUnit()).compareTo(other.isSetConsumeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeUnit()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.consumeUnit, other.consumeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgOffset()).compareTo(other.isSetMsgOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgOffset()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.msgOffset, other.msgOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateOffsetRequest(");
    boolean first = true;

    sb.append("consumeUnit:");
    if (this.consumeUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.consumeUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgOffset:");
    sb.append(this.msgOffset);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (consumeUnit == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'consumeUnit' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'msgOffset' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (consumeUnit != null) {
      consumeUnit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateOffsetRequestStandardSchemeFactory implements SchemeFactory {
    public UpdateOffsetRequestStandardScheme getScheme() {
      return new UpdateOffsetRequestStandardScheme();
    }
  }

  private static class UpdateOffsetRequestStandardScheme extends StandardScheme<UpdateOffsetRequest> {

    public void read(libthrift091.protocol.TProtocol iprot, UpdateOffsetRequest struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSUME_UNIT
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.consumeUnit = new ConsumeUnit();
              struct.consumeUnit.read(iprot);
              struct.setConsumeUnitIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG_OFFSET
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.msgOffset = iprot.readI64();
              struct.setMsgOffsetIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMsgOffset()) {
        throw new libthrift091.protocol.TProtocolException("Required field 'msgOffset' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, UpdateOffsetRequest struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.consumeUnit != null) {
        oprot.writeFieldBegin(CONSUME_UNIT_FIELD_DESC);
        struct.consumeUnit.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MSG_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.msgOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateOffsetRequestTupleSchemeFactory implements SchemeFactory {
    public UpdateOffsetRequestTupleScheme getScheme() {
      return new UpdateOffsetRequestTupleScheme();
    }
  }

  private static class UpdateOffsetRequestTupleScheme extends TupleScheme<UpdateOffsetRequest> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, UpdateOffsetRequest struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.consumeUnit.write(oprot);
      oprot.writeI64(struct.msgOffset);
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, UpdateOffsetRequest struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.consumeUnit = new ConsumeUnit();
      struct.consumeUnit.read(iprot);
      struct.setConsumeUnitIsSet(true);
      struct.msgOffset = iprot.readI64();
      struct.setMsgOffsetIsSet(true);
    }
  }

}

