/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.talos.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-14")
public class TopicAttribute implements libthrift091.TBase<TopicAttribute, TopicAttribute._Fields>, java.io.Serializable, Cloneable, Comparable<TopicAttribute> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("TopicAttribute");

  private static final libthrift091.protocol.TField PARTITION_NUMBER_FIELD_DESC = new libthrift091.protocol.TField("partitionNumber", libthrift091.protocol.TType.I32, (short)1);
  private static final libthrift091.protocol.TField MESSAGE_RETENTION_MS_FIELD_DESC = new libthrift091.protocol.TField("messageRetentionMs", libthrift091.protocol.TType.I32, (short)2);
  private static final libthrift091.protocol.TField PARTITION_PUT_QPS_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("partitionPutQpsQuota", libthrift091.protocol.TType.I32, (short)3);
  private static final libthrift091.protocol.TField PARTITION_PUT_BYTES_QPS_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("partitionPutBytesQpsQuota", libthrift091.protocol.TType.I32, (short)4);
  private static final libthrift091.protocol.TField PARTITION_PUT_MESSAGE_QPS_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("partitionPutMessageQpsQuota", libthrift091.protocol.TType.I32, (short)5);
  private static final libthrift091.protocol.TField PARTITION_GET_QPS_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("partitionGetQpsQuota", libthrift091.protocol.TType.I32, (short)6);
  private static final libthrift091.protocol.TField PARTITION_GET_BYTES_QPS_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("partitionGetBytesQpsQuota", libthrift091.protocol.TType.I32, (short)7);
  private static final libthrift091.protocol.TField PARTITION_GET_MESSAGE_QPS_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("partitionGetMessageQpsQuota", libthrift091.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopicAttributeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopicAttributeTupleSchemeFactory());
  }

  /**
   * Partition number for the topic, default 8 (1 ~ 256)
   * 
   */
  public int partitionNumber; // optional
  /**
   * The retention time(in ms) for message in the topic, talos will make sure
   * that message in this topic will be available at least messageRetentionMS,
   * default 24h (1h ~ 30d)
   * 
   */
  public int messageRetentionMs; // optional
  /**
   * The max PutRecords times per parpation per second, default 5 (1 ~ 5);
   * 
   */
  public int partitionPutQpsQuota; // optional
  /**
   * The max put bytes per partation per second, default 1M (1B ~ 1M);
   * 
   */
  public int partitionPutBytesQpsQuota; // optional
  /**
   * The max put messages per partition per second, default 1000 (1 ~ 1000);
   * 
   */
  public int partitionPutMessageQpsQuota; // optional
  /**
   * The max GetRecords times per partition per second, default 5 (1 ~ 5);
   * 
   */
  public int partitionGetQpsQuota; // optional
  /**
   * The max get bytes per partition per second, default 2M (1B ~ 2M);
   * 
   */
  public int partitionGetBytesQpsQuota; // optional
  /**
   * The max get messages per partition per second, default 2000 (1 ~ 2000);
   * 
   */
  public int partitionGetMessageQpsQuota; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * Partition number for the topic, default 8 (1 ~ 256)
     * 
     */
    PARTITION_NUMBER((short)1, "partitionNumber"),
    /**
     * The retention time(in ms) for message in the topic, talos will make sure
     * that message in this topic will be available at least messageRetentionMS,
     * default 24h (1h ~ 30d)
     * 
     */
    MESSAGE_RETENTION_MS((short)2, "messageRetentionMs"),
    /**
     * The max PutRecords times per parpation per second, default 5 (1 ~ 5);
     * 
     */
    PARTITION_PUT_QPS_QUOTA((short)3, "partitionPutQpsQuota"),
    /**
     * The max put bytes per partation per second, default 1M (1B ~ 1M);
     * 
     */
    PARTITION_PUT_BYTES_QPS_QUOTA((short)4, "partitionPutBytesQpsQuota"),
    /**
     * The max put messages per partition per second, default 1000 (1 ~ 1000);
     * 
     */
    PARTITION_PUT_MESSAGE_QPS_QUOTA((short)5, "partitionPutMessageQpsQuota"),
    /**
     * The max GetRecords times per partition per second, default 5 (1 ~ 5);
     * 
     */
    PARTITION_GET_QPS_QUOTA((short)6, "partitionGetQpsQuota"),
    /**
     * The max get bytes per partition per second, default 2M (1B ~ 2M);
     * 
     */
    PARTITION_GET_BYTES_QPS_QUOTA((short)7, "partitionGetBytesQpsQuota"),
    /**
     * The max get messages per partition per second, default 2000 (1 ~ 2000);
     * 
     */
    PARTITION_GET_MESSAGE_QPS_QUOTA((short)8, "partitionGetMessageQpsQuota");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_NUMBER
          return PARTITION_NUMBER;
        case 2: // MESSAGE_RETENTION_MS
          return MESSAGE_RETENTION_MS;
        case 3: // PARTITION_PUT_QPS_QUOTA
          return PARTITION_PUT_QPS_QUOTA;
        case 4: // PARTITION_PUT_BYTES_QPS_QUOTA
          return PARTITION_PUT_BYTES_QPS_QUOTA;
        case 5: // PARTITION_PUT_MESSAGE_QPS_QUOTA
          return PARTITION_PUT_MESSAGE_QPS_QUOTA;
        case 6: // PARTITION_GET_QPS_QUOTA
          return PARTITION_GET_QPS_QUOTA;
        case 7: // PARTITION_GET_BYTES_QPS_QUOTA
          return PARTITION_GET_BYTES_QPS_QUOTA;
        case 8: // PARTITION_GET_MESSAGE_QPS_QUOTA
          return PARTITION_GET_MESSAGE_QPS_QUOTA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITIONNUMBER_ISSET_ID = 0;
  private static final int __MESSAGERETENTIONMS_ISSET_ID = 1;
  private static final int __PARTITIONPUTQPSQUOTA_ISSET_ID = 2;
  private static final int __PARTITIONPUTBYTESQPSQUOTA_ISSET_ID = 3;
  private static final int __PARTITIONPUTMESSAGEQPSQUOTA_ISSET_ID = 4;
  private static final int __PARTITIONGETQPSQUOTA_ISSET_ID = 5;
  private static final int __PARTITIONGETBYTESQPSQUOTA_ISSET_ID = 6;
  private static final int __PARTITIONGETMESSAGEQPSQUOTA_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_NUMBER,_Fields.MESSAGE_RETENTION_MS,_Fields.PARTITION_PUT_QPS_QUOTA,_Fields.PARTITION_PUT_BYTES_QPS_QUOTA,_Fields.PARTITION_PUT_MESSAGE_QPS_QUOTA,_Fields.PARTITION_GET_QPS_QUOTA,_Fields.PARTITION_GET_BYTES_QPS_QUOTA,_Fields.PARTITION_GET_MESSAGE_QPS_QUOTA};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_NUMBER, new libthrift091.meta_data.FieldMetaData("partitionNumber", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_RETENTION_MS, new libthrift091.meta_data.FieldMetaData("messageRetentionMs", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_PUT_QPS_QUOTA, new libthrift091.meta_data.FieldMetaData("partitionPutQpsQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_PUT_BYTES_QPS_QUOTA, new libthrift091.meta_data.FieldMetaData("partitionPutBytesQpsQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_PUT_MESSAGE_QPS_QUOTA, new libthrift091.meta_data.FieldMetaData("partitionPutMessageQpsQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_GET_QPS_QUOTA, new libthrift091.meta_data.FieldMetaData("partitionGetQpsQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_GET_BYTES_QPS_QUOTA, new libthrift091.meta_data.FieldMetaData("partitionGetBytesQpsQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_GET_MESSAGE_QPS_QUOTA, new libthrift091.meta_data.FieldMetaData("partitionGetMessageQpsQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(TopicAttribute.class, metaDataMap);
  }

  public TopicAttribute() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicAttribute(TopicAttribute other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partitionNumber = other.partitionNumber;
    this.messageRetentionMs = other.messageRetentionMs;
    this.partitionPutQpsQuota = other.partitionPutQpsQuota;
    this.partitionPutBytesQpsQuota = other.partitionPutBytesQpsQuota;
    this.partitionPutMessageQpsQuota = other.partitionPutMessageQpsQuota;
    this.partitionGetQpsQuota = other.partitionGetQpsQuota;
    this.partitionGetBytesQpsQuota = other.partitionGetBytesQpsQuota;
    this.partitionGetMessageQpsQuota = other.partitionGetMessageQpsQuota;
  }

  public TopicAttribute deepCopy() {
    return new TopicAttribute(this);
  }

  @Override
  public void clear() {
    setPartitionNumberIsSet(false);
    this.partitionNumber = 0;
    setMessageRetentionMsIsSet(false);
    this.messageRetentionMs = 0;
    setPartitionPutQpsQuotaIsSet(false);
    this.partitionPutQpsQuota = 0;
    setPartitionPutBytesQpsQuotaIsSet(false);
    this.partitionPutBytesQpsQuota = 0;
    setPartitionPutMessageQpsQuotaIsSet(false);
    this.partitionPutMessageQpsQuota = 0;
    setPartitionGetQpsQuotaIsSet(false);
    this.partitionGetQpsQuota = 0;
    setPartitionGetBytesQpsQuotaIsSet(false);
    this.partitionGetBytesQpsQuota = 0;
    setPartitionGetMessageQpsQuotaIsSet(false);
    this.partitionGetMessageQpsQuota = 0;
  }

  /**
   * Partition number for the topic, default 8 (1 ~ 256)
   * 
   */
  public int getPartitionNumber() {
    return this.partitionNumber;
  }

  /**
   * Partition number for the topic, default 8 (1 ~ 256)
   * 
   */
  public TopicAttribute setPartitionNumber(int partitionNumber) {
    this.partitionNumber = partitionNumber;
    setPartitionNumberIsSet(true);
    return this;
  }

  public void unsetPartitionNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONNUMBER_ISSET_ID);
  }

  /** Returns true if field partitionNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONNUMBER_ISSET_ID);
  }

  public void setPartitionNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONNUMBER_ISSET_ID, value);
  }

  /**
   * The retention time(in ms) for message in the topic, talos will make sure
   * that message in this topic will be available at least messageRetentionMS,
   * default 24h (1h ~ 30d)
   * 
   */
  public int getMessageRetentionMs() {
    return this.messageRetentionMs;
  }

  /**
   * The retention time(in ms) for message in the topic, talos will make sure
   * that message in this topic will be available at least messageRetentionMS,
   * default 24h (1h ~ 30d)
   * 
   */
  public TopicAttribute setMessageRetentionMs(int messageRetentionMs) {
    this.messageRetentionMs = messageRetentionMs;
    setMessageRetentionMsIsSet(true);
    return this;
  }

  public void unsetMessageRetentionMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGERETENTIONMS_ISSET_ID);
  }

  /** Returns true if field messageRetentionMs is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageRetentionMs() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGERETENTIONMS_ISSET_ID);
  }

  public void setMessageRetentionMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGERETENTIONMS_ISSET_ID, value);
  }

  /**
   * The max PutRecords times per parpation per second, default 5 (1 ~ 5);
   * 
   */
  public int getPartitionPutQpsQuota() {
    return this.partitionPutQpsQuota;
  }

  /**
   * The max PutRecords times per parpation per second, default 5 (1 ~ 5);
   * 
   */
  public TopicAttribute setPartitionPutQpsQuota(int partitionPutQpsQuota) {
    this.partitionPutQpsQuota = partitionPutQpsQuota;
    setPartitionPutQpsQuotaIsSet(true);
    return this;
  }

  public void unsetPartitionPutQpsQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONPUTQPSQUOTA_ISSET_ID);
  }

  /** Returns true if field partitionPutQpsQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionPutQpsQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONPUTQPSQUOTA_ISSET_ID);
  }

  public void setPartitionPutQpsQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONPUTQPSQUOTA_ISSET_ID, value);
  }

  /**
   * The max put bytes per partation per second, default 1M (1B ~ 1M);
   * 
   */
  public int getPartitionPutBytesQpsQuota() {
    return this.partitionPutBytesQpsQuota;
  }

  /**
   * The max put bytes per partation per second, default 1M (1B ~ 1M);
   * 
   */
  public TopicAttribute setPartitionPutBytesQpsQuota(int partitionPutBytesQpsQuota) {
    this.partitionPutBytesQpsQuota = partitionPutBytesQpsQuota;
    setPartitionPutBytesQpsQuotaIsSet(true);
    return this;
  }

  public void unsetPartitionPutBytesQpsQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONPUTBYTESQPSQUOTA_ISSET_ID);
  }

  /** Returns true if field partitionPutBytesQpsQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionPutBytesQpsQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONPUTBYTESQPSQUOTA_ISSET_ID);
  }

  public void setPartitionPutBytesQpsQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONPUTBYTESQPSQUOTA_ISSET_ID, value);
  }

  /**
   * The max put messages per partition per second, default 1000 (1 ~ 1000);
   * 
   */
  public int getPartitionPutMessageQpsQuota() {
    return this.partitionPutMessageQpsQuota;
  }

  /**
   * The max put messages per partition per second, default 1000 (1 ~ 1000);
   * 
   */
  public TopicAttribute setPartitionPutMessageQpsQuota(int partitionPutMessageQpsQuota) {
    this.partitionPutMessageQpsQuota = partitionPutMessageQpsQuota;
    setPartitionPutMessageQpsQuotaIsSet(true);
    return this;
  }

  public void unsetPartitionPutMessageQpsQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONPUTMESSAGEQPSQUOTA_ISSET_ID);
  }

  /** Returns true if field partitionPutMessageQpsQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionPutMessageQpsQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONPUTMESSAGEQPSQUOTA_ISSET_ID);
  }

  public void setPartitionPutMessageQpsQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONPUTMESSAGEQPSQUOTA_ISSET_ID, value);
  }

  /**
   * The max GetRecords times per partition per second, default 5 (1 ~ 5);
   * 
   */
  public int getPartitionGetQpsQuota() {
    return this.partitionGetQpsQuota;
  }

  /**
   * The max GetRecords times per partition per second, default 5 (1 ~ 5);
   * 
   */
  public TopicAttribute setPartitionGetQpsQuota(int partitionGetQpsQuota) {
    this.partitionGetQpsQuota = partitionGetQpsQuota;
    setPartitionGetQpsQuotaIsSet(true);
    return this;
  }

  public void unsetPartitionGetQpsQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONGETQPSQUOTA_ISSET_ID);
  }

  /** Returns true if field partitionGetQpsQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionGetQpsQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONGETQPSQUOTA_ISSET_ID);
  }

  public void setPartitionGetQpsQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONGETQPSQUOTA_ISSET_ID, value);
  }

  /**
   * The max get bytes per partition per second, default 2M (1B ~ 2M);
   * 
   */
  public int getPartitionGetBytesQpsQuota() {
    return this.partitionGetBytesQpsQuota;
  }

  /**
   * The max get bytes per partition per second, default 2M (1B ~ 2M);
   * 
   */
  public TopicAttribute setPartitionGetBytesQpsQuota(int partitionGetBytesQpsQuota) {
    this.partitionGetBytesQpsQuota = partitionGetBytesQpsQuota;
    setPartitionGetBytesQpsQuotaIsSet(true);
    return this;
  }

  public void unsetPartitionGetBytesQpsQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONGETBYTESQPSQUOTA_ISSET_ID);
  }

  /** Returns true if field partitionGetBytesQpsQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionGetBytesQpsQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONGETBYTESQPSQUOTA_ISSET_ID);
  }

  public void setPartitionGetBytesQpsQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONGETBYTESQPSQUOTA_ISSET_ID, value);
  }

  /**
   * The max get messages per partition per second, default 2000 (1 ~ 2000);
   * 
   */
  public int getPartitionGetMessageQpsQuota() {
    return this.partitionGetMessageQpsQuota;
  }

  /**
   * The max get messages per partition per second, default 2000 (1 ~ 2000);
   * 
   */
  public TopicAttribute setPartitionGetMessageQpsQuota(int partitionGetMessageQpsQuota) {
    this.partitionGetMessageQpsQuota = partitionGetMessageQpsQuota;
    setPartitionGetMessageQpsQuotaIsSet(true);
    return this;
  }

  public void unsetPartitionGetMessageQpsQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONGETMESSAGEQPSQUOTA_ISSET_ID);
  }

  /** Returns true if field partitionGetMessageQpsQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionGetMessageQpsQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONGETMESSAGEQPSQUOTA_ISSET_ID);
  }

  public void setPartitionGetMessageQpsQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONGETMESSAGEQPSQUOTA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_NUMBER:
      if (value == null) {
        unsetPartitionNumber();
      } else {
        setPartitionNumber((Integer)value);
      }
      break;

    case MESSAGE_RETENTION_MS:
      if (value == null) {
        unsetMessageRetentionMs();
      } else {
        setMessageRetentionMs((Integer)value);
      }
      break;

    case PARTITION_PUT_QPS_QUOTA:
      if (value == null) {
        unsetPartitionPutQpsQuota();
      } else {
        setPartitionPutQpsQuota((Integer)value);
      }
      break;

    case PARTITION_PUT_BYTES_QPS_QUOTA:
      if (value == null) {
        unsetPartitionPutBytesQpsQuota();
      } else {
        setPartitionPutBytesQpsQuota((Integer)value);
      }
      break;

    case PARTITION_PUT_MESSAGE_QPS_QUOTA:
      if (value == null) {
        unsetPartitionPutMessageQpsQuota();
      } else {
        setPartitionPutMessageQpsQuota((Integer)value);
      }
      break;

    case PARTITION_GET_QPS_QUOTA:
      if (value == null) {
        unsetPartitionGetQpsQuota();
      } else {
        setPartitionGetQpsQuota((Integer)value);
      }
      break;

    case PARTITION_GET_BYTES_QPS_QUOTA:
      if (value == null) {
        unsetPartitionGetBytesQpsQuota();
      } else {
        setPartitionGetBytesQpsQuota((Integer)value);
      }
      break;

    case PARTITION_GET_MESSAGE_QPS_QUOTA:
      if (value == null) {
        unsetPartitionGetMessageQpsQuota();
      } else {
        setPartitionGetMessageQpsQuota((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_NUMBER:
      return Integer.valueOf(getPartitionNumber());

    case MESSAGE_RETENTION_MS:
      return Integer.valueOf(getMessageRetentionMs());

    case PARTITION_PUT_QPS_QUOTA:
      return Integer.valueOf(getPartitionPutQpsQuota());

    case PARTITION_PUT_BYTES_QPS_QUOTA:
      return Integer.valueOf(getPartitionPutBytesQpsQuota());

    case PARTITION_PUT_MESSAGE_QPS_QUOTA:
      return Integer.valueOf(getPartitionPutMessageQpsQuota());

    case PARTITION_GET_QPS_QUOTA:
      return Integer.valueOf(getPartitionGetQpsQuota());

    case PARTITION_GET_BYTES_QPS_QUOTA:
      return Integer.valueOf(getPartitionGetBytesQpsQuota());

    case PARTITION_GET_MESSAGE_QPS_QUOTA:
      return Integer.valueOf(getPartitionGetMessageQpsQuota());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_NUMBER:
      return isSetPartitionNumber();
    case MESSAGE_RETENTION_MS:
      return isSetMessageRetentionMs();
    case PARTITION_PUT_QPS_QUOTA:
      return isSetPartitionPutQpsQuota();
    case PARTITION_PUT_BYTES_QPS_QUOTA:
      return isSetPartitionPutBytesQpsQuota();
    case PARTITION_PUT_MESSAGE_QPS_QUOTA:
      return isSetPartitionPutMessageQpsQuota();
    case PARTITION_GET_QPS_QUOTA:
      return isSetPartitionGetQpsQuota();
    case PARTITION_GET_BYTES_QPS_QUOTA:
      return isSetPartitionGetBytesQpsQuota();
    case PARTITION_GET_MESSAGE_QPS_QUOTA:
      return isSetPartitionGetMessageQpsQuota();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopicAttribute)
      return this.equals((TopicAttribute)that);
    return false;
  }

  public boolean equals(TopicAttribute that) {
    if (that == null)
      return false;

    boolean this_present_partitionNumber = true && this.isSetPartitionNumber();
    boolean that_present_partitionNumber = true && that.isSetPartitionNumber();
    if (this_present_partitionNumber || that_present_partitionNumber) {
      if (!(this_present_partitionNumber && that_present_partitionNumber))
        return false;
      if (this.partitionNumber != that.partitionNumber)
        return false;
    }

    boolean this_present_messageRetentionMs = true && this.isSetMessageRetentionMs();
    boolean that_present_messageRetentionMs = true && that.isSetMessageRetentionMs();
    if (this_present_messageRetentionMs || that_present_messageRetentionMs) {
      if (!(this_present_messageRetentionMs && that_present_messageRetentionMs))
        return false;
      if (this.messageRetentionMs != that.messageRetentionMs)
        return false;
    }

    boolean this_present_partitionPutQpsQuota = true && this.isSetPartitionPutQpsQuota();
    boolean that_present_partitionPutQpsQuota = true && that.isSetPartitionPutQpsQuota();
    if (this_present_partitionPutQpsQuota || that_present_partitionPutQpsQuota) {
      if (!(this_present_partitionPutQpsQuota && that_present_partitionPutQpsQuota))
        return false;
      if (this.partitionPutQpsQuota != that.partitionPutQpsQuota)
        return false;
    }

    boolean this_present_partitionPutBytesQpsQuota = true && this.isSetPartitionPutBytesQpsQuota();
    boolean that_present_partitionPutBytesQpsQuota = true && that.isSetPartitionPutBytesQpsQuota();
    if (this_present_partitionPutBytesQpsQuota || that_present_partitionPutBytesQpsQuota) {
      if (!(this_present_partitionPutBytesQpsQuota && that_present_partitionPutBytesQpsQuota))
        return false;
      if (this.partitionPutBytesQpsQuota != that.partitionPutBytesQpsQuota)
        return false;
    }

    boolean this_present_partitionPutMessageQpsQuota = true && this.isSetPartitionPutMessageQpsQuota();
    boolean that_present_partitionPutMessageQpsQuota = true && that.isSetPartitionPutMessageQpsQuota();
    if (this_present_partitionPutMessageQpsQuota || that_present_partitionPutMessageQpsQuota) {
      if (!(this_present_partitionPutMessageQpsQuota && that_present_partitionPutMessageQpsQuota))
        return false;
      if (this.partitionPutMessageQpsQuota != that.partitionPutMessageQpsQuota)
        return false;
    }

    boolean this_present_partitionGetQpsQuota = true && this.isSetPartitionGetQpsQuota();
    boolean that_present_partitionGetQpsQuota = true && that.isSetPartitionGetQpsQuota();
    if (this_present_partitionGetQpsQuota || that_present_partitionGetQpsQuota) {
      if (!(this_present_partitionGetQpsQuota && that_present_partitionGetQpsQuota))
        return false;
      if (this.partitionGetQpsQuota != that.partitionGetQpsQuota)
        return false;
    }

    boolean this_present_partitionGetBytesQpsQuota = true && this.isSetPartitionGetBytesQpsQuota();
    boolean that_present_partitionGetBytesQpsQuota = true && that.isSetPartitionGetBytesQpsQuota();
    if (this_present_partitionGetBytesQpsQuota || that_present_partitionGetBytesQpsQuota) {
      if (!(this_present_partitionGetBytesQpsQuota && that_present_partitionGetBytesQpsQuota))
        return false;
      if (this.partitionGetBytesQpsQuota != that.partitionGetBytesQpsQuota)
        return false;
    }

    boolean this_present_partitionGetMessageQpsQuota = true && this.isSetPartitionGetMessageQpsQuota();
    boolean that_present_partitionGetMessageQpsQuota = true && that.isSetPartitionGetMessageQpsQuota();
    if (this_present_partitionGetMessageQpsQuota || that_present_partitionGetMessageQpsQuota) {
      if (!(this_present_partitionGetMessageQpsQuota && that_present_partitionGetMessageQpsQuota))
        return false;
      if (this.partitionGetMessageQpsQuota != that.partitionGetMessageQpsQuota)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partitionNumber = true && (isSetPartitionNumber());
    list.add(present_partitionNumber);
    if (present_partitionNumber)
      list.add(partitionNumber);

    boolean present_messageRetentionMs = true && (isSetMessageRetentionMs());
    list.add(present_messageRetentionMs);
    if (present_messageRetentionMs)
      list.add(messageRetentionMs);

    boolean present_partitionPutQpsQuota = true && (isSetPartitionPutQpsQuota());
    list.add(present_partitionPutQpsQuota);
    if (present_partitionPutQpsQuota)
      list.add(partitionPutQpsQuota);

    boolean present_partitionPutBytesQpsQuota = true && (isSetPartitionPutBytesQpsQuota());
    list.add(present_partitionPutBytesQpsQuota);
    if (present_partitionPutBytesQpsQuota)
      list.add(partitionPutBytesQpsQuota);

    boolean present_partitionPutMessageQpsQuota = true && (isSetPartitionPutMessageQpsQuota());
    list.add(present_partitionPutMessageQpsQuota);
    if (present_partitionPutMessageQpsQuota)
      list.add(partitionPutMessageQpsQuota);

    boolean present_partitionGetQpsQuota = true && (isSetPartitionGetQpsQuota());
    list.add(present_partitionGetQpsQuota);
    if (present_partitionGetQpsQuota)
      list.add(partitionGetQpsQuota);

    boolean present_partitionGetBytesQpsQuota = true && (isSetPartitionGetBytesQpsQuota());
    list.add(present_partitionGetBytesQpsQuota);
    if (present_partitionGetBytesQpsQuota)
      list.add(partitionGetBytesQpsQuota);

    boolean present_partitionGetMessageQpsQuota = true && (isSetPartitionGetMessageQpsQuota());
    list.add(present_partitionGetMessageQpsQuota);
    if (present_partitionGetMessageQpsQuota)
      list.add(partitionGetMessageQpsQuota);

    return list.hashCode();
  }

  @Override
  public int compareTo(TopicAttribute other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartitionNumber()).compareTo(other.isSetPartitionNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionNumber()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionNumber, other.partitionNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageRetentionMs()).compareTo(other.isSetMessageRetentionMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageRetentionMs()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.messageRetentionMs, other.messageRetentionMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionPutQpsQuota()).compareTo(other.isSetPartitionPutQpsQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionPutQpsQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionPutQpsQuota, other.partitionPutQpsQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionPutBytesQpsQuota()).compareTo(other.isSetPartitionPutBytesQpsQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionPutBytesQpsQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionPutBytesQpsQuota, other.partitionPutBytesQpsQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionPutMessageQpsQuota()).compareTo(other.isSetPartitionPutMessageQpsQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionPutMessageQpsQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionPutMessageQpsQuota, other.partitionPutMessageQpsQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionGetQpsQuota()).compareTo(other.isSetPartitionGetQpsQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionGetQpsQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionGetQpsQuota, other.partitionGetQpsQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionGetBytesQpsQuota()).compareTo(other.isSetPartitionGetBytesQpsQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionGetBytesQpsQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionGetBytesQpsQuota, other.partitionGetBytesQpsQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionGetMessageQpsQuota()).compareTo(other.isSetPartitionGetMessageQpsQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionGetMessageQpsQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.partitionGetMessageQpsQuota, other.partitionGetMessageQpsQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopicAttribute(");
    boolean first = true;

    if (isSetPartitionNumber()) {
      sb.append("partitionNumber:");
      sb.append(this.partitionNumber);
      first = false;
    }
    if (isSetMessageRetentionMs()) {
      if (!first) sb.append(", ");
      sb.append("messageRetentionMs:");
      sb.append(this.messageRetentionMs);
      first = false;
    }
    if (isSetPartitionPutQpsQuota()) {
      if (!first) sb.append(", ");
      sb.append("partitionPutQpsQuota:");
      sb.append(this.partitionPutQpsQuota);
      first = false;
    }
    if (isSetPartitionPutBytesQpsQuota()) {
      if (!first) sb.append(", ");
      sb.append("partitionPutBytesQpsQuota:");
      sb.append(this.partitionPutBytesQpsQuota);
      first = false;
    }
    if (isSetPartitionPutMessageQpsQuota()) {
      if (!first) sb.append(", ");
      sb.append("partitionPutMessageQpsQuota:");
      sb.append(this.partitionPutMessageQpsQuota);
      first = false;
    }
    if (isSetPartitionGetQpsQuota()) {
      if (!first) sb.append(", ");
      sb.append("partitionGetQpsQuota:");
      sb.append(this.partitionGetQpsQuota);
      first = false;
    }
    if (isSetPartitionGetBytesQpsQuota()) {
      if (!first) sb.append(", ");
      sb.append("partitionGetBytesQpsQuota:");
      sb.append(this.partitionGetBytesQpsQuota);
      first = false;
    }
    if (isSetPartitionGetMessageQpsQuota()) {
      if (!first) sb.append(", ");
      sb.append("partitionGetMessageQpsQuota:");
      sb.append(this.partitionGetMessageQpsQuota);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicAttributeStandardSchemeFactory implements SchemeFactory {
    public TopicAttributeStandardScheme getScheme() {
      return new TopicAttributeStandardScheme();
    }
  }

  private static class TopicAttributeStandardScheme extends StandardScheme<TopicAttribute> {

    public void read(libthrift091.protocol.TProtocol iprot, TopicAttribute struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_NUMBER
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionNumber = iprot.readI32();
              struct.setPartitionNumberIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_RETENTION_MS
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.messageRetentionMs = iprot.readI32();
              struct.setMessageRetentionMsIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_PUT_QPS_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionPutQpsQuota = iprot.readI32();
              struct.setPartitionPutQpsQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_PUT_BYTES_QPS_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionPutBytesQpsQuota = iprot.readI32();
              struct.setPartitionPutBytesQpsQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_PUT_MESSAGE_QPS_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionPutMessageQpsQuota = iprot.readI32();
              struct.setPartitionPutMessageQpsQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITION_GET_QPS_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionGetQpsQuota = iprot.readI32();
              struct.setPartitionGetQpsQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_GET_BYTES_QPS_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionGetBytesQpsQuota = iprot.readI32();
              struct.setPartitionGetBytesQpsQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_GET_MESSAGE_QPS_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.partitionGetMessageQpsQuota = iprot.readI32();
              struct.setPartitionGetMessageQpsQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, TopicAttribute struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPartitionNumber()) {
        oprot.writeFieldBegin(PARTITION_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.partitionNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMessageRetentionMs()) {
        oprot.writeFieldBegin(MESSAGE_RETENTION_MS_FIELD_DESC);
        oprot.writeI32(struct.messageRetentionMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionPutQpsQuota()) {
        oprot.writeFieldBegin(PARTITION_PUT_QPS_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.partitionPutQpsQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionPutBytesQpsQuota()) {
        oprot.writeFieldBegin(PARTITION_PUT_BYTES_QPS_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.partitionPutBytesQpsQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionPutMessageQpsQuota()) {
        oprot.writeFieldBegin(PARTITION_PUT_MESSAGE_QPS_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.partitionPutMessageQpsQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionGetQpsQuota()) {
        oprot.writeFieldBegin(PARTITION_GET_QPS_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.partitionGetQpsQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionGetBytesQpsQuota()) {
        oprot.writeFieldBegin(PARTITION_GET_BYTES_QPS_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.partitionGetBytesQpsQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionGetMessageQpsQuota()) {
        oprot.writeFieldBegin(PARTITION_GET_MESSAGE_QPS_QUOTA_FIELD_DESC);
        oprot.writeI32(struct.partitionGetMessageQpsQuota);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicAttributeTupleSchemeFactory implements SchemeFactory {
    public TopicAttributeTupleScheme getScheme() {
      return new TopicAttributeTupleScheme();
    }
  }

  private static class TopicAttributeTupleScheme extends TupleScheme<TopicAttribute> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, TopicAttribute struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartitionNumber()) {
        optionals.set(0);
      }
      if (struct.isSetMessageRetentionMs()) {
        optionals.set(1);
      }
      if (struct.isSetPartitionPutQpsQuota()) {
        optionals.set(2);
      }
      if (struct.isSetPartitionPutBytesQpsQuota()) {
        optionals.set(3);
      }
      if (struct.isSetPartitionPutMessageQpsQuota()) {
        optionals.set(4);
      }
      if (struct.isSetPartitionGetQpsQuota()) {
        optionals.set(5);
      }
      if (struct.isSetPartitionGetBytesQpsQuota()) {
        optionals.set(6);
      }
      if (struct.isSetPartitionGetMessageQpsQuota()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPartitionNumber()) {
        oprot.writeI32(struct.partitionNumber);
      }
      if (struct.isSetMessageRetentionMs()) {
        oprot.writeI32(struct.messageRetentionMs);
      }
      if (struct.isSetPartitionPutQpsQuota()) {
        oprot.writeI32(struct.partitionPutQpsQuota);
      }
      if (struct.isSetPartitionPutBytesQpsQuota()) {
        oprot.writeI32(struct.partitionPutBytesQpsQuota);
      }
      if (struct.isSetPartitionPutMessageQpsQuota()) {
        oprot.writeI32(struct.partitionPutMessageQpsQuota);
      }
      if (struct.isSetPartitionGetQpsQuota()) {
        oprot.writeI32(struct.partitionGetQpsQuota);
      }
      if (struct.isSetPartitionGetBytesQpsQuota()) {
        oprot.writeI32(struct.partitionGetBytesQpsQuota);
      }
      if (struct.isSetPartitionGetMessageQpsQuota()) {
        oprot.writeI32(struct.partitionGetMessageQpsQuota);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, TopicAttribute struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.partitionNumber = iprot.readI32();
        struct.setPartitionNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.messageRetentionMs = iprot.readI32();
        struct.setMessageRetentionMsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partitionPutQpsQuota = iprot.readI32();
        struct.setPartitionPutQpsQuotaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partitionPutBytesQpsQuota = iprot.readI32();
        struct.setPartitionPutBytesQpsQuotaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.partitionPutMessageQpsQuota = iprot.readI32();
        struct.setPartitionPutMessageQpsQuotaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.partitionGetQpsQuota = iprot.readI32();
        struct.setPartitionGetQpsQuotaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.partitionGetBytesQpsQuota = iprot.readI32();
        struct.setPartitionGetBytesQpsQuotaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.partitionGetMessageQpsQuota = iprot.readI32();
        struct.setPartitionGetMessageQpsQuotaIsSet(true);
      }
    }
  }

}

