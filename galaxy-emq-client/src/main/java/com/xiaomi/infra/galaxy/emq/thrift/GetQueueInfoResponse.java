/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emq.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-30")
public class GetQueueInfoResponse implements libthrift091.TBase<GetQueueInfoResponse, GetQueueInfoResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetQueueInfoResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("GetQueueInfoResponse");

  private static final libthrift091.protocol.TField QUEUE_NAME_FIELD_DESC = new libthrift091.protocol.TField("queueName", libthrift091.protocol.TType.STRING, (short)1);
  private static final libthrift091.protocol.TField QUEUE_ATTRIBUTE_FIELD_DESC = new libthrift091.protocol.TField("queueAttribute", libthrift091.protocol.TType.STRUCT, (short)2);
  private static final libthrift091.protocol.TField QUEUE_STATE_FIELD_DESC = new libthrift091.protocol.TField("queueState", libthrift091.protocol.TType.STRUCT, (short)3);
  private static final libthrift091.protocol.TField QUEUE_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("queueQuota", libthrift091.protocol.TType.STRUCT, (short)4);
  private static final libthrift091.protocol.TField IS_DEAD_LETTER_QUEUE_FIELD_DESC = new libthrift091.protocol.TField("isDeadLetterQueue", libthrift091.protocol.TType.BOOL, (short)5);
  private static final libthrift091.protocol.TField REDRIVE_POLICY_FIELD_DESC = new libthrift091.protocol.TField("redrivePolicy", libthrift091.protocol.TType.STRUCT, (short)6);
  private static final libthrift091.protocol.TField ENABLE_PRIORITY_FIELD_DESC = new libthrift091.protocol.TField("enablePriority", libthrift091.protocol.TType.BOOL, (short)7);
  private static final libthrift091.protocol.TField TOPIC_QUEUE_FIELD_DESC = new libthrift091.protocol.TField("topicQueue", libthrift091.protocol.TType.BOOL, (short)8);
  private static final libthrift091.protocol.TField DELETE_MESSAGE_FORCE_FIELD_DESC = new libthrift091.protocol.TField("deleteMessageForce", libthrift091.protocol.TType.BOOL, (short)9);
  private static final libthrift091.protocol.TField DEFAULT_TAG_NAME_FIELD_DESC = new libthrift091.protocol.TField("defaultTagName", libthrift091.protocol.TType.STRING, (short)10);
  private static final libthrift091.protocol.TField SOURCE_QUEUES_FIELD_DESC = new libthrift091.protocol.TField("sourceQueues", libthrift091.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetQueueInfoResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetQueueInfoResponseTupleSchemeFactory());
  }

  /**
   * The queue name;
   * 
   */
  public String queueName; // required
  /**
   * The queue attribute;
   * 
   */
  public QueueAttribute queueAttribute; // required
  /**
   * The queue state;
   * 
   */
  public QueueState queueState; // required
  /**
   * The queue quota;
   * 
   */
  public QueueQuota queueQuota; // optional
  /**
   * Whether the queue is a dead letter queue;
   * 
   */
  public boolean isDeadLetterQueue; // optional
  /**
   * The queue redrive policy, dead letter queue doesn't have redrive policy;
   * 
   */
  public RedrivePolicy redrivePolicy; // optional
  /**
   * The queue using priority of not;
   * 
   */
  public boolean enablePriority; // optional
  /**
   * Set the queue be a topic queue or not;
   * 
   */
  public boolean topicQueue; // optional
  /**
   * Purge expired messages even if they have not been received by users
   * 
   */
  public boolean deleteMessageForce; // optional
  public String defaultTagName; // optional
  public List<String> sourceQueues; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * The queue name;
     * 
     */
    QUEUE_NAME((short)1, "queueName"),
    /**
     * The queue attribute;
     * 
     */
    QUEUE_ATTRIBUTE((short)2, "queueAttribute"),
    /**
     * The queue state;
     * 
     */
    QUEUE_STATE((short)3, "queueState"),
    /**
     * The queue quota;
     * 
     */
    QUEUE_QUOTA((short)4, "queueQuota"),
    /**
     * Whether the queue is a dead letter queue;
     * 
     */
    IS_DEAD_LETTER_QUEUE((short)5, "isDeadLetterQueue"),
    /**
     * The queue redrive policy, dead letter queue doesn't have redrive policy;
     * 
     */
    REDRIVE_POLICY((short)6, "redrivePolicy"),
    /**
     * The queue using priority of not;
     * 
     */
    ENABLE_PRIORITY((short)7, "enablePriority"),
    /**
     * Set the queue be a topic queue or not;
     * 
     */
    TOPIC_QUEUE((short)8, "topicQueue"),
    /**
     * Purge expired messages even if they have not been received by users
     * 
     */
    DELETE_MESSAGE_FORCE((short)9, "deleteMessageForce"),
    DEFAULT_TAG_NAME((short)10, "defaultTagName"),
    SOURCE_QUEUES((short)11, "sourceQueues");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUEUE_NAME
          return QUEUE_NAME;
        case 2: // QUEUE_ATTRIBUTE
          return QUEUE_ATTRIBUTE;
        case 3: // QUEUE_STATE
          return QUEUE_STATE;
        case 4: // QUEUE_QUOTA
          return QUEUE_QUOTA;
        case 5: // IS_DEAD_LETTER_QUEUE
          return IS_DEAD_LETTER_QUEUE;
        case 6: // REDRIVE_POLICY
          return REDRIVE_POLICY;
        case 7: // ENABLE_PRIORITY
          return ENABLE_PRIORITY;
        case 8: // TOPIC_QUEUE
          return TOPIC_QUEUE;
        case 9: // DELETE_MESSAGE_FORCE
          return DELETE_MESSAGE_FORCE;
        case 10: // DEFAULT_TAG_NAME
          return DEFAULT_TAG_NAME;
        case 11: // SOURCE_QUEUES
          return SOURCE_QUEUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISDEADLETTERQUEUE_ISSET_ID = 0;
  private static final int __ENABLEPRIORITY_ISSET_ID = 1;
  private static final int __TOPICQUEUE_ISSET_ID = 2;
  private static final int __DELETEMESSAGEFORCE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUEUE_QUOTA,_Fields.IS_DEAD_LETTER_QUEUE,_Fields.REDRIVE_POLICY,_Fields.ENABLE_PRIORITY,_Fields.TOPIC_QUEUE,_Fields.DELETE_MESSAGE_FORCE,_Fields.DEFAULT_TAG_NAME,_Fields.SOURCE_QUEUES};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUEUE_NAME, new libthrift091.meta_data.FieldMetaData("queueName", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUEUE_ATTRIBUTE, new libthrift091.meta_data.FieldMetaData("queueAttribute", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, QueueAttribute.class)));
    tmpMap.put(_Fields.QUEUE_STATE, new libthrift091.meta_data.FieldMetaData("queueState", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, QueueState.class)));
    tmpMap.put(_Fields.QUEUE_QUOTA, new libthrift091.meta_data.FieldMetaData("queueQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, QueueQuota.class)));
    tmpMap.put(_Fields.IS_DEAD_LETTER_QUEUE, new libthrift091.meta_data.FieldMetaData("isDeadLetterQueue", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REDRIVE_POLICY, new libthrift091.meta_data.FieldMetaData("redrivePolicy", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, RedrivePolicy.class)));
    tmpMap.put(_Fields.ENABLE_PRIORITY, new libthrift091.meta_data.FieldMetaData("enablePriority", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOPIC_QUEUE, new libthrift091.meta_data.FieldMetaData("topicQueue", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETE_MESSAGE_FORCE, new libthrift091.meta_data.FieldMetaData("deleteMessageForce", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_TAG_NAME, new libthrift091.meta_data.FieldMetaData("defaultTagName", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_QUEUES, new libthrift091.meta_data.FieldMetaData("sourceQueues", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(GetQueueInfoResponse.class, metaDataMap);
  }

  public GetQueueInfoResponse() {
  }

  public GetQueueInfoResponse(
    String queueName,
    QueueAttribute queueAttribute,
    QueueState queueState)
  {
    this();
    this.queueName = queueName;
    this.queueAttribute = queueAttribute;
    this.queueState = queueState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetQueueInfoResponse(GetQueueInfoResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQueueName()) {
      this.queueName = other.queueName;
    }
    if (other.isSetQueueAttribute()) {
      this.queueAttribute = new QueueAttribute(other.queueAttribute);
    }
    if (other.isSetQueueState()) {
      this.queueState = new QueueState(other.queueState);
    }
    if (other.isSetQueueQuota()) {
      this.queueQuota = new QueueQuota(other.queueQuota);
    }
    this.isDeadLetterQueue = other.isDeadLetterQueue;
    if (other.isSetRedrivePolicy()) {
      this.redrivePolicy = new RedrivePolicy(other.redrivePolicy);
    }
    this.enablePriority = other.enablePriority;
    this.topicQueue = other.topicQueue;
    this.deleteMessageForce = other.deleteMessageForce;
    if (other.isSetDefaultTagName()) {
      this.defaultTagName = other.defaultTagName;
    }
    if (other.isSetSourceQueues()) {
      List<String> __this__sourceQueues = new ArrayList<String>(other.sourceQueues);
      this.sourceQueues = __this__sourceQueues;
    }
  }

  public GetQueueInfoResponse deepCopy() {
    return new GetQueueInfoResponse(this);
  }

  @Override
  public void clear() {
    this.queueName = null;
    this.queueAttribute = null;
    this.queueState = null;
    this.queueQuota = null;
    setIsDeadLetterQueueIsSet(false);
    this.isDeadLetterQueue = false;
    this.redrivePolicy = null;
    setEnablePriorityIsSet(false);
    this.enablePriority = false;
    setTopicQueueIsSet(false);
    this.topicQueue = false;
    setDeleteMessageForceIsSet(false);
    this.deleteMessageForce = false;
    this.defaultTagName = null;
    this.sourceQueues = null;
  }

  /**
   * The queue name;
   * 
   */
  public String getQueueName() {
    return this.queueName;
  }

  /**
   * The queue name;
   * 
   */
  public GetQueueInfoResponse setQueueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

  public void unsetQueueName() {
    this.queueName = null;
  }

  /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueName() {
    return this.queueName != null;
  }

  public void setQueueNameIsSet(boolean value) {
    if (!value) {
      this.queueName = null;
    }
  }

  /**
   * The queue attribute;
   * 
   */
  public QueueAttribute getQueueAttribute() {
    return this.queueAttribute;
  }

  /**
   * The queue attribute;
   * 
   */
  public GetQueueInfoResponse setQueueAttribute(QueueAttribute queueAttribute) {
    this.queueAttribute = queueAttribute;
    return this;
  }

  public void unsetQueueAttribute() {
    this.queueAttribute = null;
  }

  /** Returns true if field queueAttribute is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueAttribute() {
    return this.queueAttribute != null;
  }

  public void setQueueAttributeIsSet(boolean value) {
    if (!value) {
      this.queueAttribute = null;
    }
  }

  /**
   * The queue state;
   * 
   */
  public QueueState getQueueState() {
    return this.queueState;
  }

  /**
   * The queue state;
   * 
   */
  public GetQueueInfoResponse setQueueState(QueueState queueState) {
    this.queueState = queueState;
    return this;
  }

  public void unsetQueueState() {
    this.queueState = null;
  }

  /** Returns true if field queueState is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueState() {
    return this.queueState != null;
  }

  public void setQueueStateIsSet(boolean value) {
    if (!value) {
      this.queueState = null;
    }
  }

  /**
   * The queue quota;
   * 
   */
  public QueueQuota getQueueQuota() {
    return this.queueQuota;
  }

  /**
   * The queue quota;
   * 
   */
  public GetQueueInfoResponse setQueueQuota(QueueQuota queueQuota) {
    this.queueQuota = queueQuota;
    return this;
  }

  public void unsetQueueQuota() {
    this.queueQuota = null;
  }

  /** Returns true if field queueQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueQuota() {
    return this.queueQuota != null;
  }

  public void setQueueQuotaIsSet(boolean value) {
    if (!value) {
      this.queueQuota = null;
    }
  }

  /**
   * Whether the queue is a dead letter queue;
   * 
   */
  public boolean isIsDeadLetterQueue() {
    return this.isDeadLetterQueue;
  }

  /**
   * Whether the queue is a dead letter queue;
   * 
   */
  public GetQueueInfoResponse setIsDeadLetterQueue(boolean isDeadLetterQueue) {
    this.isDeadLetterQueue = isDeadLetterQueue;
    setIsDeadLetterQueueIsSet(true);
    return this;
  }

  public void unsetIsDeadLetterQueue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDEADLETTERQUEUE_ISSET_ID);
  }

  /** Returns true if field isDeadLetterQueue is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDeadLetterQueue() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDEADLETTERQUEUE_ISSET_ID);
  }

  public void setIsDeadLetterQueueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDEADLETTERQUEUE_ISSET_ID, value);
  }

  /**
   * The queue redrive policy, dead letter queue doesn't have redrive policy;
   * 
   */
  public RedrivePolicy getRedrivePolicy() {
    return this.redrivePolicy;
  }

  /**
   * The queue redrive policy, dead letter queue doesn't have redrive policy;
   * 
   */
  public GetQueueInfoResponse setRedrivePolicy(RedrivePolicy redrivePolicy) {
    this.redrivePolicy = redrivePolicy;
    return this;
  }

  public void unsetRedrivePolicy() {
    this.redrivePolicy = null;
  }

  /** Returns true if field redrivePolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetRedrivePolicy() {
    return this.redrivePolicy != null;
  }

  public void setRedrivePolicyIsSet(boolean value) {
    if (!value) {
      this.redrivePolicy = null;
    }
  }

  /**
   * The queue using priority of not;
   * 
   */
  public boolean isEnablePriority() {
    return this.enablePriority;
  }

  /**
   * The queue using priority of not;
   * 
   */
  public GetQueueInfoResponse setEnablePriority(boolean enablePriority) {
    this.enablePriority = enablePriority;
    setEnablePriorityIsSet(true);
    return this;
  }

  public void unsetEnablePriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLEPRIORITY_ISSET_ID);
  }

  /** Returns true if field enablePriority is set (has been assigned a value) and false otherwise */
  public boolean isSetEnablePriority() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLEPRIORITY_ISSET_ID);
  }

  public void setEnablePriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLEPRIORITY_ISSET_ID, value);
  }

  /**
   * Set the queue be a topic queue or not;
   * 
   */
  public boolean isTopicQueue() {
    return this.topicQueue;
  }

  /**
   * Set the queue be a topic queue or not;
   * 
   */
  public GetQueueInfoResponse setTopicQueue(boolean topicQueue) {
    this.topicQueue = topicQueue;
    setTopicQueueIsSet(true);
    return this;
  }

  public void unsetTopicQueue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICQUEUE_ISSET_ID);
  }

  /** Returns true if field topicQueue is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicQueue() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPICQUEUE_ISSET_ID);
  }

  public void setTopicQueueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICQUEUE_ISSET_ID, value);
  }

  /**
   * Purge expired messages even if they have not been received by users
   * 
   */
  public boolean isDeleteMessageForce() {
    return this.deleteMessageForce;
  }

  /**
   * Purge expired messages even if they have not been received by users
   * 
   */
  public GetQueueInfoResponse setDeleteMessageForce(boolean deleteMessageForce) {
    this.deleteMessageForce = deleteMessageForce;
    setDeleteMessageForceIsSet(true);
    return this;
  }

  public void unsetDeleteMessageForce() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETEMESSAGEFORCE_ISSET_ID);
  }

  /** Returns true if field deleteMessageForce is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteMessageForce() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETEMESSAGEFORCE_ISSET_ID);
  }

  public void setDeleteMessageForceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETEMESSAGEFORCE_ISSET_ID, value);
  }

  public String getDefaultTagName() {
    return this.defaultTagName;
  }

  public GetQueueInfoResponse setDefaultTagName(String defaultTagName) {
    this.defaultTagName = defaultTagName;
    return this;
  }

  public void unsetDefaultTagName() {
    this.defaultTagName = null;
  }

  /** Returns true if field defaultTagName is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultTagName() {
    return this.defaultTagName != null;
  }

  public void setDefaultTagNameIsSet(boolean value) {
    if (!value) {
      this.defaultTagName = null;
    }
  }

  public int getSourceQueuesSize() {
    return (this.sourceQueues == null) ? 0 : this.sourceQueues.size();
  }

  public java.util.Iterator<String> getSourceQueuesIterator() {
    return (this.sourceQueues == null) ? null : this.sourceQueues.iterator();
  }

  public void addToSourceQueues(String elem) {
    if (this.sourceQueues == null) {
      this.sourceQueues = new ArrayList<String>();
    }
    this.sourceQueues.add(elem);
  }

  public List<String> getSourceQueues() {
    return this.sourceQueues;
  }

  public GetQueueInfoResponse setSourceQueues(List<String> sourceQueues) {
    this.sourceQueues = sourceQueues;
    return this;
  }

  public void unsetSourceQueues() {
    this.sourceQueues = null;
  }

  /** Returns true if field sourceQueues is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceQueues() {
    return this.sourceQueues != null;
  }

  public void setSourceQueuesIsSet(boolean value) {
    if (!value) {
      this.sourceQueues = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUEUE_NAME:
      if (value == null) {
        unsetQueueName();
      } else {
        setQueueName((String)value);
      }
      break;

    case QUEUE_ATTRIBUTE:
      if (value == null) {
        unsetQueueAttribute();
      } else {
        setQueueAttribute((QueueAttribute)value);
      }
      break;

    case QUEUE_STATE:
      if (value == null) {
        unsetQueueState();
      } else {
        setQueueState((QueueState)value);
      }
      break;

    case QUEUE_QUOTA:
      if (value == null) {
        unsetQueueQuota();
      } else {
        setQueueQuota((QueueQuota)value);
      }
      break;

    case IS_DEAD_LETTER_QUEUE:
      if (value == null) {
        unsetIsDeadLetterQueue();
      } else {
        setIsDeadLetterQueue((Boolean)value);
      }
      break;

    case REDRIVE_POLICY:
      if (value == null) {
        unsetRedrivePolicy();
      } else {
        setRedrivePolicy((RedrivePolicy)value);
      }
      break;

    case ENABLE_PRIORITY:
      if (value == null) {
        unsetEnablePriority();
      } else {
        setEnablePriority((Boolean)value);
      }
      break;

    case TOPIC_QUEUE:
      if (value == null) {
        unsetTopicQueue();
      } else {
        setTopicQueue((Boolean)value);
      }
      break;

    case DELETE_MESSAGE_FORCE:
      if (value == null) {
        unsetDeleteMessageForce();
      } else {
        setDeleteMessageForce((Boolean)value);
      }
      break;

    case DEFAULT_TAG_NAME:
      if (value == null) {
        unsetDefaultTagName();
      } else {
        setDefaultTagName((String)value);
      }
      break;

    case SOURCE_QUEUES:
      if (value == null) {
        unsetSourceQueues();
      } else {
        setSourceQueues((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUE_NAME:
      return getQueueName();

    case QUEUE_ATTRIBUTE:
      return getQueueAttribute();

    case QUEUE_STATE:
      return getQueueState();

    case QUEUE_QUOTA:
      return getQueueQuota();

    case IS_DEAD_LETTER_QUEUE:
      return Boolean.valueOf(isIsDeadLetterQueue());

    case REDRIVE_POLICY:
      return getRedrivePolicy();

    case ENABLE_PRIORITY:
      return Boolean.valueOf(isEnablePriority());

    case TOPIC_QUEUE:
      return Boolean.valueOf(isTopicQueue());

    case DELETE_MESSAGE_FORCE:
      return Boolean.valueOf(isDeleteMessageForce());

    case DEFAULT_TAG_NAME:
      return getDefaultTagName();

    case SOURCE_QUEUES:
      return getSourceQueues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUEUE_NAME:
      return isSetQueueName();
    case QUEUE_ATTRIBUTE:
      return isSetQueueAttribute();
    case QUEUE_STATE:
      return isSetQueueState();
    case QUEUE_QUOTA:
      return isSetQueueQuota();
    case IS_DEAD_LETTER_QUEUE:
      return isSetIsDeadLetterQueue();
    case REDRIVE_POLICY:
      return isSetRedrivePolicy();
    case ENABLE_PRIORITY:
      return isSetEnablePriority();
    case TOPIC_QUEUE:
      return isSetTopicQueue();
    case DELETE_MESSAGE_FORCE:
      return isSetDeleteMessageForce();
    case DEFAULT_TAG_NAME:
      return isSetDefaultTagName();
    case SOURCE_QUEUES:
      return isSetSourceQueues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetQueueInfoResponse)
      return this.equals((GetQueueInfoResponse)that);
    return false;
  }

  public boolean equals(GetQueueInfoResponse that) {
    if (that == null)
      return false;

    boolean this_present_queueName = true && this.isSetQueueName();
    boolean that_present_queueName = true && that.isSetQueueName();
    if (this_present_queueName || that_present_queueName) {
      if (!(this_present_queueName && that_present_queueName))
        return false;
      if (!this.queueName.equals(that.queueName))
        return false;
    }

    boolean this_present_queueAttribute = true && this.isSetQueueAttribute();
    boolean that_present_queueAttribute = true && that.isSetQueueAttribute();
    if (this_present_queueAttribute || that_present_queueAttribute) {
      if (!(this_present_queueAttribute && that_present_queueAttribute))
        return false;
      if (!this.queueAttribute.equals(that.queueAttribute))
        return false;
    }

    boolean this_present_queueState = true && this.isSetQueueState();
    boolean that_present_queueState = true && that.isSetQueueState();
    if (this_present_queueState || that_present_queueState) {
      if (!(this_present_queueState && that_present_queueState))
        return false;
      if (!this.queueState.equals(that.queueState))
        return false;
    }

    boolean this_present_queueQuota = true && this.isSetQueueQuota();
    boolean that_present_queueQuota = true && that.isSetQueueQuota();
    if (this_present_queueQuota || that_present_queueQuota) {
      if (!(this_present_queueQuota && that_present_queueQuota))
        return false;
      if (!this.queueQuota.equals(that.queueQuota))
        return false;
    }

    boolean this_present_isDeadLetterQueue = true && this.isSetIsDeadLetterQueue();
    boolean that_present_isDeadLetterQueue = true && that.isSetIsDeadLetterQueue();
    if (this_present_isDeadLetterQueue || that_present_isDeadLetterQueue) {
      if (!(this_present_isDeadLetterQueue && that_present_isDeadLetterQueue))
        return false;
      if (this.isDeadLetterQueue != that.isDeadLetterQueue)
        return false;
    }

    boolean this_present_redrivePolicy = true && this.isSetRedrivePolicy();
    boolean that_present_redrivePolicy = true && that.isSetRedrivePolicy();
    if (this_present_redrivePolicy || that_present_redrivePolicy) {
      if (!(this_present_redrivePolicy && that_present_redrivePolicy))
        return false;
      if (!this.redrivePolicy.equals(that.redrivePolicy))
        return false;
    }

    boolean this_present_enablePriority = true && this.isSetEnablePriority();
    boolean that_present_enablePriority = true && that.isSetEnablePriority();
    if (this_present_enablePriority || that_present_enablePriority) {
      if (!(this_present_enablePriority && that_present_enablePriority))
        return false;
      if (this.enablePriority != that.enablePriority)
        return false;
    }

    boolean this_present_topicQueue = true && this.isSetTopicQueue();
    boolean that_present_topicQueue = true && that.isSetTopicQueue();
    if (this_present_topicQueue || that_present_topicQueue) {
      if (!(this_present_topicQueue && that_present_topicQueue))
        return false;
      if (this.topicQueue != that.topicQueue)
        return false;
    }

    boolean this_present_deleteMessageForce = true && this.isSetDeleteMessageForce();
    boolean that_present_deleteMessageForce = true && that.isSetDeleteMessageForce();
    if (this_present_deleteMessageForce || that_present_deleteMessageForce) {
      if (!(this_present_deleteMessageForce && that_present_deleteMessageForce))
        return false;
      if (this.deleteMessageForce != that.deleteMessageForce)
        return false;
    }

    boolean this_present_defaultTagName = true && this.isSetDefaultTagName();
    boolean that_present_defaultTagName = true && that.isSetDefaultTagName();
    if (this_present_defaultTagName || that_present_defaultTagName) {
      if (!(this_present_defaultTagName && that_present_defaultTagName))
        return false;
      if (!this.defaultTagName.equals(that.defaultTagName))
        return false;
    }

    boolean this_present_sourceQueues = true && this.isSetSourceQueues();
    boolean that_present_sourceQueues = true && that.isSetSourceQueues();
    if (this_present_sourceQueues || that_present_sourceQueues) {
      if (!(this_present_sourceQueues && that_present_sourceQueues))
        return false;
      if (!this.sourceQueues.equals(that.sourceQueues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_queueName = true && (isSetQueueName());
    list.add(present_queueName);
    if (present_queueName)
      list.add(queueName);

    boolean present_queueAttribute = true && (isSetQueueAttribute());
    list.add(present_queueAttribute);
    if (present_queueAttribute)
      list.add(queueAttribute);

    boolean present_queueState = true && (isSetQueueState());
    list.add(present_queueState);
    if (present_queueState)
      list.add(queueState);

    boolean present_queueQuota = true && (isSetQueueQuota());
    list.add(present_queueQuota);
    if (present_queueQuota)
      list.add(queueQuota);

    boolean present_isDeadLetterQueue = true && (isSetIsDeadLetterQueue());
    list.add(present_isDeadLetterQueue);
    if (present_isDeadLetterQueue)
      list.add(isDeadLetterQueue);

    boolean present_redrivePolicy = true && (isSetRedrivePolicy());
    list.add(present_redrivePolicy);
    if (present_redrivePolicy)
      list.add(redrivePolicy);

    boolean present_enablePriority = true && (isSetEnablePriority());
    list.add(present_enablePriority);
    if (present_enablePriority)
      list.add(enablePriority);

    boolean present_topicQueue = true && (isSetTopicQueue());
    list.add(present_topicQueue);
    if (present_topicQueue)
      list.add(topicQueue);

    boolean present_deleteMessageForce = true && (isSetDeleteMessageForce());
    list.add(present_deleteMessageForce);
    if (present_deleteMessageForce)
      list.add(deleteMessageForce);

    boolean present_defaultTagName = true && (isSetDefaultTagName());
    list.add(present_defaultTagName);
    if (present_defaultTagName)
      list.add(defaultTagName);

    boolean present_sourceQueues = true && (isSetSourceQueues());
    list.add(present_sourceQueues);
    if (present_sourceQueues)
      list.add(sourceQueues);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetQueueInfoResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.queueName, other.queueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueAttribute()).compareTo(other.isSetQueueAttribute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueAttribute()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.queueAttribute, other.queueAttribute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueState()).compareTo(other.isSetQueueState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueState()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.queueState, other.queueState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueQuota()).compareTo(other.isSetQueueQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.queueQuota, other.queueQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDeadLetterQueue()).compareTo(other.isSetIsDeadLetterQueue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDeadLetterQueue()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.isDeadLetterQueue, other.isDeadLetterQueue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedrivePolicy()).compareTo(other.isSetRedrivePolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedrivePolicy()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.redrivePolicy, other.redrivePolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnablePriority()).compareTo(other.isSetEnablePriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnablePriority()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.enablePriority, other.enablePriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicQueue()).compareTo(other.isSetTopicQueue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicQueue()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.topicQueue, other.topicQueue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteMessageForce()).compareTo(other.isSetDeleteMessageForce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteMessageForce()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.deleteMessageForce, other.deleteMessageForce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultTagName()).compareTo(other.isSetDefaultTagName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultTagName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.defaultTagName, other.defaultTagName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceQueues()).compareTo(other.isSetSourceQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceQueues()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.sourceQueues, other.sourceQueues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetQueueInfoResponse(");
    boolean first = true;

    sb.append("queueName:");
    if (this.queueName == null) {
      sb.append("null");
    } else {
      sb.append(this.queueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueAttribute:");
    if (this.queueAttribute == null) {
      sb.append("null");
    } else {
      sb.append(this.queueAttribute);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueState:");
    if (this.queueState == null) {
      sb.append("null");
    } else {
      sb.append(this.queueState);
    }
    first = false;
    if (isSetQueueQuota()) {
      if (!first) sb.append(", ");
      sb.append("queueQuota:");
      if (this.queueQuota == null) {
        sb.append("null");
      } else {
        sb.append(this.queueQuota);
      }
      first = false;
    }
    if (isSetIsDeadLetterQueue()) {
      if (!first) sb.append(", ");
      sb.append("isDeadLetterQueue:");
      sb.append(this.isDeadLetterQueue);
      first = false;
    }
    if (isSetRedrivePolicy()) {
      if (!first) sb.append(", ");
      sb.append("redrivePolicy:");
      if (this.redrivePolicy == null) {
        sb.append("null");
      } else {
        sb.append(this.redrivePolicy);
      }
      first = false;
    }
    if (isSetEnablePriority()) {
      if (!first) sb.append(", ");
      sb.append("enablePriority:");
      sb.append(this.enablePriority);
      first = false;
    }
    if (isSetTopicQueue()) {
      if (!first) sb.append(", ");
      sb.append("topicQueue:");
      sb.append(this.topicQueue);
      first = false;
    }
    if (isSetDeleteMessageForce()) {
      if (!first) sb.append(", ");
      sb.append("deleteMessageForce:");
      sb.append(this.deleteMessageForce);
      first = false;
    }
    if (isSetDefaultTagName()) {
      if (!first) sb.append(", ");
      sb.append("defaultTagName:");
      if (this.defaultTagName == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultTagName);
      }
      first = false;
    }
    if (isSetSourceQueues()) {
      if (!first) sb.append(", ");
      sb.append("sourceQueues:");
      if (this.sourceQueues == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceQueues);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (queueName == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'queueName' was not present! Struct: " + toString());
    }
    if (queueAttribute == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'queueAttribute' was not present! Struct: " + toString());
    }
    if (queueState == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'queueState' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (queueAttribute != null) {
      queueAttribute.validate();
    }
    if (queueState != null) {
      queueState.validate();
    }
    if (queueQuota != null) {
      queueQuota.validate();
    }
    if (redrivePolicy != null) {
      redrivePolicy.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetQueueInfoResponseStandardSchemeFactory implements SchemeFactory {
    public GetQueueInfoResponseStandardScheme getScheme() {
      return new GetQueueInfoResponseStandardScheme();
    }
  }

  private static class GetQueueInfoResponseStandardScheme extends StandardScheme<GetQueueInfoResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, GetQueueInfoResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUEUE_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.queueName = iprot.readString();
              struct.setQueueNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUEUE_ATTRIBUTE
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.queueAttribute = new QueueAttribute();
              struct.queueAttribute.read(iprot);
              struct.setQueueAttributeIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUE_STATE
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.queueState = new QueueState();
              struct.queueState.read(iprot);
              struct.setQueueStateIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUEUE_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.queueQuota = new QueueQuota();
              struct.queueQuota.read(iprot);
              struct.setQueueQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_DEAD_LETTER_QUEUE
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.isDeadLetterQueue = iprot.readBool();
              struct.setIsDeadLetterQueueIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REDRIVE_POLICY
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.redrivePolicy = new RedrivePolicy();
              struct.redrivePolicy.read(iprot);
              struct.setRedrivePolicyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLE_PRIORITY
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.enablePriority = iprot.readBool();
              struct.setEnablePriorityIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOPIC_QUEUE
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.topicQueue = iprot.readBool();
              struct.setTopicQueueIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELETE_MESSAGE_FORCE
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.deleteMessageForce = iprot.readBool();
              struct.setDeleteMessageForceIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEFAULT_TAG_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.defaultTagName = iprot.readString();
              struct.setDefaultTagNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SOURCE_QUEUES
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list10 = iprot.readListBegin();
                struct.sourceQueues = new ArrayList<String>(_list10.size);
                String _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readString();
                  struct.sourceQueues.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setSourceQueuesIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, GetQueueInfoResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(struct.queueName);
        oprot.writeFieldEnd();
      }
      if (struct.queueAttribute != null) {
        oprot.writeFieldBegin(QUEUE_ATTRIBUTE_FIELD_DESC);
        struct.queueAttribute.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.queueState != null) {
        oprot.writeFieldBegin(QUEUE_STATE_FIELD_DESC);
        struct.queueState.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.queueQuota != null) {
        if (struct.isSetQueueQuota()) {
          oprot.writeFieldBegin(QUEUE_QUOTA_FIELD_DESC);
          struct.queueQuota.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDeadLetterQueue()) {
        oprot.writeFieldBegin(IS_DEAD_LETTER_QUEUE_FIELD_DESC);
        oprot.writeBool(struct.isDeadLetterQueue);
        oprot.writeFieldEnd();
      }
      if (struct.redrivePolicy != null) {
        if (struct.isSetRedrivePolicy()) {
          oprot.writeFieldBegin(REDRIVE_POLICY_FIELD_DESC);
          struct.redrivePolicy.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnablePriority()) {
        oprot.writeFieldBegin(ENABLE_PRIORITY_FIELD_DESC);
        oprot.writeBool(struct.enablePriority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTopicQueue()) {
        oprot.writeFieldBegin(TOPIC_QUEUE_FIELD_DESC);
        oprot.writeBool(struct.topicQueue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeleteMessageForce()) {
        oprot.writeFieldBegin(DELETE_MESSAGE_FORCE_FIELD_DESC);
        oprot.writeBool(struct.deleteMessageForce);
        oprot.writeFieldEnd();
      }
      if (struct.defaultTagName != null) {
        if (struct.isSetDefaultTagName()) {
          oprot.writeFieldBegin(DEFAULT_TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.defaultTagName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceQueues != null) {
        if (struct.isSetSourceQueues()) {
          oprot.writeFieldBegin(SOURCE_QUEUES_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRING, struct.sourceQueues.size()));
            for (String _iter13 : struct.sourceQueues)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetQueueInfoResponseTupleSchemeFactory implements SchemeFactory {
    public GetQueueInfoResponseTupleScheme getScheme() {
      return new GetQueueInfoResponseTupleScheme();
    }
  }

  private static class GetQueueInfoResponseTupleScheme extends TupleScheme<GetQueueInfoResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, GetQueueInfoResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.queueName);
      struct.queueAttribute.write(oprot);
      struct.queueState.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetQueueQuota()) {
        optionals.set(0);
      }
      if (struct.isSetIsDeadLetterQueue()) {
        optionals.set(1);
      }
      if (struct.isSetRedrivePolicy()) {
        optionals.set(2);
      }
      if (struct.isSetEnablePriority()) {
        optionals.set(3);
      }
      if (struct.isSetTopicQueue()) {
        optionals.set(4);
      }
      if (struct.isSetDeleteMessageForce()) {
        optionals.set(5);
      }
      if (struct.isSetDefaultTagName()) {
        optionals.set(6);
      }
      if (struct.isSetSourceQueues()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetQueueQuota()) {
        struct.queueQuota.write(oprot);
      }
      if (struct.isSetIsDeadLetterQueue()) {
        oprot.writeBool(struct.isDeadLetterQueue);
      }
      if (struct.isSetRedrivePolicy()) {
        struct.redrivePolicy.write(oprot);
      }
      if (struct.isSetEnablePriority()) {
        oprot.writeBool(struct.enablePriority);
      }
      if (struct.isSetTopicQueue()) {
        oprot.writeBool(struct.topicQueue);
      }
      if (struct.isSetDeleteMessageForce()) {
        oprot.writeBool(struct.deleteMessageForce);
      }
      if (struct.isSetDefaultTagName()) {
        oprot.writeString(struct.defaultTagName);
      }
      if (struct.isSetSourceQueues()) {
        {
          oprot.writeI32(struct.sourceQueues.size());
          for (String _iter14 : struct.sourceQueues)
          {
            oprot.writeString(_iter14);
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, GetQueueInfoResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.queueName = iprot.readString();
      struct.setQueueNameIsSet(true);
      struct.queueAttribute = new QueueAttribute();
      struct.queueAttribute.read(iprot);
      struct.setQueueAttributeIsSet(true);
      struct.queueState = new QueueState();
      struct.queueState.read(iprot);
      struct.setQueueStateIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.queueQuota = new QueueQuota();
        struct.queueQuota.read(iprot);
        struct.setQueueQuotaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isDeadLetterQueue = iprot.readBool();
        struct.setIsDeadLetterQueueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.redrivePolicy = new RedrivePolicy();
        struct.redrivePolicy.read(iprot);
        struct.setRedrivePolicyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enablePriority = iprot.readBool();
        struct.setEnablePriorityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.topicQueue = iprot.readBool();
        struct.setTopicQueueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deleteMessageForce = iprot.readBool();
        struct.setDeleteMessageForceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defaultTagName = iprot.readString();
        struct.setDefaultTagNameIsSet(true);
      }
      if (incoming.get(7)) {
        {
          libthrift091.protocol.TList _list15 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRING, iprot.readI32());
          struct.sourceQueues = new ArrayList<String>(_list15.size);
          String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.sourceQueues.add(_elem16);
          }
        }
        struct.setSourceQueuesIsSet(true);
      }
    }
  }

}

