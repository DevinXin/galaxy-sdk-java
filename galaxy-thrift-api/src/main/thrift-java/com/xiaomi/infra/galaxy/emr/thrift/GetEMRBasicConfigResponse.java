/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emr.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class GetEMRBasicConfigResponse implements libthrift091.TBase<GetEMRBasicConfigResponse, GetEMRBasicConfigResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetEMRBasicConfigResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("GetEMRBasicConfigResponse");

  private static final libthrift091.protocol.TField HARDWARE_FIELD_DESC = new libthrift091.protocol.TField("hardware", libthrift091.protocol.TType.LIST, (short)1);
  private static final libthrift091.protocol.TField SOFTWARE_FIELD_DESC = new libthrift091.protocol.TField("software", libthrift091.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetEMRBasicConfigResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetEMRBasicConfigResponseTupleSchemeFactory());
  }

  public List<InstanceTypeInfo> hardware; // optional
  public List<ApplicationSuite> software; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    HARDWARE((short)1, "hardware"),
    SOFTWARE((short)2, "software");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HARDWARE
          return HARDWARE;
        case 2: // SOFTWARE
          return SOFTWARE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HARDWARE,_Fields.SOFTWARE};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HARDWARE, new libthrift091.meta_data.FieldMetaData("hardware", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, InstanceTypeInfo.class))));
    tmpMap.put(_Fields.SOFTWARE, new libthrift091.meta_data.FieldMetaData("software", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, ApplicationSuite.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(GetEMRBasicConfigResponse.class, metaDataMap);
  }

  public GetEMRBasicConfigResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetEMRBasicConfigResponse(GetEMRBasicConfigResponse other) {
    if (other.isSetHardware()) {
      List<InstanceTypeInfo> __this__hardware = new ArrayList<InstanceTypeInfo>(other.hardware.size());
      for (InstanceTypeInfo other_element : other.hardware) {
        __this__hardware.add(new InstanceTypeInfo(other_element));
      }
      this.hardware = __this__hardware;
    }
    if (other.isSetSoftware()) {
      List<ApplicationSuite> __this__software = new ArrayList<ApplicationSuite>(other.software.size());
      for (ApplicationSuite other_element : other.software) {
        __this__software.add(new ApplicationSuite(other_element));
      }
      this.software = __this__software;
    }
  }

  public GetEMRBasicConfigResponse deepCopy() {
    return new GetEMRBasicConfigResponse(this);
  }

  @Override
  public void clear() {
    this.hardware = null;
    this.software = null;
  }

  public int getHardwareSize() {
    return (this.hardware == null) ? 0 : this.hardware.size();
  }

  public java.util.Iterator<InstanceTypeInfo> getHardwareIterator() {
    return (this.hardware == null) ? null : this.hardware.iterator();
  }

  public void addToHardware(InstanceTypeInfo elem) {
    if (this.hardware == null) {
      this.hardware = new ArrayList<InstanceTypeInfo>();
    }
    this.hardware.add(elem);
  }

  public List<InstanceTypeInfo> getHardware() {
    return this.hardware;
  }

  public GetEMRBasicConfigResponse setHardware(List<InstanceTypeInfo> hardware) {
    this.hardware = hardware;
    return this;
  }

  public void unsetHardware() {
    this.hardware = null;
  }

  /** Returns true if field hardware is set (has been assigned a value) and false otherwise */
  public boolean isSetHardware() {
    return this.hardware != null;
  }

  public void setHardwareIsSet(boolean value) {
    if (!value) {
      this.hardware = null;
    }
  }

  public int getSoftwareSize() {
    return (this.software == null) ? 0 : this.software.size();
  }

  public java.util.Iterator<ApplicationSuite> getSoftwareIterator() {
    return (this.software == null) ? null : this.software.iterator();
  }

  public void addToSoftware(ApplicationSuite elem) {
    if (this.software == null) {
      this.software = new ArrayList<ApplicationSuite>();
    }
    this.software.add(elem);
  }

  public List<ApplicationSuite> getSoftware() {
    return this.software;
  }

  public GetEMRBasicConfigResponse setSoftware(List<ApplicationSuite> software) {
    this.software = software;
    return this;
  }

  public void unsetSoftware() {
    this.software = null;
  }

  /** Returns true if field software is set (has been assigned a value) and false otherwise */
  public boolean isSetSoftware() {
    return this.software != null;
  }

  public void setSoftwareIsSet(boolean value) {
    if (!value) {
      this.software = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HARDWARE:
      if (value == null) {
        unsetHardware();
      } else {
        setHardware((List<InstanceTypeInfo>)value);
      }
      break;

    case SOFTWARE:
      if (value == null) {
        unsetSoftware();
      } else {
        setSoftware((List<ApplicationSuite>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HARDWARE:
      return getHardware();

    case SOFTWARE:
      return getSoftware();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HARDWARE:
      return isSetHardware();
    case SOFTWARE:
      return isSetSoftware();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetEMRBasicConfigResponse)
      return this.equals((GetEMRBasicConfigResponse)that);
    return false;
  }

  public boolean equals(GetEMRBasicConfigResponse that) {
    if (that == null)
      return false;

    boolean this_present_hardware = true && this.isSetHardware();
    boolean that_present_hardware = true && that.isSetHardware();
    if (this_present_hardware || that_present_hardware) {
      if (!(this_present_hardware && that_present_hardware))
        return false;
      if (!this.hardware.equals(that.hardware))
        return false;
    }

    boolean this_present_software = true && this.isSetSoftware();
    boolean that_present_software = true && that.isSetSoftware();
    if (this_present_software || that_present_software) {
      if (!(this_present_software && that_present_software))
        return false;
      if (!this.software.equals(that.software))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hardware = true && (isSetHardware());
    list.add(present_hardware);
    if (present_hardware)
      list.add(hardware);

    boolean present_software = true && (isSetSoftware());
    list.add(present_software);
    if (present_software)
      list.add(software);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetEMRBasicConfigResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHardware()).compareTo(other.isSetHardware());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardware()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.hardware, other.hardware);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoftware()).compareTo(other.isSetSoftware());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoftware()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.software, other.software);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetEMRBasicConfigResponse(");
    boolean first = true;

    if (isSetHardware()) {
      sb.append("hardware:");
      if (this.hardware == null) {
        sb.append("null");
      } else {
        sb.append(this.hardware);
      }
      first = false;
    }
    if (isSetSoftware()) {
      if (!first) sb.append(", ");
      sb.append("software:");
      if (this.software == null) {
        sb.append("null");
      } else {
        sb.append(this.software);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetEMRBasicConfigResponseStandardSchemeFactory implements SchemeFactory {
    public GetEMRBasicConfigResponseStandardScheme getScheme() {
      return new GetEMRBasicConfigResponseStandardScheme();
    }
  }

  private static class GetEMRBasicConfigResponseStandardScheme extends StandardScheme<GetEMRBasicConfigResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, GetEMRBasicConfigResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HARDWARE
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list118 = iprot.readListBegin();
                struct.hardware = new ArrayList<InstanceTypeInfo>(_list118.size);
                InstanceTypeInfo _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = new InstanceTypeInfo();
                  _elem119.read(iprot);
                  struct.hardware.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setHardwareIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOFTWARE
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list121 = iprot.readListBegin();
                struct.software = new ArrayList<ApplicationSuite>(_list121.size);
                ApplicationSuite _elem122;
                for (int _i123 = 0; _i123 < _list121.size; ++_i123)
                {
                  _elem122 = new ApplicationSuite();
                  _elem122.read(iprot);
                  struct.software.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setSoftwareIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, GetEMRBasicConfigResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hardware != null) {
        if (struct.isSetHardware()) {
          oprot.writeFieldBegin(HARDWARE_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, struct.hardware.size()));
            for (InstanceTypeInfo _iter124 : struct.hardware)
            {
              _iter124.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.software != null) {
        if (struct.isSetSoftware()) {
          oprot.writeFieldBegin(SOFTWARE_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, struct.software.size()));
            for (ApplicationSuite _iter125 : struct.software)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetEMRBasicConfigResponseTupleSchemeFactory implements SchemeFactory {
    public GetEMRBasicConfigResponseTupleScheme getScheme() {
      return new GetEMRBasicConfigResponseTupleScheme();
    }
  }

  private static class GetEMRBasicConfigResponseTupleScheme extends TupleScheme<GetEMRBasicConfigResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, GetEMRBasicConfigResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHardware()) {
        optionals.set(0);
      }
      if (struct.isSetSoftware()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHardware()) {
        {
          oprot.writeI32(struct.hardware.size());
          for (InstanceTypeInfo _iter126 : struct.hardware)
          {
            _iter126.write(oprot);
          }
        }
      }
      if (struct.isSetSoftware()) {
        {
          oprot.writeI32(struct.software.size());
          for (ApplicationSuite _iter127 : struct.software)
          {
            _iter127.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, GetEMRBasicConfigResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          libthrift091.protocol.TList _list128 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
          struct.hardware = new ArrayList<InstanceTypeInfo>(_list128.size);
          InstanceTypeInfo _elem129;
          for (int _i130 = 0; _i130 < _list128.size; ++_i130)
          {
            _elem129 = new InstanceTypeInfo();
            _elem129.read(iprot);
            struct.hardware.add(_elem129);
          }
        }
        struct.setHardwareIsSet(true);
      }
      if (incoming.get(1)) {
        {
          libthrift091.protocol.TList _list131 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
          struct.software = new ArrayList<ApplicationSuite>(_list131.size);
          ApplicationSuite _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = new ApplicationSuite();
            _elem132.read(iprot);
            struct.software.add(_elem132);
          }
        }
        struct.setSoftwareIsSet(true);
      }
    }
  }

}

