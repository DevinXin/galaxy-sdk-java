/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.sds.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-4-24")
public class AutoScaling implements libthrift091.TBase<AutoScaling, AutoScaling._Fields>, java.io.Serializable, Cloneable, Comparable<AutoScaling> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("AutoScaling");

  private static final libthrift091.protocol.TField ENABLE_WRITE_AUTO_SCALING_FIELD_DESC = new libthrift091.protocol.TField("enableWriteAutoScaling", libthrift091.protocol.TType.BOOL, (short)1);
  private static final libthrift091.protocol.TField WRITE_CAPACITY_MAX_FIELD_DESC = new libthrift091.protocol.TField("writeCapacityMax", libthrift091.protocol.TType.I64, (short)2);
  private static final libthrift091.protocol.TField WRITE_CAPACITY_MIN_FIELD_DESC = new libthrift091.protocol.TField("writeCapacityMin", libthrift091.protocol.TType.I64, (short)3);
  private static final libthrift091.protocol.TField WRITE_TARGET_UTILIZATION_RATIO_FIELD_DESC = new libthrift091.protocol.TField("writeTargetUtilizationRatio", libthrift091.protocol.TType.DOUBLE, (short)4);
  private static final libthrift091.protocol.TField ENABLE_READ_AUTO_SCALING_FIELD_DESC = new libthrift091.protocol.TField("enableReadAutoScaling", libthrift091.protocol.TType.BOOL, (short)5);
  private static final libthrift091.protocol.TField READ_CAPACITY_MAX_FIELD_DESC = new libthrift091.protocol.TField("readCapacityMax", libthrift091.protocol.TType.I64, (short)6);
  private static final libthrift091.protocol.TField READ_CAPACITY_MIN_FIELD_DESC = new libthrift091.protocol.TField("readCapacityMin", libthrift091.protocol.TType.I64, (short)7);
  private static final libthrift091.protocol.TField READ_TARGET_UTILIZATION_RATIO_FIELD_DESC = new libthrift091.protocol.TField("readTargetUtilizationRatio", libthrift091.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AutoScalingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AutoScalingTupleSchemeFactory());
  }

  public boolean enableWriteAutoScaling; // optional
  public long writeCapacityMax; // optional
  public long writeCapacityMin; // optional
  public double writeTargetUtilizationRatio; // optional
  public boolean enableReadAutoScaling; // optional
  public long readCapacityMax; // optional
  public long readCapacityMin; // optional
  public double readTargetUtilizationRatio; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    ENABLE_WRITE_AUTO_SCALING((short)1, "enableWriteAutoScaling"),
    WRITE_CAPACITY_MAX((short)2, "writeCapacityMax"),
    WRITE_CAPACITY_MIN((short)3, "writeCapacityMin"),
    WRITE_TARGET_UTILIZATION_RATIO((short)4, "writeTargetUtilizationRatio"),
    ENABLE_READ_AUTO_SCALING((short)5, "enableReadAutoScaling"),
    READ_CAPACITY_MAX((short)6, "readCapacityMax"),
    READ_CAPACITY_MIN((short)7, "readCapacityMin"),
    READ_TARGET_UTILIZATION_RATIO((short)8, "readTargetUtilizationRatio");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENABLE_WRITE_AUTO_SCALING
          return ENABLE_WRITE_AUTO_SCALING;
        case 2: // WRITE_CAPACITY_MAX
          return WRITE_CAPACITY_MAX;
        case 3: // WRITE_CAPACITY_MIN
          return WRITE_CAPACITY_MIN;
        case 4: // WRITE_TARGET_UTILIZATION_RATIO
          return WRITE_TARGET_UTILIZATION_RATIO;
        case 5: // ENABLE_READ_AUTO_SCALING
          return ENABLE_READ_AUTO_SCALING;
        case 6: // READ_CAPACITY_MAX
          return READ_CAPACITY_MAX;
        case 7: // READ_CAPACITY_MIN
          return READ_CAPACITY_MIN;
        case 8: // READ_TARGET_UTILIZATION_RATIO
          return READ_TARGET_UTILIZATION_RATIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLEWRITEAUTOSCALING_ISSET_ID = 0;
  private static final int __WRITECAPACITYMAX_ISSET_ID = 1;
  private static final int __WRITECAPACITYMIN_ISSET_ID = 2;
  private static final int __WRITETARGETUTILIZATIONRATIO_ISSET_ID = 3;
  private static final int __ENABLEREADAUTOSCALING_ISSET_ID = 4;
  private static final int __READCAPACITYMAX_ISSET_ID = 5;
  private static final int __READCAPACITYMIN_ISSET_ID = 6;
  private static final int __READTARGETUTILIZATIONRATIO_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENABLE_WRITE_AUTO_SCALING,_Fields.WRITE_CAPACITY_MAX,_Fields.WRITE_CAPACITY_MIN,_Fields.WRITE_TARGET_UTILIZATION_RATIO,_Fields.ENABLE_READ_AUTO_SCALING,_Fields.READ_CAPACITY_MAX,_Fields.READ_CAPACITY_MIN,_Fields.READ_TARGET_UTILIZATION_RATIO};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENABLE_WRITE_AUTO_SCALING, new libthrift091.meta_data.FieldMetaData("enableWriteAutoScaling", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WRITE_CAPACITY_MAX, new libthrift091.meta_data.FieldMetaData("writeCapacityMax", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE_CAPACITY_MIN, new libthrift091.meta_data.FieldMetaData("writeCapacityMin", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE_TARGET_UTILIZATION_RATIO, new libthrift091.meta_data.FieldMetaData("writeTargetUtilizationRatio", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENABLE_READ_AUTO_SCALING, new libthrift091.meta_data.FieldMetaData("enableReadAutoScaling", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.READ_CAPACITY_MAX, new libthrift091.meta_data.FieldMetaData("readCapacityMax", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_CAPACITY_MIN, new libthrift091.meta_data.FieldMetaData("readCapacityMin", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_TARGET_UTILIZATION_RATIO, new libthrift091.meta_data.FieldMetaData("readTargetUtilizationRatio", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(AutoScaling.class, metaDataMap);
  }

  public AutoScaling() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AutoScaling(AutoScaling other) {
    __isset_bitfield = other.__isset_bitfield;
    this.enableWriteAutoScaling = other.enableWriteAutoScaling;
    this.writeCapacityMax = other.writeCapacityMax;
    this.writeCapacityMin = other.writeCapacityMin;
    this.writeTargetUtilizationRatio = other.writeTargetUtilizationRatio;
    this.enableReadAutoScaling = other.enableReadAutoScaling;
    this.readCapacityMax = other.readCapacityMax;
    this.readCapacityMin = other.readCapacityMin;
    this.readTargetUtilizationRatio = other.readTargetUtilizationRatio;
  }

  public AutoScaling deepCopy() {
    return new AutoScaling(this);
  }

  @Override
  public void clear() {
    setEnableWriteAutoScalingIsSet(false);
    this.enableWriteAutoScaling = false;
    setWriteCapacityMaxIsSet(false);
    this.writeCapacityMax = 0;
    setWriteCapacityMinIsSet(false);
    this.writeCapacityMin = 0;
    setWriteTargetUtilizationRatioIsSet(false);
    this.writeTargetUtilizationRatio = 0.0;
    setEnableReadAutoScalingIsSet(false);
    this.enableReadAutoScaling = false;
    setReadCapacityMaxIsSet(false);
    this.readCapacityMax = 0;
    setReadCapacityMinIsSet(false);
    this.readCapacityMin = 0;
    setReadTargetUtilizationRatioIsSet(false);
    this.readTargetUtilizationRatio = 0.0;
  }

  public boolean isEnableWriteAutoScaling() {
    return this.enableWriteAutoScaling;
  }

  public AutoScaling setEnableWriteAutoScaling(boolean enableWriteAutoScaling) {
    this.enableWriteAutoScaling = enableWriteAutoScaling;
    setEnableWriteAutoScalingIsSet(true);
    return this;
  }

  public void unsetEnableWriteAutoScaling() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLEWRITEAUTOSCALING_ISSET_ID);
  }

  /** Returns true if field enableWriteAutoScaling is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableWriteAutoScaling() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLEWRITEAUTOSCALING_ISSET_ID);
  }

  public void setEnableWriteAutoScalingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLEWRITEAUTOSCALING_ISSET_ID, value);
  }

  public long getWriteCapacityMax() {
    return this.writeCapacityMax;
  }

  public AutoScaling setWriteCapacityMax(long writeCapacityMax) {
    this.writeCapacityMax = writeCapacityMax;
    setWriteCapacityMaxIsSet(true);
    return this;
  }

  public void unsetWriteCapacityMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITECAPACITYMAX_ISSET_ID);
  }

  /** Returns true if field writeCapacityMax is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteCapacityMax() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITECAPACITYMAX_ISSET_ID);
  }

  public void setWriteCapacityMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITECAPACITYMAX_ISSET_ID, value);
  }

  public long getWriteCapacityMin() {
    return this.writeCapacityMin;
  }

  public AutoScaling setWriteCapacityMin(long writeCapacityMin) {
    this.writeCapacityMin = writeCapacityMin;
    setWriteCapacityMinIsSet(true);
    return this;
  }

  public void unsetWriteCapacityMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITECAPACITYMIN_ISSET_ID);
  }

  /** Returns true if field writeCapacityMin is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteCapacityMin() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITECAPACITYMIN_ISSET_ID);
  }

  public void setWriteCapacityMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITECAPACITYMIN_ISSET_ID, value);
  }

  public double getWriteTargetUtilizationRatio() {
    return this.writeTargetUtilizationRatio;
  }

  public AutoScaling setWriteTargetUtilizationRatio(double writeTargetUtilizationRatio) {
    this.writeTargetUtilizationRatio = writeTargetUtilizationRatio;
    setWriteTargetUtilizationRatioIsSet(true);
    return this;
  }

  public void unsetWriteTargetUtilizationRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITETARGETUTILIZATIONRATIO_ISSET_ID);
  }

  /** Returns true if field writeTargetUtilizationRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteTargetUtilizationRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITETARGETUTILIZATIONRATIO_ISSET_ID);
  }

  public void setWriteTargetUtilizationRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITETARGETUTILIZATIONRATIO_ISSET_ID, value);
  }

  public boolean isEnableReadAutoScaling() {
    return this.enableReadAutoScaling;
  }

  public AutoScaling setEnableReadAutoScaling(boolean enableReadAutoScaling) {
    this.enableReadAutoScaling = enableReadAutoScaling;
    setEnableReadAutoScalingIsSet(true);
    return this;
  }

  public void unsetEnableReadAutoScaling() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLEREADAUTOSCALING_ISSET_ID);
  }

  /** Returns true if field enableReadAutoScaling is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableReadAutoScaling() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLEREADAUTOSCALING_ISSET_ID);
  }

  public void setEnableReadAutoScalingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLEREADAUTOSCALING_ISSET_ID, value);
  }

  public long getReadCapacityMax() {
    return this.readCapacityMax;
  }

  public AutoScaling setReadCapacityMax(long readCapacityMax) {
    this.readCapacityMax = readCapacityMax;
    setReadCapacityMaxIsSet(true);
    return this;
  }

  public void unsetReadCapacityMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READCAPACITYMAX_ISSET_ID);
  }

  /** Returns true if field readCapacityMax is set (has been assigned a value) and false otherwise */
  public boolean isSetReadCapacityMax() {
    return EncodingUtils.testBit(__isset_bitfield, __READCAPACITYMAX_ISSET_ID);
  }

  public void setReadCapacityMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READCAPACITYMAX_ISSET_ID, value);
  }

  public long getReadCapacityMin() {
    return this.readCapacityMin;
  }

  public AutoScaling setReadCapacityMin(long readCapacityMin) {
    this.readCapacityMin = readCapacityMin;
    setReadCapacityMinIsSet(true);
    return this;
  }

  public void unsetReadCapacityMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READCAPACITYMIN_ISSET_ID);
  }

  /** Returns true if field readCapacityMin is set (has been assigned a value) and false otherwise */
  public boolean isSetReadCapacityMin() {
    return EncodingUtils.testBit(__isset_bitfield, __READCAPACITYMIN_ISSET_ID);
  }

  public void setReadCapacityMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READCAPACITYMIN_ISSET_ID, value);
  }

  public double getReadTargetUtilizationRatio() {
    return this.readTargetUtilizationRatio;
  }

  public AutoScaling setReadTargetUtilizationRatio(double readTargetUtilizationRatio) {
    this.readTargetUtilizationRatio = readTargetUtilizationRatio;
    setReadTargetUtilizationRatioIsSet(true);
    return this;
  }

  public void unsetReadTargetUtilizationRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READTARGETUTILIZATIONRATIO_ISSET_ID);
  }

  /** Returns true if field readTargetUtilizationRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetReadTargetUtilizationRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __READTARGETUTILIZATIONRATIO_ISSET_ID);
  }

  public void setReadTargetUtilizationRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READTARGETUTILIZATIONRATIO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENABLE_WRITE_AUTO_SCALING:
      if (value == null) {
        unsetEnableWriteAutoScaling();
      } else {
        setEnableWriteAutoScaling((Boolean)value);
      }
      break;

    case WRITE_CAPACITY_MAX:
      if (value == null) {
        unsetWriteCapacityMax();
      } else {
        setWriteCapacityMax((Long)value);
      }
      break;

    case WRITE_CAPACITY_MIN:
      if (value == null) {
        unsetWriteCapacityMin();
      } else {
        setWriteCapacityMin((Long)value);
      }
      break;

    case WRITE_TARGET_UTILIZATION_RATIO:
      if (value == null) {
        unsetWriteTargetUtilizationRatio();
      } else {
        setWriteTargetUtilizationRatio((Double)value);
      }
      break;

    case ENABLE_READ_AUTO_SCALING:
      if (value == null) {
        unsetEnableReadAutoScaling();
      } else {
        setEnableReadAutoScaling((Boolean)value);
      }
      break;

    case READ_CAPACITY_MAX:
      if (value == null) {
        unsetReadCapacityMax();
      } else {
        setReadCapacityMax((Long)value);
      }
      break;

    case READ_CAPACITY_MIN:
      if (value == null) {
        unsetReadCapacityMin();
      } else {
        setReadCapacityMin((Long)value);
      }
      break;

    case READ_TARGET_UTILIZATION_RATIO:
      if (value == null) {
        unsetReadTargetUtilizationRatio();
      } else {
        setReadTargetUtilizationRatio((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENABLE_WRITE_AUTO_SCALING:
      return Boolean.valueOf(isEnableWriteAutoScaling());

    case WRITE_CAPACITY_MAX:
      return Long.valueOf(getWriteCapacityMax());

    case WRITE_CAPACITY_MIN:
      return Long.valueOf(getWriteCapacityMin());

    case WRITE_TARGET_UTILIZATION_RATIO:
      return Double.valueOf(getWriteTargetUtilizationRatio());

    case ENABLE_READ_AUTO_SCALING:
      return Boolean.valueOf(isEnableReadAutoScaling());

    case READ_CAPACITY_MAX:
      return Long.valueOf(getReadCapacityMax());

    case READ_CAPACITY_MIN:
      return Long.valueOf(getReadCapacityMin());

    case READ_TARGET_UTILIZATION_RATIO:
      return Double.valueOf(getReadTargetUtilizationRatio());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENABLE_WRITE_AUTO_SCALING:
      return isSetEnableWriteAutoScaling();
    case WRITE_CAPACITY_MAX:
      return isSetWriteCapacityMax();
    case WRITE_CAPACITY_MIN:
      return isSetWriteCapacityMin();
    case WRITE_TARGET_UTILIZATION_RATIO:
      return isSetWriteTargetUtilizationRatio();
    case ENABLE_READ_AUTO_SCALING:
      return isSetEnableReadAutoScaling();
    case READ_CAPACITY_MAX:
      return isSetReadCapacityMax();
    case READ_CAPACITY_MIN:
      return isSetReadCapacityMin();
    case READ_TARGET_UTILIZATION_RATIO:
      return isSetReadTargetUtilizationRatio();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AutoScaling)
      return this.equals((AutoScaling)that);
    return false;
  }

  public boolean equals(AutoScaling that) {
    if (that == null)
      return false;

    boolean this_present_enableWriteAutoScaling = true && this.isSetEnableWriteAutoScaling();
    boolean that_present_enableWriteAutoScaling = true && that.isSetEnableWriteAutoScaling();
    if (this_present_enableWriteAutoScaling || that_present_enableWriteAutoScaling) {
      if (!(this_present_enableWriteAutoScaling && that_present_enableWriteAutoScaling))
        return false;
      if (this.enableWriteAutoScaling != that.enableWriteAutoScaling)
        return false;
    }

    boolean this_present_writeCapacityMax = true && this.isSetWriteCapacityMax();
    boolean that_present_writeCapacityMax = true && that.isSetWriteCapacityMax();
    if (this_present_writeCapacityMax || that_present_writeCapacityMax) {
      if (!(this_present_writeCapacityMax && that_present_writeCapacityMax))
        return false;
      if (this.writeCapacityMax != that.writeCapacityMax)
        return false;
    }

    boolean this_present_writeCapacityMin = true && this.isSetWriteCapacityMin();
    boolean that_present_writeCapacityMin = true && that.isSetWriteCapacityMin();
    if (this_present_writeCapacityMin || that_present_writeCapacityMin) {
      if (!(this_present_writeCapacityMin && that_present_writeCapacityMin))
        return false;
      if (this.writeCapacityMin != that.writeCapacityMin)
        return false;
    }

    boolean this_present_writeTargetUtilizationRatio = true && this.isSetWriteTargetUtilizationRatio();
    boolean that_present_writeTargetUtilizationRatio = true && that.isSetWriteTargetUtilizationRatio();
    if (this_present_writeTargetUtilizationRatio || that_present_writeTargetUtilizationRatio) {
      if (!(this_present_writeTargetUtilizationRatio && that_present_writeTargetUtilizationRatio))
        return false;
      if (this.writeTargetUtilizationRatio != that.writeTargetUtilizationRatio)
        return false;
    }

    boolean this_present_enableReadAutoScaling = true && this.isSetEnableReadAutoScaling();
    boolean that_present_enableReadAutoScaling = true && that.isSetEnableReadAutoScaling();
    if (this_present_enableReadAutoScaling || that_present_enableReadAutoScaling) {
      if (!(this_present_enableReadAutoScaling && that_present_enableReadAutoScaling))
        return false;
      if (this.enableReadAutoScaling != that.enableReadAutoScaling)
        return false;
    }

    boolean this_present_readCapacityMax = true && this.isSetReadCapacityMax();
    boolean that_present_readCapacityMax = true && that.isSetReadCapacityMax();
    if (this_present_readCapacityMax || that_present_readCapacityMax) {
      if (!(this_present_readCapacityMax && that_present_readCapacityMax))
        return false;
      if (this.readCapacityMax != that.readCapacityMax)
        return false;
    }

    boolean this_present_readCapacityMin = true && this.isSetReadCapacityMin();
    boolean that_present_readCapacityMin = true && that.isSetReadCapacityMin();
    if (this_present_readCapacityMin || that_present_readCapacityMin) {
      if (!(this_present_readCapacityMin && that_present_readCapacityMin))
        return false;
      if (this.readCapacityMin != that.readCapacityMin)
        return false;
    }

    boolean this_present_readTargetUtilizationRatio = true && this.isSetReadTargetUtilizationRatio();
    boolean that_present_readTargetUtilizationRatio = true && that.isSetReadTargetUtilizationRatio();
    if (this_present_readTargetUtilizationRatio || that_present_readTargetUtilizationRatio) {
      if (!(this_present_readTargetUtilizationRatio && that_present_readTargetUtilizationRatio))
        return false;
      if (this.readTargetUtilizationRatio != that.readTargetUtilizationRatio)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_enableWriteAutoScaling = true && (isSetEnableWriteAutoScaling());
    list.add(present_enableWriteAutoScaling);
    if (present_enableWriteAutoScaling)
      list.add(enableWriteAutoScaling);

    boolean present_writeCapacityMax = true && (isSetWriteCapacityMax());
    list.add(present_writeCapacityMax);
    if (present_writeCapacityMax)
      list.add(writeCapacityMax);

    boolean present_writeCapacityMin = true && (isSetWriteCapacityMin());
    list.add(present_writeCapacityMin);
    if (present_writeCapacityMin)
      list.add(writeCapacityMin);

    boolean present_writeTargetUtilizationRatio = true && (isSetWriteTargetUtilizationRatio());
    list.add(present_writeTargetUtilizationRatio);
    if (present_writeTargetUtilizationRatio)
      list.add(writeTargetUtilizationRatio);

    boolean present_enableReadAutoScaling = true && (isSetEnableReadAutoScaling());
    list.add(present_enableReadAutoScaling);
    if (present_enableReadAutoScaling)
      list.add(enableReadAutoScaling);

    boolean present_readCapacityMax = true && (isSetReadCapacityMax());
    list.add(present_readCapacityMax);
    if (present_readCapacityMax)
      list.add(readCapacityMax);

    boolean present_readCapacityMin = true && (isSetReadCapacityMin());
    list.add(present_readCapacityMin);
    if (present_readCapacityMin)
      list.add(readCapacityMin);

    boolean present_readTargetUtilizationRatio = true && (isSetReadTargetUtilizationRatio());
    list.add(present_readTargetUtilizationRatio);
    if (present_readTargetUtilizationRatio)
      list.add(readTargetUtilizationRatio);

    return list.hashCode();
  }

  @Override
  public int compareTo(AutoScaling other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEnableWriteAutoScaling()).compareTo(other.isSetEnableWriteAutoScaling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableWriteAutoScaling()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.enableWriteAutoScaling, other.enableWriteAutoScaling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteCapacityMax()).compareTo(other.isSetWriteCapacityMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteCapacityMax()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.writeCapacityMax, other.writeCapacityMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteCapacityMin()).compareTo(other.isSetWriteCapacityMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteCapacityMin()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.writeCapacityMin, other.writeCapacityMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteTargetUtilizationRatio()).compareTo(other.isSetWriteTargetUtilizationRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteTargetUtilizationRatio()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.writeTargetUtilizationRatio, other.writeTargetUtilizationRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableReadAutoScaling()).compareTo(other.isSetEnableReadAutoScaling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableReadAutoScaling()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.enableReadAutoScaling, other.enableReadAutoScaling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadCapacityMax()).compareTo(other.isSetReadCapacityMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadCapacityMax()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.readCapacityMax, other.readCapacityMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadCapacityMin()).compareTo(other.isSetReadCapacityMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadCapacityMin()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.readCapacityMin, other.readCapacityMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadTargetUtilizationRatio()).compareTo(other.isSetReadTargetUtilizationRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadTargetUtilizationRatio()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.readTargetUtilizationRatio, other.readTargetUtilizationRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AutoScaling(");
    boolean first = true;

    if (isSetEnableWriteAutoScaling()) {
      sb.append("enableWriteAutoScaling:");
      sb.append(this.enableWriteAutoScaling);
      first = false;
    }
    if (isSetWriteCapacityMax()) {
      if (!first) sb.append(", ");
      sb.append("writeCapacityMax:");
      sb.append(this.writeCapacityMax);
      first = false;
    }
    if (isSetWriteCapacityMin()) {
      if (!first) sb.append(", ");
      sb.append("writeCapacityMin:");
      sb.append(this.writeCapacityMin);
      first = false;
    }
    if (isSetWriteTargetUtilizationRatio()) {
      if (!first) sb.append(", ");
      sb.append("writeTargetUtilizationRatio:");
      sb.append(this.writeTargetUtilizationRatio);
      first = false;
    }
    if (isSetEnableReadAutoScaling()) {
      if (!first) sb.append(", ");
      sb.append("enableReadAutoScaling:");
      sb.append(this.enableReadAutoScaling);
      first = false;
    }
    if (isSetReadCapacityMax()) {
      if (!first) sb.append(", ");
      sb.append("readCapacityMax:");
      sb.append(this.readCapacityMax);
      first = false;
    }
    if (isSetReadCapacityMin()) {
      if (!first) sb.append(", ");
      sb.append("readCapacityMin:");
      sb.append(this.readCapacityMin);
      first = false;
    }
    if (isSetReadTargetUtilizationRatio()) {
      if (!first) sb.append(", ");
      sb.append("readTargetUtilizationRatio:");
      sb.append(this.readTargetUtilizationRatio);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AutoScalingStandardSchemeFactory implements SchemeFactory {
    public AutoScalingStandardScheme getScheme() {
      return new AutoScalingStandardScheme();
    }
  }

  private static class AutoScalingStandardScheme extends StandardScheme<AutoScaling> {

    public void read(libthrift091.protocol.TProtocol iprot, AutoScaling struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENABLE_WRITE_AUTO_SCALING
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.enableWriteAutoScaling = iprot.readBool();
              struct.setEnableWriteAutoScalingIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WRITE_CAPACITY_MAX
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.writeCapacityMax = iprot.readI64();
              struct.setWriteCapacityMaxIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WRITE_CAPACITY_MIN
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.writeCapacityMin = iprot.readI64();
              struct.setWriteCapacityMinIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WRITE_TARGET_UTILIZATION_RATIO
            if (schemeField.type == libthrift091.protocol.TType.DOUBLE) {
              struct.writeTargetUtilizationRatio = iprot.readDouble();
              struct.setWriteTargetUtilizationRatioIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENABLE_READ_AUTO_SCALING
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.enableReadAutoScaling = iprot.readBool();
              struct.setEnableReadAutoScalingIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // READ_CAPACITY_MAX
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.readCapacityMax = iprot.readI64();
              struct.setReadCapacityMaxIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // READ_CAPACITY_MIN
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.readCapacityMin = iprot.readI64();
              struct.setReadCapacityMinIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // READ_TARGET_UTILIZATION_RATIO
            if (schemeField.type == libthrift091.protocol.TType.DOUBLE) {
              struct.readTargetUtilizationRatio = iprot.readDouble();
              struct.setReadTargetUtilizationRatioIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, AutoScaling struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEnableWriteAutoScaling()) {
        oprot.writeFieldBegin(ENABLE_WRITE_AUTO_SCALING_FIELD_DESC);
        oprot.writeBool(struct.enableWriteAutoScaling);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWriteCapacityMax()) {
        oprot.writeFieldBegin(WRITE_CAPACITY_MAX_FIELD_DESC);
        oprot.writeI64(struct.writeCapacityMax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWriteCapacityMin()) {
        oprot.writeFieldBegin(WRITE_CAPACITY_MIN_FIELD_DESC);
        oprot.writeI64(struct.writeCapacityMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWriteTargetUtilizationRatio()) {
        oprot.writeFieldBegin(WRITE_TARGET_UTILIZATION_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.writeTargetUtilizationRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableReadAutoScaling()) {
        oprot.writeFieldBegin(ENABLE_READ_AUTO_SCALING_FIELD_DESC);
        oprot.writeBool(struct.enableReadAutoScaling);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadCapacityMax()) {
        oprot.writeFieldBegin(READ_CAPACITY_MAX_FIELD_DESC);
        oprot.writeI64(struct.readCapacityMax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadCapacityMin()) {
        oprot.writeFieldBegin(READ_CAPACITY_MIN_FIELD_DESC);
        oprot.writeI64(struct.readCapacityMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadTargetUtilizationRatio()) {
        oprot.writeFieldBegin(READ_TARGET_UTILIZATION_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.readTargetUtilizationRatio);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AutoScalingTupleSchemeFactory implements SchemeFactory {
    public AutoScalingTupleScheme getScheme() {
      return new AutoScalingTupleScheme();
    }
  }

  private static class AutoScalingTupleScheme extends TupleScheme<AutoScaling> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, AutoScaling struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEnableWriteAutoScaling()) {
        optionals.set(0);
      }
      if (struct.isSetWriteCapacityMax()) {
        optionals.set(1);
      }
      if (struct.isSetWriteCapacityMin()) {
        optionals.set(2);
      }
      if (struct.isSetWriteTargetUtilizationRatio()) {
        optionals.set(3);
      }
      if (struct.isSetEnableReadAutoScaling()) {
        optionals.set(4);
      }
      if (struct.isSetReadCapacityMax()) {
        optionals.set(5);
      }
      if (struct.isSetReadCapacityMin()) {
        optionals.set(6);
      }
      if (struct.isSetReadTargetUtilizationRatio()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetEnableWriteAutoScaling()) {
        oprot.writeBool(struct.enableWriteAutoScaling);
      }
      if (struct.isSetWriteCapacityMax()) {
        oprot.writeI64(struct.writeCapacityMax);
      }
      if (struct.isSetWriteCapacityMin()) {
        oprot.writeI64(struct.writeCapacityMin);
      }
      if (struct.isSetWriteTargetUtilizationRatio()) {
        oprot.writeDouble(struct.writeTargetUtilizationRatio);
      }
      if (struct.isSetEnableReadAutoScaling()) {
        oprot.writeBool(struct.enableReadAutoScaling);
      }
      if (struct.isSetReadCapacityMax()) {
        oprot.writeI64(struct.readCapacityMax);
      }
      if (struct.isSetReadCapacityMin()) {
        oprot.writeI64(struct.readCapacityMin);
      }
      if (struct.isSetReadTargetUtilizationRatio()) {
        oprot.writeDouble(struct.readTargetUtilizationRatio);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, AutoScaling struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.enableWriteAutoScaling = iprot.readBool();
        struct.setEnableWriteAutoScalingIsSet(true);
      }
      if (incoming.get(1)) {
        struct.writeCapacityMax = iprot.readI64();
        struct.setWriteCapacityMaxIsSet(true);
      }
      if (incoming.get(2)) {
        struct.writeCapacityMin = iprot.readI64();
        struct.setWriteCapacityMinIsSet(true);
      }
      if (incoming.get(3)) {
        struct.writeTargetUtilizationRatio = iprot.readDouble();
        struct.setWriteTargetUtilizationRatioIsSet(true);
      }
      if (incoming.get(4)) {
        struct.enableReadAutoScaling = iprot.readBool();
        struct.setEnableReadAutoScalingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.readCapacityMax = iprot.readI64();
        struct.setReadCapacityMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.readCapacityMin = iprot.readI64();
        struct.setReadCapacityMinIsSet(true);
      }
      if (incoming.get(7)) {
        struct.readTargetUtilizationRatio = iprot.readDouble();
        struct.setReadTargetUtilizationRatioIsSet(true);
      }
    }
  }

}

