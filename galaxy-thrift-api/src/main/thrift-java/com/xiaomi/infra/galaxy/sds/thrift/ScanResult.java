/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.sds.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class ScanResult implements libthrift091.TBase<ScanResult, ScanResult._Fields>, java.io.Serializable, Cloneable, Comparable<ScanResult> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("ScanResult");

  private static final libthrift091.protocol.TField NEXT_START_KEY_FIELD_DESC = new libthrift091.protocol.TField("nextStartKey", libthrift091.protocol.TType.MAP, (short)1);
  private static final libthrift091.protocol.TField RECORDS_FIELD_DESC = new libthrift091.protocol.TField("records", libthrift091.protocol.TType.LIST, (short)2);
  private static final libthrift091.protocol.TField THROTTLED_FIELD_DESC = new libthrift091.protocol.TField("throttled", libthrift091.protocol.TType.BOOL, (short)3);
  private static final libthrift091.protocol.TField NEXT_SPLIT_INDEX_FIELD_DESC = new libthrift091.protocol.TField("nextSplitIndex", libthrift091.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScanResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScanResultTupleSchemeFactory());
  }

  /**
   * 下一个需要扫描的记录主键，NULL表示达到制定的结束位置
   */
  public Map<String,Datum> nextStartKey; // optional
  /**
   * 扫描的记录
   */
  public List<Map<String,Datum>> records; // optional
  /**
   * 是否超过表的qps quota
   */
  public boolean throttled; // optional
  /**
   * 下一个需要扫描的分片索引，-1表示已经扫描完所有分片，对salted table全局无序扫描时使用
   */
  public int nextSplitIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * 下一个需要扫描的记录主键，NULL表示达到制定的结束位置
     */
    NEXT_START_KEY((short)1, "nextStartKey"),
    /**
     * 扫描的记录
     */
    RECORDS((short)2, "records"),
    /**
     * 是否超过表的qps quota
     */
    THROTTLED((short)3, "throttled"),
    /**
     * 下一个需要扫描的分片索引，-1表示已经扫描完所有分片，对salted table全局无序扫描时使用
     */
    NEXT_SPLIT_INDEX((short)4, "nextSplitIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEXT_START_KEY
          return NEXT_START_KEY;
        case 2: // RECORDS
          return RECORDS;
        case 3: // THROTTLED
          return THROTTLED;
        case 4: // NEXT_SPLIT_INDEX
          return NEXT_SPLIT_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __THROTTLED_ISSET_ID = 0;
  private static final int __NEXTSPLITINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NEXT_START_KEY,_Fields.RECORDS,_Fields.THROTTLED,_Fields.NEXT_SPLIT_INDEX};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEXT_START_KEY, new libthrift091.meta_data.FieldMetaData("nextStartKey", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.MAP        , "Dictionary")));
    tmpMap.put(_Fields.RECORDS, new libthrift091.meta_data.FieldMetaData("records", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.MAP            , "Dictionary"))));
    tmpMap.put(_Fields.THROTTLED, new libthrift091.meta_data.FieldMetaData("throttled", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEXT_SPLIT_INDEX, new libthrift091.meta_data.FieldMetaData("nextSplitIndex", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(ScanResult.class, metaDataMap);
  }

  public ScanResult() {
    this.nextSplitIndex = -1;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScanResult(ScanResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNextStartKey()) {
      this.nextStartKey = other.nextStartKey;
    }
    if (other.isSetRecords()) {
      List<Map<String,Datum>> __this__records = new ArrayList<Map<String,Datum>>(other.records.size());
      for (Map<String,Datum> other_element : other.records) {
        __this__records.add(other_element);
      }
      this.records = __this__records;
    }
    this.throttled = other.throttled;
    this.nextSplitIndex = other.nextSplitIndex;
  }

  public ScanResult deepCopy() {
    return new ScanResult(this);
  }

  @Override
  public void clear() {
    this.nextStartKey = null;
    this.records = null;
    setThrottledIsSet(false);
    this.throttled = false;
    this.nextSplitIndex = -1;

  }

  public int getNextStartKeySize() {
    return (this.nextStartKey == null) ? 0 : this.nextStartKey.size();
  }

  public void putToNextStartKey(String key, Datum val) {
    if (this.nextStartKey == null) {
      this.nextStartKey = new HashMap<String,Datum>();
    }
    this.nextStartKey.put(key, val);
  }

  /**
   * 下一个需要扫描的记录主键，NULL表示达到制定的结束位置
   */
  public Map<String,Datum> getNextStartKey() {
    return this.nextStartKey;
  }

  /**
   * 下一个需要扫描的记录主键，NULL表示达到制定的结束位置
   */
  public ScanResult setNextStartKey(Map<String,Datum> nextStartKey) {
    this.nextStartKey = nextStartKey;
    return this;
  }

  public void unsetNextStartKey() {
    this.nextStartKey = null;
  }

  /** Returns true if field nextStartKey is set (has been assigned a value) and false otherwise */
  public boolean isSetNextStartKey() {
    return this.nextStartKey != null;
  }

  public void setNextStartKeyIsSet(boolean value) {
    if (!value) {
      this.nextStartKey = null;
    }
  }

  public int getRecordsSize() {
    return (this.records == null) ? 0 : this.records.size();
  }

  public java.util.Iterator<Map<String,Datum>> getRecordsIterator() {
    return (this.records == null) ? null : this.records.iterator();
  }

  public void addToRecords(Map<String,Datum> elem) {
    if (this.records == null) {
      this.records = new ArrayList<Map<String,Datum>>();
    }
    this.records.add(elem);
  }

  /**
   * 扫描的记录
   */
  public List<Map<String,Datum>> getRecords() {
    return this.records;
  }

  /**
   * 扫描的记录
   */
  public ScanResult setRecords(List<Map<String,Datum>> records) {
    this.records = records;
    return this;
  }

  public void unsetRecords() {
    this.records = null;
  }

  /** Returns true if field records is set (has been assigned a value) and false otherwise */
  public boolean isSetRecords() {
    return this.records != null;
  }

  public void setRecordsIsSet(boolean value) {
    if (!value) {
      this.records = null;
    }
  }

  /**
   * 是否超过表的qps quota
   */
  public boolean isThrottled() {
    return this.throttled;
  }

  /**
   * 是否超过表的qps quota
   */
  public ScanResult setThrottled(boolean throttled) {
    this.throttled = throttled;
    setThrottledIsSet(true);
    return this;
  }

  public void unsetThrottled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THROTTLED_ISSET_ID);
  }

  /** Returns true if field throttled is set (has been assigned a value) and false otherwise */
  public boolean isSetThrottled() {
    return EncodingUtils.testBit(__isset_bitfield, __THROTTLED_ISSET_ID);
  }

  public void setThrottledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THROTTLED_ISSET_ID, value);
  }

  /**
   * 下一个需要扫描的分片索引，-1表示已经扫描完所有分片，对salted table全局无序扫描时使用
   */
  public int getNextSplitIndex() {
    return this.nextSplitIndex;
  }

  /**
   * 下一个需要扫描的分片索引，-1表示已经扫描完所有分片，对salted table全局无序扫描时使用
   */
  public ScanResult setNextSplitIndex(int nextSplitIndex) {
    this.nextSplitIndex = nextSplitIndex;
    setNextSplitIndexIsSet(true);
    return this;
  }

  public void unsetNextSplitIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTSPLITINDEX_ISSET_ID);
  }

  /** Returns true if field nextSplitIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetNextSplitIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTSPLITINDEX_ISSET_ID);
  }

  public void setNextSplitIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTSPLITINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEXT_START_KEY:
      if (value == null) {
        unsetNextStartKey();
      } else {
        setNextStartKey((Map<String,Datum>)value);
      }
      break;

    case RECORDS:
      if (value == null) {
        unsetRecords();
      } else {
        setRecords((List<Map<String,Datum>>)value);
      }
      break;

    case THROTTLED:
      if (value == null) {
        unsetThrottled();
      } else {
        setThrottled((Boolean)value);
      }
      break;

    case NEXT_SPLIT_INDEX:
      if (value == null) {
        unsetNextSplitIndex();
      } else {
        setNextSplitIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEXT_START_KEY:
      return getNextStartKey();

    case RECORDS:
      return getRecords();

    case THROTTLED:
      return Boolean.valueOf(isThrottled());

    case NEXT_SPLIT_INDEX:
      return Integer.valueOf(getNextSplitIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEXT_START_KEY:
      return isSetNextStartKey();
    case RECORDS:
      return isSetRecords();
    case THROTTLED:
      return isSetThrottled();
    case NEXT_SPLIT_INDEX:
      return isSetNextSplitIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScanResult)
      return this.equals((ScanResult)that);
    return false;
  }

  public boolean equals(ScanResult that) {
    if (that == null)
      return false;

    boolean this_present_nextStartKey = true && this.isSetNextStartKey();
    boolean that_present_nextStartKey = true && that.isSetNextStartKey();
    if (this_present_nextStartKey || that_present_nextStartKey) {
      if (!(this_present_nextStartKey && that_present_nextStartKey))
        return false;
      if (!this.nextStartKey.equals(that.nextStartKey))
        return false;
    }

    boolean this_present_records = true && this.isSetRecords();
    boolean that_present_records = true && that.isSetRecords();
    if (this_present_records || that_present_records) {
      if (!(this_present_records && that_present_records))
        return false;
      if (!this.records.equals(that.records))
        return false;
    }

    boolean this_present_throttled = true && this.isSetThrottled();
    boolean that_present_throttled = true && that.isSetThrottled();
    if (this_present_throttled || that_present_throttled) {
      if (!(this_present_throttled && that_present_throttled))
        return false;
      if (this.throttled != that.throttled)
        return false;
    }

    boolean this_present_nextSplitIndex = true && this.isSetNextSplitIndex();
    boolean that_present_nextSplitIndex = true && that.isSetNextSplitIndex();
    if (this_present_nextSplitIndex || that_present_nextSplitIndex) {
      if (!(this_present_nextSplitIndex && that_present_nextSplitIndex))
        return false;
      if (this.nextSplitIndex != that.nextSplitIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nextStartKey = true && (isSetNextStartKey());
    list.add(present_nextStartKey);
    if (present_nextStartKey)
      list.add(nextStartKey);

    boolean present_records = true && (isSetRecords());
    list.add(present_records);
    if (present_records)
      list.add(records);

    boolean present_throttled = true && (isSetThrottled());
    list.add(present_throttled);
    if (present_throttled)
      list.add(throttled);

    boolean present_nextSplitIndex = true && (isSetNextSplitIndex());
    list.add(present_nextSplitIndex);
    if (present_nextSplitIndex)
      list.add(nextSplitIndex);

    return list.hashCode();
  }

  @Override
  public int compareTo(ScanResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNextStartKey()).compareTo(other.isSetNextStartKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextStartKey()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.nextStartKey, other.nextStartKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecords()).compareTo(other.isSetRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecords()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.records, other.records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThrottled()).compareTo(other.isSetThrottled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrottled()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.throttled, other.throttled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextSplitIndex()).compareTo(other.isSetNextSplitIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextSplitIndex()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.nextSplitIndex, other.nextSplitIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScanResult(");
    boolean first = true;

    if (isSetNextStartKey()) {
      sb.append("nextStartKey:");
      if (this.nextStartKey == null) {
        sb.append("null");
      } else {
        sb.append(this.nextStartKey);
      }
      first = false;
    }
    if (isSetRecords()) {
      if (!first) sb.append(", ");
      sb.append("records:");
      if (this.records == null) {
        sb.append("null");
      } else {
        sb.append(this.records);
      }
      first = false;
    }
    if (isSetThrottled()) {
      if (!first) sb.append(", ");
      sb.append("throttled:");
      sb.append(this.throttled);
      first = false;
    }
    if (isSetNextSplitIndex()) {
      if (!first) sb.append(", ");
      sb.append("nextSplitIndex:");
      sb.append(this.nextSplitIndex);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScanResultStandardSchemeFactory implements SchemeFactory {
    public ScanResultStandardScheme getScheme() {
      return new ScanResultStandardScheme();
    }
  }

  private static class ScanResultStandardScheme extends StandardScheme<ScanResult> {

    public void read(libthrift091.protocol.TProtocol iprot, ScanResult struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEXT_START_KEY
            if (schemeField.type == libthrift091.protocol.TType.MAP) {
              {
                libthrift091.protocol.TMap _map298 = iprot.readMapBegin();
                struct.nextStartKey = new HashMap<String,Datum>(2*_map298.size);
                String _key299;
                Datum _val300;
                for (int _i301 = 0; _i301 < _map298.size; ++_i301)
                {
                  _key299 = iprot.readString();
                  _val300 = new Datum();
                  _val300.read(iprot);
                  struct.nextStartKey.put(_key299, _val300);
                }
                iprot.readMapEnd();
              }
              struct.setNextStartKeyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECORDS
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list302 = iprot.readListBegin();
                struct.records = new ArrayList<Map<String,Datum>>(_list302.size);
                Map<String,Datum> _elem303;
                for (int _i304 = 0; _i304 < _list302.size; ++_i304)
                {
                  {
                    libthrift091.protocol.TMap _map305 = iprot.readMapBegin();
                    _elem303 = new HashMap<String,Datum>(2*_map305.size);
                    String _key306;
                    Datum _val307;
                    for (int _i308 = 0; _i308 < _map305.size; ++_i308)
                    {
                      _key306 = iprot.readString();
                      _val307 = new Datum();
                      _val307.read(iprot);
                      _elem303.put(_key306, _val307);
                    }
                    iprot.readMapEnd();
                  }
                  struct.records.add(_elem303);
                }
                iprot.readListEnd();
              }
              struct.setRecordsIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THROTTLED
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.throttled = iprot.readBool();
              struct.setThrottledIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEXT_SPLIT_INDEX
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.nextSplitIndex = iprot.readI32();
              struct.setNextSplitIndexIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, ScanResult struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nextStartKey != null) {
        if (struct.isSetNextStartKey()) {
          oprot.writeFieldBegin(NEXT_START_KEY_FIELD_DESC);
          {
            oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.STRUCT, struct.nextStartKey.size()));
            for (Map.Entry<String, Datum> _iter309 : struct.nextStartKey.entrySet())
            {
              oprot.writeString(_iter309.getKey());
              _iter309.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.records != null) {
        if (struct.isSetRecords()) {
          oprot.writeFieldBegin(RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.MAP, struct.records.size()));
            for (Map<String,Datum> _iter310 : struct.records)
            {
              {
                oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.STRUCT, _iter310.size()));
                for (Map.Entry<String, Datum> _iter311 : _iter310.entrySet())
                {
                  oprot.writeString(_iter311.getKey());
                  _iter311.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThrottled()) {
        oprot.writeFieldBegin(THROTTLED_FIELD_DESC);
        oprot.writeBool(struct.throttled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNextSplitIndex()) {
        oprot.writeFieldBegin(NEXT_SPLIT_INDEX_FIELD_DESC);
        oprot.writeI32(struct.nextSplitIndex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScanResultTupleSchemeFactory implements SchemeFactory {
    public ScanResultTupleScheme getScheme() {
      return new ScanResultTupleScheme();
    }
  }

  private static class ScanResultTupleScheme extends TupleScheme<ScanResult> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, ScanResult struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNextStartKey()) {
        optionals.set(0);
      }
      if (struct.isSetRecords()) {
        optionals.set(1);
      }
      if (struct.isSetThrottled()) {
        optionals.set(2);
      }
      if (struct.isSetNextSplitIndex()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNextStartKey()) {
        {
          oprot.writeI32(struct.nextStartKey.size());
          for (Map.Entry<String, Datum> _iter312 : struct.nextStartKey.entrySet())
          {
            oprot.writeString(_iter312.getKey());
            _iter312.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetRecords()) {
        {
          oprot.writeI32(struct.records.size());
          for (Map<String,Datum> _iter313 : struct.records)
          {
            {
              oprot.writeI32(_iter313.size());
              for (Map.Entry<String, Datum> _iter314 : _iter313.entrySet())
              {
                oprot.writeString(_iter314.getKey());
                _iter314.getValue().write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetThrottled()) {
        oprot.writeBool(struct.throttled);
      }
      if (struct.isSetNextSplitIndex()) {
        oprot.writeI32(struct.nextSplitIndex);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, ScanResult struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          libthrift091.protocol.TMap _map315 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.STRUCT, iprot.readI32());
          struct.nextStartKey = new HashMap<String,Datum>(2*_map315.size);
          String _key316;
          Datum _val317;
          for (int _i318 = 0; _i318 < _map315.size; ++_i318)
          {
            _key316 = iprot.readString();
            _val317 = new Datum();
            _val317.read(iprot);
            struct.nextStartKey.put(_key316, _val317);
          }
        }
        struct.setNextStartKeyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          libthrift091.protocol.TList _list319 = new libthrift091.protocol.TList(libthrift091.protocol.TType.MAP, iprot.readI32());
          struct.records = new ArrayList<Map<String,Datum>>(_list319.size);
          Map<String,Datum> _elem320;
          for (int _i321 = 0; _i321 < _list319.size; ++_i321)
          {
            {
              libthrift091.protocol.TMap _map322 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.STRUCT, iprot.readI32());
              _elem320 = new HashMap<String,Datum>(2*_map322.size);
              String _key323;
              Datum _val324;
              for (int _i325 = 0; _i325 < _map322.size; ++_i325)
              {
                _key323 = iprot.readString();
                _val324 = new Datum();
                _val324.read(iprot);
                _elem320.put(_key323, _val324);
              }
            }
            struct.records.add(_elem320);
          }
        }
        struct.setRecordsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.throttled = iprot.readBool();
        struct.setThrottledIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nextSplitIndex = iprot.readI32();
        struct.setNextSplitIndexIsSet(true);
      }
    }
  }

}

