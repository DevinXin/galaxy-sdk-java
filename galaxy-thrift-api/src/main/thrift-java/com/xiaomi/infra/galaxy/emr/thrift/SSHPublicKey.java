/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emr.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-7")
public class SSHPublicKey implements libthrift091.TBase<SSHPublicKey, SSHPublicKey._Fields>, java.io.Serializable, Cloneable, Comparable<SSHPublicKey> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("SSHPublicKey");

  private static final libthrift091.protocol.TField TITLE_FIELD_DESC = new libthrift091.protocol.TField("title", libthrift091.protocol.TType.STRING, (short)1);
  private static final libthrift091.protocol.TField CONTENT_FIELD_DESC = new libthrift091.protocol.TField("content", libthrift091.protocol.TType.STRING, (short)2);
  private static final libthrift091.protocol.TField FINGERPRINT_FIELD_DESC = new libthrift091.protocol.TField("fingerprint", libthrift091.protocol.TType.STRING, (short)3);
  private static final libthrift091.protocol.TField ADD_TIME_FIELD_DESC = new libthrift091.protocol.TField("addTime", libthrift091.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SSHPublicKeyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SSHPublicKeyTupleSchemeFactory());
  }

  public String title; // optional
  public String content; // optional
  public String fingerprint; // optional
  public int addTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    TITLE((short)1, "title"),
    CONTENT((short)2, "content"),
    FINGERPRINT((short)3, "fingerprint"),
    ADD_TIME((short)4, "addTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // CONTENT
          return CONTENT;
        case 3: // FINGERPRINT
          return FINGERPRINT;
        case 4: // ADD_TIME
          return ADD_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADDTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TITLE,_Fields.CONTENT,_Fields.FINGERPRINT,_Fields.ADD_TIME};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new libthrift091.meta_data.FieldMetaData("title", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new libthrift091.meta_data.FieldMetaData("content", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINGERPRINT, new libthrift091.meta_data.FieldMetaData("fingerprint", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_TIME, new libthrift091.meta_data.FieldMetaData("addTime", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(SSHPublicKey.class, metaDataMap);
  }

  public SSHPublicKey() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SSHPublicKey(SSHPublicKey other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetFingerprint()) {
      this.fingerprint = other.fingerprint;
    }
    this.addTime = other.addTime;
  }

  public SSHPublicKey deepCopy() {
    return new SSHPublicKey(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.content = null;
    this.fingerprint = null;
    setAddTimeIsSet(false);
    this.addTime = 0;
  }

  public String getTitle() {
    return this.title;
  }

  public SSHPublicKey setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SSHPublicKey setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getFingerprint() {
    return this.fingerprint;
  }

  public SSHPublicKey setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  public void unsetFingerprint() {
    this.fingerprint = null;
  }

  /** Returns true if field fingerprint is set (has been assigned a value) and false otherwise */
  public boolean isSetFingerprint() {
    return this.fingerprint != null;
  }

  public void setFingerprintIsSet(boolean value) {
    if (!value) {
      this.fingerprint = null;
    }
  }

  public int getAddTime() {
    return this.addTime;
  }

  public SSHPublicKey setAddTime(int addTime) {
    this.addTime = addTime;
    setAddTimeIsSet(true);
    return this;
  }

  public void unsetAddTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDTIME_ISSET_ID);
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDTIME_ISSET_ID);
  }

  public void setAddTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case FINGERPRINT:
      if (value == null) {
        unsetFingerprint();
      } else {
        setFingerprint((String)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case FINGERPRINT:
      return getFingerprint();

    case ADD_TIME:
      return Integer.valueOf(getAddTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case FINGERPRINT:
      return isSetFingerprint();
    case ADD_TIME:
      return isSetAddTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SSHPublicKey)
      return this.equals((SSHPublicKey)that);
    return false;
  }

  public boolean equals(SSHPublicKey that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_fingerprint = true && this.isSetFingerprint();
    boolean that_present_fingerprint = true && that.isSetFingerprint();
    if (this_present_fingerprint || that_present_fingerprint) {
      if (!(this_present_fingerprint && that_present_fingerprint))
        return false;
      if (!this.fingerprint.equals(that.fingerprint))
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (this.addTime != that.addTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_fingerprint = true && (isSetFingerprint());
    list.add(present_fingerprint);
    if (present_fingerprint)
      list.add(fingerprint);

    boolean present_addTime = true && (isSetAddTime());
    list.add(present_addTime);
    if (present_addTime)
      list.add(addTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(SSHPublicKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFingerprint()).compareTo(other.isSetFingerprint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFingerprint()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.fingerprint, other.fingerprint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SSHPublicKey(");
    boolean first = true;

    if (isSetTitle()) {
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetFingerprint()) {
      if (!first) sb.append(", ");
      sb.append("fingerprint:");
      if (this.fingerprint == null) {
        sb.append("null");
      } else {
        sb.append(this.fingerprint);
      }
      first = false;
    }
    if (isSetAddTime()) {
      if (!first) sb.append(", ");
      sb.append("addTime:");
      sb.append(this.addTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SSHPublicKeyStandardSchemeFactory implements SchemeFactory {
    public SSHPublicKeyStandardScheme getScheme() {
      return new SSHPublicKeyStandardScheme();
    }
  }

  private static class SSHPublicKeyStandardScheme extends StandardScheme<SSHPublicKey> {

    public void read(libthrift091.protocol.TProtocol iprot, SSHPublicKey struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FINGERPRINT
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.fingerprint = iprot.readString();
              struct.setFingerprintIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADD_TIME
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.addTime = iprot.readI32();
              struct.setAddTimeIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, SSHPublicKey struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fingerprint != null) {
        if (struct.isSetFingerprint()) {
          oprot.writeFieldBegin(FINGERPRINT_FIELD_DESC);
          oprot.writeString(struct.fingerprint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAddTime()) {
        oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
        oprot.writeI32(struct.addTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SSHPublicKeyTupleSchemeFactory implements SchemeFactory {
    public SSHPublicKeyTupleScheme getScheme() {
      return new SSHPublicKeyTupleScheme();
    }
  }

  private static class SSHPublicKeyTupleScheme extends TupleScheme<SSHPublicKey> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, SSHPublicKey struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetFingerprint()) {
        optionals.set(2);
      }
      if (struct.isSetAddTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetFingerprint()) {
        oprot.writeString(struct.fingerprint);
      }
      if (struct.isSetAddTime()) {
        oprot.writeI32(struct.addTime);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, SSHPublicKey struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fingerprint = iprot.readString();
        struct.setFingerprintIsSet(true);
      }
      if (incoming.get(3)) {
        struct.addTime = iprot.readI32();
        struct.setAddTimeIsSet(true);
      }
    }
  }

}

