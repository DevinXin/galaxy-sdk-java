/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.metrics.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-2")
public class DashboardService {

  /**
   * Dashboard类接口
   */
  public interface Iface extends com.xiaomi.infra.galaxy.metrics.thrift.BaseService.Iface {

    public void saveDashboard(Dashboard dashboard) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException;

    public void removeDashboard(String dashboardName) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException;

    public ListDashboardsResult listDashboards(ListDashboardsRequest request) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException;

    public List<String> suggest(String dashboardPrefix) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException;

    public PaintResult paintDashboard(String dashboardName, long startTime, long stopTime) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException;

    public PanelResult paintPanel(PanelRequest panelRequest, long startTime, long stopTime) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException;

  }

  public interface AsyncIface extends com.xiaomi.infra.galaxy.metrics.thrift.BaseService .AsyncIface {

    public void saveDashboard(Dashboard dashboard, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException;

    public void removeDashboard(String dashboardName, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException;

    public void listDashboards(ListDashboardsRequest request, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException;

    public void suggest(String dashboardPrefix, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException;

    public void paintDashboard(String dashboardName, long startTime, long stopTime, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException;

    public void paintPanel(PanelRequest panelRequest, long startTime, long stopTime, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException;

  }

  public static class Client extends com.xiaomi.infra.galaxy.metrics.thrift.BaseService.Client implements Iface {
    public static class Factory implements libthrift091.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(libthrift091.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(libthrift091.protocol.TProtocol iprot, libthrift091.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(libthrift091.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(libthrift091.protocol.TProtocol iprot, libthrift091.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void saveDashboard(Dashboard dashboard) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      send_saveDashboard(dashboard);
      recv_saveDashboard();
    }

    public void send_saveDashboard(Dashboard dashboard) throws libthrift091.TException
    {
      saveDashboard_args args = new saveDashboard_args();
      args.setDashboard(dashboard);
      sendBase("saveDashboard", args);
    }

    public void recv_saveDashboard() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      saveDashboard_result result = new saveDashboard_result();
      receiveBase(result, "saveDashboard");
      if (result.se != null) {
        throw result.se;
      }
      return;
    }

    public void removeDashboard(String dashboardName) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      send_removeDashboard(dashboardName);
      recv_removeDashboard();
    }

    public void send_removeDashboard(String dashboardName) throws libthrift091.TException
    {
      removeDashboard_args args = new removeDashboard_args();
      args.setDashboardName(dashboardName);
      sendBase("removeDashboard", args);
    }

    public void recv_removeDashboard() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      removeDashboard_result result = new removeDashboard_result();
      receiveBase(result, "removeDashboard");
      if (result.se != null) {
        throw result.se;
      }
      return;
    }

    public ListDashboardsResult listDashboards(ListDashboardsRequest request) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      send_listDashboards(request);
      return recv_listDashboards();
    }

    public void send_listDashboards(ListDashboardsRequest request) throws libthrift091.TException
    {
      listDashboards_args args = new listDashboards_args();
      args.setRequest(request);
      sendBase("listDashboards", args);
    }

    public ListDashboardsResult recv_listDashboards() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      listDashboards_result result = new listDashboards_result();
      receiveBase(result, "listDashboards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new libthrift091.TApplicationException(libthrift091.TApplicationException.MISSING_RESULT, "listDashboards failed: unknown result");
    }

    public List<String> suggest(String dashboardPrefix) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      send_suggest(dashboardPrefix);
      return recv_suggest();
    }

    public void send_suggest(String dashboardPrefix) throws libthrift091.TException
    {
      suggest_args args = new suggest_args();
      args.setDashboardPrefix(dashboardPrefix);
      sendBase("suggest", args);
    }

    public List<String> recv_suggest() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      suggest_result result = new suggest_result();
      receiveBase(result, "suggest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new libthrift091.TApplicationException(libthrift091.TApplicationException.MISSING_RESULT, "suggest failed: unknown result");
    }

    public PaintResult paintDashboard(String dashboardName, long startTime, long stopTime) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      send_paintDashboard(dashboardName, startTime, stopTime);
      return recv_paintDashboard();
    }

    public void send_paintDashboard(String dashboardName, long startTime, long stopTime) throws libthrift091.TException
    {
      paintDashboard_args args = new paintDashboard_args();
      args.setDashboardName(dashboardName);
      args.setStartTime(startTime);
      args.setStopTime(stopTime);
      sendBase("paintDashboard", args);
    }

    public PaintResult recv_paintDashboard() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      paintDashboard_result result = new paintDashboard_result();
      receiveBase(result, "paintDashboard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new libthrift091.TApplicationException(libthrift091.TApplicationException.MISSING_RESULT, "paintDashboard failed: unknown result");
    }

    public PanelResult paintPanel(PanelRequest panelRequest, long startTime, long stopTime) throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      send_paintPanel(panelRequest, startTime, stopTime);
      return recv_paintPanel();
    }

    public void send_paintPanel(PanelRequest panelRequest, long startTime, long stopTime) throws libthrift091.TException
    {
      paintPanel_args args = new paintPanel_args();
      args.setPanelRequest(panelRequest);
      args.setStartTime(startTime);
      args.setStopTime(stopTime);
      sendBase("paintPanel", args);
    }

    public PanelResult recv_paintPanel() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException
    {
      paintPanel_result result = new paintPanel_result();
      receiveBase(result, "paintPanel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new libthrift091.TApplicationException(libthrift091.TApplicationException.MISSING_RESULT, "paintPanel failed: unknown result");
    }

  }
  public static class AsyncClient extends com.xiaomi.infra.galaxy.metrics.thrift.BaseService.AsyncClient implements AsyncIface {
    public static class Factory implements libthrift091.async.TAsyncClientFactory<AsyncClient> {
      private libthrift091.async.TAsyncClientManager clientManager;
      private libthrift091.protocol.TProtocolFactory protocolFactory;
      public Factory(libthrift091.async.TAsyncClientManager clientManager, libthrift091.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(libthrift091.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.async.TAsyncClientManager clientManager, libthrift091.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveDashboard(Dashboard dashboard, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException {
      checkReady();
      saveDashboard_call method_call = new saveDashboard_call(dashboard, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveDashboard_call extends libthrift091.async.TAsyncMethodCall {
      private Dashboard dashboard;
      public saveDashboard_call(Dashboard dashboard, libthrift091.async.AsyncMethodCallback resultHandler, libthrift091.async.TAsyncClient client, libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.transport.TNonblockingTransport transport) throws libthrift091.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dashboard = dashboard;
      }

      public void write_args(libthrift091.protocol.TProtocol prot) throws libthrift091.TException {
        prot.writeMessageBegin(new libthrift091.protocol.TMessage("saveDashboard", libthrift091.protocol.TMessageType.CALL, 0));
        saveDashboard_args args = new saveDashboard_args();
        args.setDashboard(dashboard);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException {
        if (getState() != libthrift091.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        libthrift091.transport.TMemoryInputTransport memoryTransport = new libthrift091.transport.TMemoryInputTransport(getFrameBuffer().array());
        libthrift091.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveDashboard();
      }
    }

    public void removeDashboard(String dashboardName, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException {
      checkReady();
      removeDashboard_call method_call = new removeDashboard_call(dashboardName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeDashboard_call extends libthrift091.async.TAsyncMethodCall {
      private String dashboardName;
      public removeDashboard_call(String dashboardName, libthrift091.async.AsyncMethodCallback resultHandler, libthrift091.async.TAsyncClient client, libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.transport.TNonblockingTransport transport) throws libthrift091.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dashboardName = dashboardName;
      }

      public void write_args(libthrift091.protocol.TProtocol prot) throws libthrift091.TException {
        prot.writeMessageBegin(new libthrift091.protocol.TMessage("removeDashboard", libthrift091.protocol.TMessageType.CALL, 0));
        removeDashboard_args args = new removeDashboard_args();
        args.setDashboardName(dashboardName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException {
        if (getState() != libthrift091.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        libthrift091.transport.TMemoryInputTransport memoryTransport = new libthrift091.transport.TMemoryInputTransport(getFrameBuffer().array());
        libthrift091.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeDashboard();
      }
    }

    public void listDashboards(ListDashboardsRequest request, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException {
      checkReady();
      listDashboards_call method_call = new listDashboards_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDashboards_call extends libthrift091.async.TAsyncMethodCall {
      private ListDashboardsRequest request;
      public listDashboards_call(ListDashboardsRequest request, libthrift091.async.AsyncMethodCallback resultHandler, libthrift091.async.TAsyncClient client, libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.transport.TNonblockingTransport transport) throws libthrift091.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(libthrift091.protocol.TProtocol prot) throws libthrift091.TException {
        prot.writeMessageBegin(new libthrift091.protocol.TMessage("listDashboards", libthrift091.protocol.TMessageType.CALL, 0));
        listDashboards_args args = new listDashboards_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ListDashboardsResult getResult() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException {
        if (getState() != libthrift091.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        libthrift091.transport.TMemoryInputTransport memoryTransport = new libthrift091.transport.TMemoryInputTransport(getFrameBuffer().array());
        libthrift091.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDashboards();
      }
    }

    public void suggest(String dashboardPrefix, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException {
      checkReady();
      suggest_call method_call = new suggest_call(dashboardPrefix, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class suggest_call extends libthrift091.async.TAsyncMethodCall {
      private String dashboardPrefix;
      public suggest_call(String dashboardPrefix, libthrift091.async.AsyncMethodCallback resultHandler, libthrift091.async.TAsyncClient client, libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.transport.TNonblockingTransport transport) throws libthrift091.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dashboardPrefix = dashboardPrefix;
      }

      public void write_args(libthrift091.protocol.TProtocol prot) throws libthrift091.TException {
        prot.writeMessageBegin(new libthrift091.protocol.TMessage("suggest", libthrift091.protocol.TMessageType.CALL, 0));
        suggest_args args = new suggest_args();
        args.setDashboardPrefix(dashboardPrefix);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException {
        if (getState() != libthrift091.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        libthrift091.transport.TMemoryInputTransport memoryTransport = new libthrift091.transport.TMemoryInputTransport(getFrameBuffer().array());
        libthrift091.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_suggest();
      }
    }

    public void paintDashboard(String dashboardName, long startTime, long stopTime, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException {
      checkReady();
      paintDashboard_call method_call = new paintDashboard_call(dashboardName, startTime, stopTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class paintDashboard_call extends libthrift091.async.TAsyncMethodCall {
      private String dashboardName;
      private long startTime;
      private long stopTime;
      public paintDashboard_call(String dashboardName, long startTime, long stopTime, libthrift091.async.AsyncMethodCallback resultHandler, libthrift091.async.TAsyncClient client, libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.transport.TNonblockingTransport transport) throws libthrift091.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dashboardName = dashboardName;
        this.startTime = startTime;
        this.stopTime = stopTime;
      }

      public void write_args(libthrift091.protocol.TProtocol prot) throws libthrift091.TException {
        prot.writeMessageBegin(new libthrift091.protocol.TMessage("paintDashboard", libthrift091.protocol.TMessageType.CALL, 0));
        paintDashboard_args args = new paintDashboard_args();
        args.setDashboardName(dashboardName);
        args.setStartTime(startTime);
        args.setStopTime(stopTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PaintResult getResult() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException {
        if (getState() != libthrift091.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        libthrift091.transport.TMemoryInputTransport memoryTransport = new libthrift091.transport.TMemoryInputTransport(getFrameBuffer().array());
        libthrift091.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_paintDashboard();
      }
    }

    public void paintPanel(PanelRequest panelRequest, long startTime, long stopTime, libthrift091.async.AsyncMethodCallback resultHandler) throws libthrift091.TException {
      checkReady();
      paintPanel_call method_call = new paintPanel_call(panelRequest, startTime, stopTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class paintPanel_call extends libthrift091.async.TAsyncMethodCall {
      private PanelRequest panelRequest;
      private long startTime;
      private long stopTime;
      public paintPanel_call(PanelRequest panelRequest, long startTime, long stopTime, libthrift091.async.AsyncMethodCallback resultHandler, libthrift091.async.TAsyncClient client, libthrift091.protocol.TProtocolFactory protocolFactory, libthrift091.transport.TNonblockingTransport transport) throws libthrift091.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.panelRequest = panelRequest;
        this.startTime = startTime;
        this.stopTime = stopTime;
      }

      public void write_args(libthrift091.protocol.TProtocol prot) throws libthrift091.TException {
        prot.writeMessageBegin(new libthrift091.protocol.TMessage("paintPanel", libthrift091.protocol.TMessageType.CALL, 0));
        paintPanel_args args = new paintPanel_args();
        args.setPanelRequest(panelRequest);
        args.setStartTime(startTime);
        args.setStopTime(stopTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PanelResult getResult() throws com.xiaomi.infra.galaxy.metrics.thrift.ServiceException, libthrift091.TException {
        if (getState() != libthrift091.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        libthrift091.transport.TMemoryInputTransport memoryTransport = new libthrift091.transport.TMemoryInputTransport(getFrameBuffer().array());
        libthrift091.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_paintPanel();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.xiaomi.infra.galaxy.metrics.thrift.BaseService.Processor<I> implements libthrift091.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, libthrift091.ProcessFunction<I, ? extends libthrift091.TBase>>()));
    }

    protected Processor(I iface, Map<String,  libthrift091.ProcessFunction<I, ? extends  libthrift091.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  libthrift091.ProcessFunction<I, ? extends  libthrift091.TBase>> getProcessMap(Map<String,  libthrift091.ProcessFunction<I, ? extends  libthrift091.TBase>> processMap) {
      processMap.put("saveDashboard", new saveDashboard());
      processMap.put("removeDashboard", new removeDashboard());
      processMap.put("listDashboards", new listDashboards());
      processMap.put("suggest", new suggest());
      processMap.put("paintDashboard", new paintDashboard());
      processMap.put("paintPanel", new paintPanel());
      return processMap;
    }

    public static class saveDashboard<I extends Iface> extends libthrift091.ProcessFunction<I, saveDashboard_args> {
      public saveDashboard() {
        super("saveDashboard");
      }

      public saveDashboard_args getEmptyArgsInstance() {
        return new saveDashboard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveDashboard_result getResult(I iface, saveDashboard_args args) throws libthrift091.TException {
        saveDashboard_result result = new saveDashboard_result();
        try {
          iface.saveDashboard(args.dashboard);
        } catch (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class removeDashboard<I extends Iface> extends libthrift091.ProcessFunction<I, removeDashboard_args> {
      public removeDashboard() {
        super("removeDashboard");
      }

      public removeDashboard_args getEmptyArgsInstance() {
        return new removeDashboard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeDashboard_result getResult(I iface, removeDashboard_args args) throws libthrift091.TException {
        removeDashboard_result result = new removeDashboard_result();
        try {
          iface.removeDashboard(args.dashboardName);
        } catch (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class listDashboards<I extends Iface> extends libthrift091.ProcessFunction<I, listDashboards_args> {
      public listDashboards() {
        super("listDashboards");
      }

      public listDashboards_args getEmptyArgsInstance() {
        return new listDashboards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDashboards_result getResult(I iface, listDashboards_args args) throws libthrift091.TException {
        listDashboards_result result = new listDashboards_result();
        try {
          result.success = iface.listDashboards(args.request);
        } catch (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class suggest<I extends Iface> extends libthrift091.ProcessFunction<I, suggest_args> {
      public suggest() {
        super("suggest");
      }

      public suggest_args getEmptyArgsInstance() {
        return new suggest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public suggest_result getResult(I iface, suggest_args args) throws libthrift091.TException {
        suggest_result result = new suggest_result();
        try {
          result.success = iface.suggest(args.dashboardPrefix);
        } catch (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class paintDashboard<I extends Iface> extends libthrift091.ProcessFunction<I, paintDashboard_args> {
      public paintDashboard() {
        super("paintDashboard");
      }

      public paintDashboard_args getEmptyArgsInstance() {
        return new paintDashboard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public paintDashboard_result getResult(I iface, paintDashboard_args args) throws libthrift091.TException {
        paintDashboard_result result = new paintDashboard_result();
        try {
          result.success = iface.paintDashboard(args.dashboardName, args.startTime, args.stopTime);
        } catch (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class paintPanel<I extends Iface> extends libthrift091.ProcessFunction<I, paintPanel_args> {
      public paintPanel() {
        super("paintPanel");
      }

      public paintPanel_args getEmptyArgsInstance() {
        return new paintPanel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public paintPanel_result getResult(I iface, paintPanel_args args) throws libthrift091.TException {
        paintPanel_result result = new paintPanel_result();
        try {
          result.success = iface.paintPanel(args.panelRequest, args.startTime, args.stopTime);
        } catch (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
          result.se = se;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.xiaomi.infra.galaxy.metrics.thrift.BaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, libthrift091.AsyncProcessFunction<I, ? extends libthrift091.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  libthrift091.AsyncProcessFunction<I, ? extends  libthrift091.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  libthrift091.AsyncProcessFunction<I, ? extends  libthrift091.TBase,?>> getProcessMap(Map<String,  libthrift091.AsyncProcessFunction<I, ? extends  libthrift091.TBase, ?>> processMap) {
      processMap.put("saveDashboard", new saveDashboard());
      processMap.put("removeDashboard", new removeDashboard());
      processMap.put("listDashboards", new listDashboards());
      processMap.put("suggest", new suggest());
      processMap.put("paintDashboard", new paintDashboard());
      processMap.put("paintPanel", new paintPanel());
      return processMap;
    }

    public static class saveDashboard<I extends AsyncIface> extends libthrift091.AsyncProcessFunction<I, saveDashboard_args, Void> {
      public saveDashboard() {
        super("saveDashboard");
      }

      public saveDashboard_args getEmptyArgsInstance() {
        return new saveDashboard_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final libthrift091.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveDashboard_result result = new saveDashboard_result();
            try {
              fcall.sendResponse(fb,result, libthrift091.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = libthrift091.protocol.TMessageType.REPLY;
            libthrift091.TBase msg;
            saveDashboard_result result = new saveDashboard_result();
            if (e instanceof com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) {
                        result.se = (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) e;
                        result.setSeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = libthrift091.protocol.TMessageType.EXCEPTION;
              msg = (libthrift091.TBase)new libthrift091.TApplicationException(libthrift091.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveDashboard_args args, libthrift091.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveDashboard(args.dashboard,resultHandler);
      }
    }

    public static class removeDashboard<I extends AsyncIface> extends libthrift091.AsyncProcessFunction<I, removeDashboard_args, Void> {
      public removeDashboard() {
        super("removeDashboard");
      }

      public removeDashboard_args getEmptyArgsInstance() {
        return new removeDashboard_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final libthrift091.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeDashboard_result result = new removeDashboard_result();
            try {
              fcall.sendResponse(fb,result, libthrift091.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = libthrift091.protocol.TMessageType.REPLY;
            libthrift091.TBase msg;
            removeDashboard_result result = new removeDashboard_result();
            if (e instanceof com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) {
                        result.se = (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) e;
                        result.setSeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = libthrift091.protocol.TMessageType.EXCEPTION;
              msg = (libthrift091.TBase)new libthrift091.TApplicationException(libthrift091.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeDashboard_args args, libthrift091.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeDashboard(args.dashboardName,resultHandler);
      }
    }

    public static class listDashboards<I extends AsyncIface> extends libthrift091.AsyncProcessFunction<I, listDashboards_args, ListDashboardsResult> {
      public listDashboards() {
        super("listDashboards");
      }

      public listDashboards_args getEmptyArgsInstance() {
        return new listDashboards_args();
      }

      public AsyncMethodCallback<ListDashboardsResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final libthrift091.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ListDashboardsResult>() { 
          public void onComplete(ListDashboardsResult o) {
            listDashboards_result result = new listDashboards_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, libthrift091.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = libthrift091.protocol.TMessageType.REPLY;
            libthrift091.TBase msg;
            listDashboards_result result = new listDashboards_result();
            if (e instanceof com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) {
                        result.se = (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) e;
                        result.setSeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = libthrift091.protocol.TMessageType.EXCEPTION;
              msg = (libthrift091.TBase)new libthrift091.TApplicationException(libthrift091.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listDashboards_args args, libthrift091.async.AsyncMethodCallback<ListDashboardsResult> resultHandler) throws TException {
        iface.listDashboards(args.request,resultHandler);
      }
    }

    public static class suggest<I extends AsyncIface> extends libthrift091.AsyncProcessFunction<I, suggest_args, List<String>> {
      public suggest() {
        super("suggest");
      }

      public suggest_args getEmptyArgsInstance() {
        return new suggest_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final libthrift091.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            suggest_result result = new suggest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, libthrift091.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = libthrift091.protocol.TMessageType.REPLY;
            libthrift091.TBase msg;
            suggest_result result = new suggest_result();
            if (e instanceof com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) {
                        result.se = (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) e;
                        result.setSeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = libthrift091.protocol.TMessageType.EXCEPTION;
              msg = (libthrift091.TBase)new libthrift091.TApplicationException(libthrift091.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, suggest_args args, libthrift091.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.suggest(args.dashboardPrefix,resultHandler);
      }
    }

    public static class paintDashboard<I extends AsyncIface> extends libthrift091.AsyncProcessFunction<I, paintDashboard_args, PaintResult> {
      public paintDashboard() {
        super("paintDashboard");
      }

      public paintDashboard_args getEmptyArgsInstance() {
        return new paintDashboard_args();
      }

      public AsyncMethodCallback<PaintResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final libthrift091.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PaintResult>() { 
          public void onComplete(PaintResult o) {
            paintDashboard_result result = new paintDashboard_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, libthrift091.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = libthrift091.protocol.TMessageType.REPLY;
            libthrift091.TBase msg;
            paintDashboard_result result = new paintDashboard_result();
            if (e instanceof com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) {
                        result.se = (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) e;
                        result.setSeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = libthrift091.protocol.TMessageType.EXCEPTION;
              msg = (libthrift091.TBase)new libthrift091.TApplicationException(libthrift091.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, paintDashboard_args args, libthrift091.async.AsyncMethodCallback<PaintResult> resultHandler) throws TException {
        iface.paintDashboard(args.dashboardName, args.startTime, args.stopTime,resultHandler);
      }
    }

    public static class paintPanel<I extends AsyncIface> extends libthrift091.AsyncProcessFunction<I, paintPanel_args, PanelResult> {
      public paintPanel() {
        super("paintPanel");
      }

      public paintPanel_args getEmptyArgsInstance() {
        return new paintPanel_args();
      }

      public AsyncMethodCallback<PanelResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final libthrift091.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PanelResult>() { 
          public void onComplete(PanelResult o) {
            paintPanel_result result = new paintPanel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, libthrift091.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = libthrift091.protocol.TMessageType.REPLY;
            libthrift091.TBase msg;
            paintPanel_result result = new paintPanel_result();
            if (e instanceof com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) {
                        result.se = (com.xiaomi.infra.galaxy.metrics.thrift.ServiceException) e;
                        result.setSeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = libthrift091.protocol.TMessageType.EXCEPTION;
              msg = (libthrift091.TBase)new libthrift091.TApplicationException(libthrift091.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, paintPanel_args args, libthrift091.async.AsyncMethodCallback<PanelResult> resultHandler) throws TException {
        iface.paintPanel(args.panelRequest, args.startTime, args.stopTime,resultHandler);
      }
    }

  }

  public static class saveDashboard_args implements libthrift091.TBase<saveDashboard_args, saveDashboard_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveDashboard_args>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("saveDashboard_args");

    private static final libthrift091.protocol.TField DASHBOARD_FIELD_DESC = new libthrift091.protocol.TField("dashboard", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveDashboard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveDashboard_argsTupleSchemeFactory());
    }

    public Dashboard dashboard; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      DASHBOARD((short)1, "dashboard");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DASHBOARD
            return DASHBOARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DASHBOARD, new libthrift091.meta_data.FieldMetaData("dashboard", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, Dashboard.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(saveDashboard_args.class, metaDataMap);
    }

    public saveDashboard_args() {
    }

    public saveDashboard_args(
      Dashboard dashboard)
    {
      this();
      this.dashboard = dashboard;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveDashboard_args(saveDashboard_args other) {
      if (other.isSetDashboard()) {
        this.dashboard = new Dashboard(other.dashboard);
      }
    }

    public saveDashboard_args deepCopy() {
      return new saveDashboard_args(this);
    }

    @Override
    public void clear() {
      this.dashboard = null;
    }

    public Dashboard getDashboard() {
      return this.dashboard;
    }

    public saveDashboard_args setDashboard(Dashboard dashboard) {
      this.dashboard = dashboard;
      return this;
    }

    public void unsetDashboard() {
      this.dashboard = null;
    }

    /** Returns true if field dashboard is set (has been assigned a value) and false otherwise */
    public boolean isSetDashboard() {
      return this.dashboard != null;
    }

    public void setDashboardIsSet(boolean value) {
      if (!value) {
        this.dashboard = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DASHBOARD:
        if (value == null) {
          unsetDashboard();
        } else {
          setDashboard((Dashboard)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DASHBOARD:
        return getDashboard();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DASHBOARD:
        return isSetDashboard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveDashboard_args)
        return this.equals((saveDashboard_args)that);
      return false;
    }

    public boolean equals(saveDashboard_args that) {
      if (that == null)
        return false;

      boolean this_present_dashboard = true && this.isSetDashboard();
      boolean that_present_dashboard = true && that.isSetDashboard();
      if (this_present_dashboard || that_present_dashboard) {
        if (!(this_present_dashboard && that_present_dashboard))
          return false;
        if (!this.dashboard.equals(that.dashboard))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dashboard = true && (isSetDashboard());
      list.add(present_dashboard);
      if (present_dashboard)
        list.add(dashboard);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveDashboard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDashboard()).compareTo(other.isSetDashboard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDashboard()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.dashboard, other.dashboard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveDashboard_args(");
      boolean first = true;

      sb.append("dashboard:");
      if (this.dashboard == null) {
        sb.append("null");
      } else {
        sb.append(this.dashboard);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
      if (dashboard != null) {
        dashboard.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveDashboard_argsStandardSchemeFactory implements SchemeFactory {
      public saveDashboard_argsStandardScheme getScheme() {
        return new saveDashboard_argsStandardScheme();
      }
    }

    private static class saveDashboard_argsStandardScheme extends StandardScheme<saveDashboard_args> {

      public void read(libthrift091.protocol.TProtocol iprot, saveDashboard_args struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DASHBOARD
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.dashboard = new Dashboard();
                struct.dashboard.read(iprot);
                struct.setDashboardIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, saveDashboard_args struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dashboard != null) {
          oprot.writeFieldBegin(DASHBOARD_FIELD_DESC);
          struct.dashboard.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveDashboard_argsTupleSchemeFactory implements SchemeFactory {
      public saveDashboard_argsTupleScheme getScheme() {
        return new saveDashboard_argsTupleScheme();
      }
    }

    private static class saveDashboard_argsTupleScheme extends TupleScheme<saveDashboard_args> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, saveDashboard_args struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDashboard()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDashboard()) {
          struct.dashboard.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, saveDashboard_args struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dashboard = new Dashboard();
          struct.dashboard.read(iprot);
          struct.setDashboardIsSet(true);
        }
      }
    }

  }

  public static class saveDashboard_result implements libthrift091.TBase<saveDashboard_result, saveDashboard_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveDashboard_result>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("saveDashboard_result");

    private static final libthrift091.protocol.TField SE_FIELD_DESC = new libthrift091.protocol.TField("se", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveDashboard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveDashboard_resultTupleSchemeFactory());
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SE, new libthrift091.meta_data.FieldMetaData("se", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(saveDashboard_result.class, metaDataMap);
    }

    public saveDashboard_result() {
    }

    public saveDashboard_result(
      com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se)
    {
      this();
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveDashboard_result(saveDashboard_result other) {
      if (other.isSetSe()) {
        this.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException(other.se);
      }
    }

    public saveDashboard_result deepCopy() {
      return new saveDashboard_result(this);
    }

    @Override
    public void clear() {
      this.se = null;
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException getSe() {
      return this.se;
    }

    public saveDashboard_result setSe(com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((com.xiaomi.infra.galaxy.metrics.thrift.ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveDashboard_result)
        return this.equals((saveDashboard_result)that);
      return false;
    }

    public boolean equals(saveDashboard_result that) {
      if (that == null)
        return false;

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_se = true && (isSetSe());
      list.add(present_se);
      if (present_se)
        list.add(se);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveDashboard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.se, other.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveDashboard_result(");
      boolean first = true;

      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveDashboard_resultStandardSchemeFactory implements SchemeFactory {
      public saveDashboard_resultStandardScheme getScheme() {
        return new saveDashboard_resultStandardScheme();
      }
    }

    private static class saveDashboard_resultStandardScheme extends StandardScheme<saveDashboard_result> {

      public void read(libthrift091.protocol.TProtocol iprot, saveDashboard_result struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SE
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, saveDashboard_result struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveDashboard_resultTupleSchemeFactory implements SchemeFactory {
      public saveDashboard_resultTupleScheme getScheme() {
        return new saveDashboard_resultTupleScheme();
      }
    }

    private static class saveDashboard_resultTupleScheme extends TupleScheme<saveDashboard_result> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, saveDashboard_result struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, saveDashboard_result struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class removeDashboard_args implements libthrift091.TBase<removeDashboard_args, removeDashboard_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeDashboard_args>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("removeDashboard_args");

    private static final libthrift091.protocol.TField DASHBOARD_NAME_FIELD_DESC = new libthrift091.protocol.TField("dashboardName", libthrift091.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDashboard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDashboard_argsTupleSchemeFactory());
    }

    public String dashboardName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      DASHBOARD_NAME((short)1, "dashboardName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DASHBOARD_NAME
            return DASHBOARD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DASHBOARD_NAME, new libthrift091.meta_data.FieldMetaData("dashboardName", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(removeDashboard_args.class, metaDataMap);
    }

    public removeDashboard_args() {
    }

    public removeDashboard_args(
      String dashboardName)
    {
      this();
      this.dashboardName = dashboardName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDashboard_args(removeDashboard_args other) {
      if (other.isSetDashboardName()) {
        this.dashboardName = other.dashboardName;
      }
    }

    public removeDashboard_args deepCopy() {
      return new removeDashboard_args(this);
    }

    @Override
    public void clear() {
      this.dashboardName = null;
    }

    public String getDashboardName() {
      return this.dashboardName;
    }

    public removeDashboard_args setDashboardName(String dashboardName) {
      this.dashboardName = dashboardName;
      return this;
    }

    public void unsetDashboardName() {
      this.dashboardName = null;
    }

    /** Returns true if field dashboardName is set (has been assigned a value) and false otherwise */
    public boolean isSetDashboardName() {
      return this.dashboardName != null;
    }

    public void setDashboardNameIsSet(boolean value) {
      if (!value) {
        this.dashboardName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DASHBOARD_NAME:
        if (value == null) {
          unsetDashboardName();
        } else {
          setDashboardName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DASHBOARD_NAME:
        return getDashboardName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DASHBOARD_NAME:
        return isSetDashboardName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDashboard_args)
        return this.equals((removeDashboard_args)that);
      return false;
    }

    public boolean equals(removeDashboard_args that) {
      if (that == null)
        return false;

      boolean this_present_dashboardName = true && this.isSetDashboardName();
      boolean that_present_dashboardName = true && that.isSetDashboardName();
      if (this_present_dashboardName || that_present_dashboardName) {
        if (!(this_present_dashboardName && that_present_dashboardName))
          return false;
        if (!this.dashboardName.equals(that.dashboardName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dashboardName = true && (isSetDashboardName());
      list.add(present_dashboardName);
      if (present_dashboardName)
        list.add(dashboardName);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDashboard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDashboardName()).compareTo(other.isSetDashboardName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDashboardName()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.dashboardName, other.dashboardName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDashboard_args(");
      boolean first = true;

      sb.append("dashboardName:");
      if (this.dashboardName == null) {
        sb.append("null");
      } else {
        sb.append(this.dashboardName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDashboard_argsStandardSchemeFactory implements SchemeFactory {
      public removeDashboard_argsStandardScheme getScheme() {
        return new removeDashboard_argsStandardScheme();
      }
    }

    private static class removeDashboard_argsStandardScheme extends StandardScheme<removeDashboard_args> {

      public void read(libthrift091.protocol.TProtocol iprot, removeDashboard_args struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DASHBOARD_NAME
              if (schemeField.type == libthrift091.protocol.TType.STRING) {
                struct.dashboardName = iprot.readString();
                struct.setDashboardNameIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, removeDashboard_args struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dashboardName != null) {
          oprot.writeFieldBegin(DASHBOARD_NAME_FIELD_DESC);
          oprot.writeString(struct.dashboardName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDashboard_argsTupleSchemeFactory implements SchemeFactory {
      public removeDashboard_argsTupleScheme getScheme() {
        return new removeDashboard_argsTupleScheme();
      }
    }

    private static class removeDashboard_argsTupleScheme extends TupleScheme<removeDashboard_args> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, removeDashboard_args struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDashboardName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDashboardName()) {
          oprot.writeString(struct.dashboardName);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, removeDashboard_args struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dashboardName = iprot.readString();
          struct.setDashboardNameIsSet(true);
        }
      }
    }

  }

  public static class removeDashboard_result implements libthrift091.TBase<removeDashboard_result, removeDashboard_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeDashboard_result>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("removeDashboard_result");

    private static final libthrift091.protocol.TField SE_FIELD_DESC = new libthrift091.protocol.TField("se", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDashboard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDashboard_resultTupleSchemeFactory());
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SE, new libthrift091.meta_data.FieldMetaData("se", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(removeDashboard_result.class, metaDataMap);
    }

    public removeDashboard_result() {
    }

    public removeDashboard_result(
      com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se)
    {
      this();
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDashboard_result(removeDashboard_result other) {
      if (other.isSetSe()) {
        this.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException(other.se);
      }
    }

    public removeDashboard_result deepCopy() {
      return new removeDashboard_result(this);
    }

    @Override
    public void clear() {
      this.se = null;
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException getSe() {
      return this.se;
    }

    public removeDashboard_result setSe(com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((com.xiaomi.infra.galaxy.metrics.thrift.ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDashboard_result)
        return this.equals((removeDashboard_result)that);
      return false;
    }

    public boolean equals(removeDashboard_result that) {
      if (that == null)
        return false;

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_se = true && (isSetSe());
      list.add(present_se);
      if (present_se)
        list.add(se);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDashboard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.se, other.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDashboard_result(");
      boolean first = true;

      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDashboard_resultStandardSchemeFactory implements SchemeFactory {
      public removeDashboard_resultStandardScheme getScheme() {
        return new removeDashboard_resultStandardScheme();
      }
    }

    private static class removeDashboard_resultStandardScheme extends StandardScheme<removeDashboard_result> {

      public void read(libthrift091.protocol.TProtocol iprot, removeDashboard_result struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SE
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, removeDashboard_result struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDashboard_resultTupleSchemeFactory implements SchemeFactory {
      public removeDashboard_resultTupleScheme getScheme() {
        return new removeDashboard_resultTupleScheme();
      }
    }

    private static class removeDashboard_resultTupleScheme extends TupleScheme<removeDashboard_result> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, removeDashboard_result struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, removeDashboard_result struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class listDashboards_args implements libthrift091.TBase<listDashboards_args, listDashboards_args._Fields>, java.io.Serializable, Cloneable, Comparable<listDashboards_args>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("listDashboards_args");

    private static final libthrift091.protocol.TField REQUEST_FIELD_DESC = new libthrift091.protocol.TField("request", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDashboards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDashboards_argsTupleSchemeFactory());
    }

    public ListDashboardsRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new libthrift091.meta_data.FieldMetaData("request", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, ListDashboardsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(listDashboards_args.class, metaDataMap);
    }

    public listDashboards_args() {
    }

    public listDashboards_args(
      ListDashboardsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDashboards_args(listDashboards_args other) {
      if (other.isSetRequest()) {
        this.request = new ListDashboardsRequest(other.request);
      }
    }

    public listDashboards_args deepCopy() {
      return new listDashboards_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ListDashboardsRequest getRequest() {
      return this.request;
    }

    public listDashboards_args setRequest(ListDashboardsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ListDashboardsRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDashboards_args)
        return this.equals((listDashboards_args)that);
      return false;
    }

    public boolean equals(listDashboards_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDashboards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDashboards_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDashboards_argsStandardSchemeFactory implements SchemeFactory {
      public listDashboards_argsStandardScheme getScheme() {
        return new listDashboards_argsStandardScheme();
      }
    }

    private static class listDashboards_argsStandardScheme extends StandardScheme<listDashboards_args> {

      public void read(libthrift091.protocol.TProtocol iprot, listDashboards_args struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.request = new ListDashboardsRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, listDashboards_args struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDashboards_argsTupleSchemeFactory implements SchemeFactory {
      public listDashboards_argsTupleScheme getScheme() {
        return new listDashboards_argsTupleScheme();
      }
    }

    private static class listDashboards_argsTupleScheme extends TupleScheme<listDashboards_args> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, listDashboards_args struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, listDashboards_args struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ListDashboardsRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class listDashboards_result implements libthrift091.TBase<listDashboards_result, listDashboards_result._Fields>, java.io.Serializable, Cloneable, Comparable<listDashboards_result>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("listDashboards_result");

    private static final libthrift091.protocol.TField SUCCESS_FIELD_DESC = new libthrift091.protocol.TField("success", libthrift091.protocol.TType.STRUCT, (short)0);
    private static final libthrift091.protocol.TField SE_FIELD_DESC = new libthrift091.protocol.TField("se", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDashboards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDashboards_resultTupleSchemeFactory());
    }

    public ListDashboardsResult success; // required
    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new libthrift091.meta_data.FieldMetaData("success", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, ListDashboardsResult.class)));
      tmpMap.put(_Fields.SE, new libthrift091.meta_data.FieldMetaData("se", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(listDashboards_result.class, metaDataMap);
    }

    public listDashboards_result() {
    }

    public listDashboards_result(
      ListDashboardsResult success,
      com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se)
    {
      this();
      this.success = success;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDashboards_result(listDashboards_result other) {
      if (other.isSetSuccess()) {
        this.success = new ListDashboardsResult(other.success);
      }
      if (other.isSetSe()) {
        this.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException(other.se);
      }
    }

    public listDashboards_result deepCopy() {
      return new listDashboards_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.se = null;
    }

    public ListDashboardsResult getSuccess() {
      return this.success;
    }

    public listDashboards_result setSuccess(ListDashboardsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException getSe() {
      return this.se;
    }

    public listDashboards_result setSe(com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ListDashboardsResult)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((com.xiaomi.infra.galaxy.metrics.thrift.ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDashboards_result)
        return this.equals((listDashboards_result)that);
      return false;
    }

    public boolean equals(listDashboards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_se = true && (isSetSe());
      list.add(present_se);
      if (present_se)
        list.add(se);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDashboards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.se, other.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDashboards_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDashboards_resultStandardSchemeFactory implements SchemeFactory {
      public listDashboards_resultStandardScheme getScheme() {
        return new listDashboards_resultStandardScheme();
      }
    }

    private static class listDashboards_resultStandardScheme extends StandardScheme<listDashboards_result> {

      public void read(libthrift091.protocol.TProtocol iprot, listDashboards_result struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.success = new ListDashboardsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SE
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, listDashboards_result struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDashboards_resultTupleSchemeFactory implements SchemeFactory {
      public listDashboards_resultTupleScheme getScheme() {
        return new listDashboards_resultTupleScheme();
      }
    }

    private static class listDashboards_resultTupleScheme extends TupleScheme<listDashboards_result> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, listDashboards_result struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, listDashboards_result struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ListDashboardsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class suggest_args implements libthrift091.TBase<suggest_args, suggest_args._Fields>, java.io.Serializable, Cloneable, Comparable<suggest_args>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("suggest_args");

    private static final libthrift091.protocol.TField DASHBOARD_PREFIX_FIELD_DESC = new libthrift091.protocol.TField("dashboardPrefix", libthrift091.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suggest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suggest_argsTupleSchemeFactory());
    }

    public String dashboardPrefix; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      DASHBOARD_PREFIX((short)1, "dashboardPrefix");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DASHBOARD_PREFIX
            return DASHBOARD_PREFIX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DASHBOARD_PREFIX, new libthrift091.meta_data.FieldMetaData("dashboardPrefix", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(suggest_args.class, metaDataMap);
    }

    public suggest_args() {
    }

    public suggest_args(
      String dashboardPrefix)
    {
      this();
      this.dashboardPrefix = dashboardPrefix;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suggest_args(suggest_args other) {
      if (other.isSetDashboardPrefix()) {
        this.dashboardPrefix = other.dashboardPrefix;
      }
    }

    public suggest_args deepCopy() {
      return new suggest_args(this);
    }

    @Override
    public void clear() {
      this.dashboardPrefix = null;
    }

    public String getDashboardPrefix() {
      return this.dashboardPrefix;
    }

    public suggest_args setDashboardPrefix(String dashboardPrefix) {
      this.dashboardPrefix = dashboardPrefix;
      return this;
    }

    public void unsetDashboardPrefix() {
      this.dashboardPrefix = null;
    }

    /** Returns true if field dashboardPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetDashboardPrefix() {
      return this.dashboardPrefix != null;
    }

    public void setDashboardPrefixIsSet(boolean value) {
      if (!value) {
        this.dashboardPrefix = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DASHBOARD_PREFIX:
        if (value == null) {
          unsetDashboardPrefix();
        } else {
          setDashboardPrefix((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DASHBOARD_PREFIX:
        return getDashboardPrefix();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DASHBOARD_PREFIX:
        return isSetDashboardPrefix();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suggest_args)
        return this.equals((suggest_args)that);
      return false;
    }

    public boolean equals(suggest_args that) {
      if (that == null)
        return false;

      boolean this_present_dashboardPrefix = true && this.isSetDashboardPrefix();
      boolean that_present_dashboardPrefix = true && that.isSetDashboardPrefix();
      if (this_present_dashboardPrefix || that_present_dashboardPrefix) {
        if (!(this_present_dashboardPrefix && that_present_dashboardPrefix))
          return false;
        if (!this.dashboardPrefix.equals(that.dashboardPrefix))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dashboardPrefix = true && (isSetDashboardPrefix());
      list.add(present_dashboardPrefix);
      if (present_dashboardPrefix)
        list.add(dashboardPrefix);

      return list.hashCode();
    }

    @Override
    public int compareTo(suggest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDashboardPrefix()).compareTo(other.isSetDashboardPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDashboardPrefix()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.dashboardPrefix, other.dashboardPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suggest_args(");
      boolean first = true;

      sb.append("dashboardPrefix:");
      if (this.dashboardPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.dashboardPrefix);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suggest_argsStandardSchemeFactory implements SchemeFactory {
      public suggest_argsStandardScheme getScheme() {
        return new suggest_argsStandardScheme();
      }
    }

    private static class suggest_argsStandardScheme extends StandardScheme<suggest_args> {

      public void read(libthrift091.protocol.TProtocol iprot, suggest_args struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DASHBOARD_PREFIX
              if (schemeField.type == libthrift091.protocol.TType.STRING) {
                struct.dashboardPrefix = iprot.readString();
                struct.setDashboardPrefixIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, suggest_args struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dashboardPrefix != null) {
          oprot.writeFieldBegin(DASHBOARD_PREFIX_FIELD_DESC);
          oprot.writeString(struct.dashboardPrefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suggest_argsTupleSchemeFactory implements SchemeFactory {
      public suggest_argsTupleScheme getScheme() {
        return new suggest_argsTupleScheme();
      }
    }

    private static class suggest_argsTupleScheme extends TupleScheme<suggest_args> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, suggest_args struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDashboardPrefix()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDashboardPrefix()) {
          oprot.writeString(struct.dashboardPrefix);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, suggest_args struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dashboardPrefix = iprot.readString();
          struct.setDashboardPrefixIsSet(true);
        }
      }
    }

  }

  public static class suggest_result implements libthrift091.TBase<suggest_result, suggest_result._Fields>, java.io.Serializable, Cloneable, Comparable<suggest_result>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("suggest_result");

    private static final libthrift091.protocol.TField SUCCESS_FIELD_DESC = new libthrift091.protocol.TField("success", libthrift091.protocol.TType.LIST, (short)0);
    private static final libthrift091.protocol.TField SE_FIELD_DESC = new libthrift091.protocol.TField("se", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suggest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suggest_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new libthrift091.meta_data.FieldMetaData("success", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
              new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING))));
      tmpMap.put(_Fields.SE, new libthrift091.meta_data.FieldMetaData("se", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(suggest_result.class, metaDataMap);
    }

    public suggest_result() {
    }

    public suggest_result(
      List<String> success,
      com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se)
    {
      this();
      this.success = success;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suggest_result(suggest_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSe()) {
        this.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException(other.se);
      }
    }

    public suggest_result deepCopy() {
      return new suggest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.se = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public suggest_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException getSe() {
      return this.se;
    }

    public suggest_result setSe(com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((com.xiaomi.infra.galaxy.metrics.thrift.ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suggest_result)
        return this.equals((suggest_result)that);
      return false;
    }

    public boolean equals(suggest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_se = true && (isSetSe());
      list.add(present_se);
      if (present_se)
        list.add(se);

      return list.hashCode();
    }

    @Override
    public int compareTo(suggest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.se, other.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suggest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suggest_resultStandardSchemeFactory implements SchemeFactory {
      public suggest_resultStandardScheme getScheme() {
        return new suggest_resultStandardScheme();
      }
    }

    private static class suggest_resultStandardScheme extends StandardScheme<suggest_result> {

      public void read(libthrift091.protocol.TProtocol iprot, suggest_result struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == libthrift091.protocol.TType.LIST) {
                {
                  libthrift091.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list58.size);
                  String _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = iprot.readString();
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SE
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, suggest_result struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRING, struct.success.size()));
            for (String _iter61 : struct.success)
            {
              oprot.writeString(_iter61);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suggest_resultTupleSchemeFactory implements SchemeFactory {
      public suggest_resultTupleScheme getScheme() {
        return new suggest_resultTupleScheme();
      }
    }

    private static class suggest_resultTupleScheme extends TupleScheme<suggest_result> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, suggest_result struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter62 : struct.success)
            {
              oprot.writeString(_iter62);
            }
          }
        }
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, suggest_result struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            libthrift091.protocol.TList _list63 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list63.size);
            String _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = iprot.readString();
              struct.success.add(_elem64);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class paintDashboard_args implements libthrift091.TBase<paintDashboard_args, paintDashboard_args._Fields>, java.io.Serializable, Cloneable, Comparable<paintDashboard_args>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("paintDashboard_args");

    private static final libthrift091.protocol.TField DASHBOARD_NAME_FIELD_DESC = new libthrift091.protocol.TField("dashboardName", libthrift091.protocol.TType.STRING, (short)1);
    private static final libthrift091.protocol.TField START_TIME_FIELD_DESC = new libthrift091.protocol.TField("startTime", libthrift091.protocol.TType.I64, (short)2);
    private static final libthrift091.protocol.TField STOP_TIME_FIELD_DESC = new libthrift091.protocol.TField("stopTime", libthrift091.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paintDashboard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new paintDashboard_argsTupleSchemeFactory());
    }

    public String dashboardName; // required
    public long startTime; // required
    public long stopTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      DASHBOARD_NAME((short)1, "dashboardName"),
      START_TIME((short)2, "startTime"),
      STOP_TIME((short)3, "stopTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DASHBOARD_NAME
            return DASHBOARD_NAME;
          case 2: // START_TIME
            return START_TIME;
          case 3: // STOP_TIME
            return STOP_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __STOPTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DASHBOARD_NAME, new libthrift091.meta_data.FieldMetaData("dashboardName", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new libthrift091.meta_data.FieldMetaData("startTime", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
      tmpMap.put(_Fields.STOP_TIME, new libthrift091.meta_data.FieldMetaData("stopTime", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(paintDashboard_args.class, metaDataMap);
    }

    public paintDashboard_args() {
    }

    public paintDashboard_args(
      String dashboardName,
      long startTime,
      long stopTime)
    {
      this();
      this.dashboardName = dashboardName;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.stopTime = stopTime;
      setStopTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paintDashboard_args(paintDashboard_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDashboardName()) {
        this.dashboardName = other.dashboardName;
      }
      this.startTime = other.startTime;
      this.stopTime = other.stopTime;
    }

    public paintDashboard_args deepCopy() {
      return new paintDashboard_args(this);
    }

    @Override
    public void clear() {
      this.dashboardName = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setStopTimeIsSet(false);
      this.stopTime = 0;
    }

    public String getDashboardName() {
      return this.dashboardName;
    }

    public paintDashboard_args setDashboardName(String dashboardName) {
      this.dashboardName = dashboardName;
      return this;
    }

    public void unsetDashboardName() {
      this.dashboardName = null;
    }

    /** Returns true if field dashboardName is set (has been assigned a value) and false otherwise */
    public boolean isSetDashboardName() {
      return this.dashboardName != null;
    }

    public void setDashboardNameIsSet(boolean value) {
      if (!value) {
        this.dashboardName = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public paintDashboard_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getStopTime() {
      return this.stopTime;
    }

    public paintDashboard_args setStopTime(long stopTime) {
      this.stopTime = stopTime;
      setStopTimeIsSet(true);
      return this;
    }

    public void unsetStopTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPTIME_ISSET_ID);
    }

    /** Returns true if field stopTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStopTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STOPTIME_ISSET_ID);
    }

    public void setStopTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DASHBOARD_NAME:
        if (value == null) {
          unsetDashboardName();
        } else {
          setDashboardName((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case STOP_TIME:
        if (value == null) {
          unsetStopTime();
        } else {
          setStopTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DASHBOARD_NAME:
        return getDashboardName();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case STOP_TIME:
        return Long.valueOf(getStopTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DASHBOARD_NAME:
        return isSetDashboardName();
      case START_TIME:
        return isSetStartTime();
      case STOP_TIME:
        return isSetStopTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paintDashboard_args)
        return this.equals((paintDashboard_args)that);
      return false;
    }

    public boolean equals(paintDashboard_args that) {
      if (that == null)
        return false;

      boolean this_present_dashboardName = true && this.isSetDashboardName();
      boolean that_present_dashboardName = true && that.isSetDashboardName();
      if (this_present_dashboardName || that_present_dashboardName) {
        if (!(this_present_dashboardName && that_present_dashboardName))
          return false;
        if (!this.dashboardName.equals(that.dashboardName))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_stopTime = true;
      boolean that_present_stopTime = true;
      if (this_present_stopTime || that_present_stopTime) {
        if (!(this_present_stopTime && that_present_stopTime))
          return false;
        if (this.stopTime != that.stopTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dashboardName = true && (isSetDashboardName());
      list.add(present_dashboardName);
      if (present_dashboardName)
        list.add(dashboardName);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_stopTime = true;
      list.add(present_stopTime);
      if (present_stopTime)
        list.add(stopTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(paintDashboard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDashboardName()).compareTo(other.isSetDashboardName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDashboardName()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.dashboardName, other.dashboardName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopTime()).compareTo(other.isSetStopTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopTime()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.stopTime, other.stopTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paintDashboard_args(");
      boolean first = true;

      sb.append("dashboardName:");
      if (this.dashboardName == null) {
        sb.append("null");
      } else {
        sb.append(this.dashboardName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopTime:");
      sb.append(this.stopTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class paintDashboard_argsStandardSchemeFactory implements SchemeFactory {
      public paintDashboard_argsStandardScheme getScheme() {
        return new paintDashboard_argsStandardScheme();
      }
    }

    private static class paintDashboard_argsStandardScheme extends StandardScheme<paintDashboard_args> {

      public void read(libthrift091.protocol.TProtocol iprot, paintDashboard_args struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DASHBOARD_NAME
              if (schemeField.type == libthrift091.protocol.TType.STRING) {
                struct.dashboardName = iprot.readString();
                struct.setDashboardNameIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == libthrift091.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOP_TIME
              if (schemeField.type == libthrift091.protocol.TType.I64) {
                struct.stopTime = iprot.readI64();
                struct.setStopTimeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, paintDashboard_args struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dashboardName != null) {
          oprot.writeFieldBegin(DASHBOARD_NAME_FIELD_DESC);
          oprot.writeString(struct.dashboardName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
        oprot.writeI64(struct.stopTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class paintDashboard_argsTupleSchemeFactory implements SchemeFactory {
      public paintDashboard_argsTupleScheme getScheme() {
        return new paintDashboard_argsTupleScheme();
      }
    }

    private static class paintDashboard_argsTupleScheme extends TupleScheme<paintDashboard_args> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, paintDashboard_args struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDashboardName()) {
          optionals.set(0);
        }
        if (struct.isSetStartTime()) {
          optionals.set(1);
        }
        if (struct.isSetStopTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDashboardName()) {
          oprot.writeString(struct.dashboardName);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetStopTime()) {
          oprot.writeI64(struct.stopTime);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, paintDashboard_args struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dashboardName = iprot.readString();
          struct.setDashboardNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stopTime = iprot.readI64();
          struct.setStopTimeIsSet(true);
        }
      }
    }

  }

  public static class paintDashboard_result implements libthrift091.TBase<paintDashboard_result, paintDashboard_result._Fields>, java.io.Serializable, Cloneable, Comparable<paintDashboard_result>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("paintDashboard_result");

    private static final libthrift091.protocol.TField SUCCESS_FIELD_DESC = new libthrift091.protocol.TField("success", libthrift091.protocol.TType.STRUCT, (short)0);
    private static final libthrift091.protocol.TField SE_FIELD_DESC = new libthrift091.protocol.TField("se", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paintDashboard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new paintDashboard_resultTupleSchemeFactory());
    }

    public PaintResult success; // required
    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new libthrift091.meta_data.FieldMetaData("success", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, PaintResult.class)));
      tmpMap.put(_Fields.SE, new libthrift091.meta_data.FieldMetaData("se", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(paintDashboard_result.class, metaDataMap);
    }

    public paintDashboard_result() {
    }

    public paintDashboard_result(
      PaintResult success,
      com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se)
    {
      this();
      this.success = success;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paintDashboard_result(paintDashboard_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaintResult(other.success);
      }
      if (other.isSetSe()) {
        this.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException(other.se);
      }
    }

    public paintDashboard_result deepCopy() {
      return new paintDashboard_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.se = null;
    }

    public PaintResult getSuccess() {
      return this.success;
    }

    public paintDashboard_result setSuccess(PaintResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException getSe() {
      return this.se;
    }

    public paintDashboard_result setSe(com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PaintResult)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((com.xiaomi.infra.galaxy.metrics.thrift.ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paintDashboard_result)
        return this.equals((paintDashboard_result)that);
      return false;
    }

    public boolean equals(paintDashboard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_se = true && (isSetSe());
      list.add(present_se);
      if (present_se)
        list.add(se);

      return list.hashCode();
    }

    @Override
    public int compareTo(paintDashboard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.se, other.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paintDashboard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class paintDashboard_resultStandardSchemeFactory implements SchemeFactory {
      public paintDashboard_resultStandardScheme getScheme() {
        return new paintDashboard_resultStandardScheme();
      }
    }

    private static class paintDashboard_resultStandardScheme extends StandardScheme<paintDashboard_result> {

      public void read(libthrift091.protocol.TProtocol iprot, paintDashboard_result struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.success = new PaintResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SE
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, paintDashboard_result struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class paintDashboard_resultTupleSchemeFactory implements SchemeFactory {
      public paintDashboard_resultTupleScheme getScheme() {
        return new paintDashboard_resultTupleScheme();
      }
    }

    private static class paintDashboard_resultTupleScheme extends TupleScheme<paintDashboard_result> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, paintDashboard_result struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, paintDashboard_result struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PaintResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class paintPanel_args implements libthrift091.TBase<paintPanel_args, paintPanel_args._Fields>, java.io.Serializable, Cloneable, Comparable<paintPanel_args>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("paintPanel_args");

    private static final libthrift091.protocol.TField PANEL_REQUEST_FIELD_DESC = new libthrift091.protocol.TField("panelRequest", libthrift091.protocol.TType.STRUCT, (short)1);
    private static final libthrift091.protocol.TField START_TIME_FIELD_DESC = new libthrift091.protocol.TField("startTime", libthrift091.protocol.TType.I64, (short)2);
    private static final libthrift091.protocol.TField STOP_TIME_FIELD_DESC = new libthrift091.protocol.TField("stopTime", libthrift091.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paintPanel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new paintPanel_argsTupleSchemeFactory());
    }

    public PanelRequest panelRequest; // required
    public long startTime; // required
    public long stopTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      PANEL_REQUEST((short)1, "panelRequest"),
      START_TIME((short)2, "startTime"),
      STOP_TIME((short)3, "stopTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PANEL_REQUEST
            return PANEL_REQUEST;
          case 2: // START_TIME
            return START_TIME;
          case 3: // STOP_TIME
            return STOP_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __STOPTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PANEL_REQUEST, new libthrift091.meta_data.FieldMetaData("panelRequest", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, PanelRequest.class)));
      tmpMap.put(_Fields.START_TIME, new libthrift091.meta_data.FieldMetaData("startTime", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
      tmpMap.put(_Fields.STOP_TIME, new libthrift091.meta_data.FieldMetaData("stopTime", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(paintPanel_args.class, metaDataMap);
    }

    public paintPanel_args() {
    }

    public paintPanel_args(
      PanelRequest panelRequest,
      long startTime,
      long stopTime)
    {
      this();
      this.panelRequest = panelRequest;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.stopTime = stopTime;
      setStopTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paintPanel_args(paintPanel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPanelRequest()) {
        this.panelRequest = new PanelRequest(other.panelRequest);
      }
      this.startTime = other.startTime;
      this.stopTime = other.stopTime;
    }

    public paintPanel_args deepCopy() {
      return new paintPanel_args(this);
    }

    @Override
    public void clear() {
      this.panelRequest = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setStopTimeIsSet(false);
      this.stopTime = 0;
    }

    public PanelRequest getPanelRequest() {
      return this.panelRequest;
    }

    public paintPanel_args setPanelRequest(PanelRequest panelRequest) {
      this.panelRequest = panelRequest;
      return this;
    }

    public void unsetPanelRequest() {
      this.panelRequest = null;
    }

    /** Returns true if field panelRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetPanelRequest() {
      return this.panelRequest != null;
    }

    public void setPanelRequestIsSet(boolean value) {
      if (!value) {
        this.panelRequest = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public paintPanel_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getStopTime() {
      return this.stopTime;
    }

    public paintPanel_args setStopTime(long stopTime) {
      this.stopTime = stopTime;
      setStopTimeIsSet(true);
      return this;
    }

    public void unsetStopTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPTIME_ISSET_ID);
    }

    /** Returns true if field stopTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStopTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STOPTIME_ISSET_ID);
    }

    public void setStopTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PANEL_REQUEST:
        if (value == null) {
          unsetPanelRequest();
        } else {
          setPanelRequest((PanelRequest)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case STOP_TIME:
        if (value == null) {
          unsetStopTime();
        } else {
          setStopTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PANEL_REQUEST:
        return getPanelRequest();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case STOP_TIME:
        return Long.valueOf(getStopTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PANEL_REQUEST:
        return isSetPanelRequest();
      case START_TIME:
        return isSetStartTime();
      case STOP_TIME:
        return isSetStopTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paintPanel_args)
        return this.equals((paintPanel_args)that);
      return false;
    }

    public boolean equals(paintPanel_args that) {
      if (that == null)
        return false;

      boolean this_present_panelRequest = true && this.isSetPanelRequest();
      boolean that_present_panelRequest = true && that.isSetPanelRequest();
      if (this_present_panelRequest || that_present_panelRequest) {
        if (!(this_present_panelRequest && that_present_panelRequest))
          return false;
        if (!this.panelRequest.equals(that.panelRequest))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_stopTime = true;
      boolean that_present_stopTime = true;
      if (this_present_stopTime || that_present_stopTime) {
        if (!(this_present_stopTime && that_present_stopTime))
          return false;
        if (this.stopTime != that.stopTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_panelRequest = true && (isSetPanelRequest());
      list.add(present_panelRequest);
      if (present_panelRequest)
        list.add(panelRequest);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_stopTime = true;
      list.add(present_stopTime);
      if (present_stopTime)
        list.add(stopTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(paintPanel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPanelRequest()).compareTo(other.isSetPanelRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanelRequest()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.panelRequest, other.panelRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopTime()).compareTo(other.isSetStopTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopTime()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.stopTime, other.stopTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paintPanel_args(");
      boolean first = true;

      sb.append("panelRequest:");
      if (this.panelRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.panelRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopTime:");
      sb.append(this.stopTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
      if (panelRequest != null) {
        panelRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class paintPanel_argsStandardSchemeFactory implements SchemeFactory {
      public paintPanel_argsStandardScheme getScheme() {
        return new paintPanel_argsStandardScheme();
      }
    }

    private static class paintPanel_argsStandardScheme extends StandardScheme<paintPanel_args> {

      public void read(libthrift091.protocol.TProtocol iprot, paintPanel_args struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PANEL_REQUEST
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.panelRequest = new PanelRequest();
                struct.panelRequest.read(iprot);
                struct.setPanelRequestIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == libthrift091.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STOP_TIME
              if (schemeField.type == libthrift091.protocol.TType.I64) {
                struct.stopTime = iprot.readI64();
                struct.setStopTimeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, paintPanel_args struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.panelRequest != null) {
          oprot.writeFieldBegin(PANEL_REQUEST_FIELD_DESC);
          struct.panelRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
        oprot.writeI64(struct.stopTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class paintPanel_argsTupleSchemeFactory implements SchemeFactory {
      public paintPanel_argsTupleScheme getScheme() {
        return new paintPanel_argsTupleScheme();
      }
    }

    private static class paintPanel_argsTupleScheme extends TupleScheme<paintPanel_args> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, paintPanel_args struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPanelRequest()) {
          optionals.set(0);
        }
        if (struct.isSetStartTime()) {
          optionals.set(1);
        }
        if (struct.isSetStopTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPanelRequest()) {
          struct.panelRequest.write(oprot);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetStopTime()) {
          oprot.writeI64(struct.stopTime);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, paintPanel_args struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.panelRequest = new PanelRequest();
          struct.panelRequest.read(iprot);
          struct.setPanelRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stopTime = iprot.readI64();
          struct.setStopTimeIsSet(true);
        }
      }
    }

  }

  public static class paintPanel_result implements libthrift091.TBase<paintPanel_result, paintPanel_result._Fields>, java.io.Serializable, Cloneable, Comparable<paintPanel_result>   {
    private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("paintPanel_result");

    private static final libthrift091.protocol.TField SUCCESS_FIELD_DESC = new libthrift091.protocol.TField("success", libthrift091.protocol.TType.STRUCT, (short)0);
    private static final libthrift091.protocol.TField SE_FIELD_DESC = new libthrift091.protocol.TField("se", libthrift091.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paintPanel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new paintPanel_resultTupleSchemeFactory());
    }

    public PanelResult success; // required
    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements libthrift091.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new libthrift091.meta_data.FieldMetaData("success", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, PanelResult.class)));
      tmpMap.put(_Fields.SE, new libthrift091.meta_data.FieldMetaData("se", libthrift091.TFieldRequirementType.DEFAULT, 
          new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(paintPanel_result.class, metaDataMap);
    }

    public paintPanel_result() {
    }

    public paintPanel_result(
      PanelResult success,
      com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se)
    {
      this();
      this.success = success;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paintPanel_result(paintPanel_result other) {
      if (other.isSetSuccess()) {
        this.success = new PanelResult(other.success);
      }
      if (other.isSetSe()) {
        this.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException(other.se);
      }
    }

    public paintPanel_result deepCopy() {
      return new paintPanel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.se = null;
    }

    public PanelResult getSuccess() {
      return this.success;
    }

    public paintPanel_result setSuccess(PanelResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xiaomi.infra.galaxy.metrics.thrift.ServiceException getSe() {
      return this.se;
    }

    public paintPanel_result setSe(com.xiaomi.infra.galaxy.metrics.thrift.ServiceException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PanelResult)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((com.xiaomi.infra.galaxy.metrics.thrift.ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paintPanel_result)
        return this.equals((paintPanel_result)that);
      return false;
    }

    public boolean equals(paintPanel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_se = true && (isSetSe());
      list.add(present_se);
      if (present_se)
        list.add(se);

      return list.hashCode();
    }

    @Override
    public int compareTo(paintPanel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = libthrift091.TBaseHelper.compareTo(this.se, other.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paintPanel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws libthrift091.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
      } catch (libthrift091.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class paintPanel_resultStandardSchemeFactory implements SchemeFactory {
      public paintPanel_resultStandardScheme getScheme() {
        return new paintPanel_resultStandardScheme();
      }
    }

    private static class paintPanel_resultStandardScheme extends StandardScheme<paintPanel_result> {

      public void read(libthrift091.protocol.TProtocol iprot, paintPanel_result struct) throws libthrift091.TException {
        libthrift091.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == libthrift091.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.success = new PanelResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SE
              if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
                struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(libthrift091.protocol.TProtocol oprot, paintPanel_result struct) throws libthrift091.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class paintPanel_resultTupleSchemeFactory implements SchemeFactory {
      public paintPanel_resultTupleScheme getScheme() {
        return new paintPanel_resultTupleScheme();
      }
    }

    private static class paintPanel_resultTupleScheme extends TupleScheme<paintPanel_result> {

      @Override
      public void write(libthrift091.protocol.TProtocol prot, paintPanel_result struct) throws libthrift091.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(libthrift091.protocol.TProtocol prot, paintPanel_result struct) throws libthrift091.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PanelResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.se = new com.xiaomi.infra.galaxy.metrics.thrift.ServiceException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

}
