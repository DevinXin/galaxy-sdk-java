/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.metrics.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-2")
public class ListDashboardsResult implements libthrift091.TBase<ListDashboardsResult, ListDashboardsResult._Fields>, java.io.Serializable, Cloneable, Comparable<ListDashboardsResult> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("ListDashboardsResult");

  private static final libthrift091.protocol.TField DASHBOARDS_FIELD_DESC = new libthrift091.protocol.TField("dashboards", libthrift091.protocol.TType.LIST, (short)1);
  private static final libthrift091.protocol.TField NEXT_START_DASHBOARD_FIELD_DESC = new libthrift091.protocol.TField("nextStartDashboard", libthrift091.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListDashboardsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListDashboardsResultTupleSchemeFactory());
  }

  public List<String> dashboards; // optional
  public String nextStartDashboard; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    DASHBOARDS((short)1, "dashboards"),
    NEXT_START_DASHBOARD((short)2, "nextStartDashboard");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DASHBOARDS
          return DASHBOARDS;
        case 2: // NEXT_START_DASHBOARD
          return NEXT_START_DASHBOARD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DASHBOARDS,_Fields.NEXT_START_DASHBOARD};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DASHBOARDS, new libthrift091.meta_data.FieldMetaData("dashboards", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEXT_START_DASHBOARD, new libthrift091.meta_data.FieldMetaData("nextStartDashboard", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(ListDashboardsResult.class, metaDataMap);
  }

  public ListDashboardsResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListDashboardsResult(ListDashboardsResult other) {
    if (other.isSetDashboards()) {
      List<String> __this__dashboards = new ArrayList<String>(other.dashboards);
      this.dashboards = __this__dashboards;
    }
    if (other.isSetNextStartDashboard()) {
      this.nextStartDashboard = other.nextStartDashboard;
    }
  }

  public ListDashboardsResult deepCopy() {
    return new ListDashboardsResult(this);
  }

  @Override
  public void clear() {
    this.dashboards = null;
    this.nextStartDashboard = null;
  }

  public int getDashboardsSize() {
    return (this.dashboards == null) ? 0 : this.dashboards.size();
  }

  public java.util.Iterator<String> getDashboardsIterator() {
    return (this.dashboards == null) ? null : this.dashboards.iterator();
  }

  public void addToDashboards(String elem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<String>();
    }
    this.dashboards.add(elem);
  }

  public List<String> getDashboards() {
    return this.dashboards;
  }

  public ListDashboardsResult setDashboards(List<String> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public void unsetDashboards() {
    this.dashboards = null;
  }

  /** Returns true if field dashboards is set (has been assigned a value) and false otherwise */
  public boolean isSetDashboards() {
    return this.dashboards != null;
  }

  public void setDashboardsIsSet(boolean value) {
    if (!value) {
      this.dashboards = null;
    }
  }

  public String getNextStartDashboard() {
    return this.nextStartDashboard;
  }

  public ListDashboardsResult setNextStartDashboard(String nextStartDashboard) {
    this.nextStartDashboard = nextStartDashboard;
    return this;
  }

  public void unsetNextStartDashboard() {
    this.nextStartDashboard = null;
  }

  /** Returns true if field nextStartDashboard is set (has been assigned a value) and false otherwise */
  public boolean isSetNextStartDashboard() {
    return this.nextStartDashboard != null;
  }

  public void setNextStartDashboardIsSet(boolean value) {
    if (!value) {
      this.nextStartDashboard = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DASHBOARDS:
      if (value == null) {
        unsetDashboards();
      } else {
        setDashboards((List<String>)value);
      }
      break;

    case NEXT_START_DASHBOARD:
      if (value == null) {
        unsetNextStartDashboard();
      } else {
        setNextStartDashboard((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DASHBOARDS:
      return getDashboards();

    case NEXT_START_DASHBOARD:
      return getNextStartDashboard();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DASHBOARDS:
      return isSetDashboards();
    case NEXT_START_DASHBOARD:
      return isSetNextStartDashboard();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListDashboardsResult)
      return this.equals((ListDashboardsResult)that);
    return false;
  }

  public boolean equals(ListDashboardsResult that) {
    if (that == null)
      return false;

    boolean this_present_dashboards = true && this.isSetDashboards();
    boolean that_present_dashboards = true && that.isSetDashboards();
    if (this_present_dashboards || that_present_dashboards) {
      if (!(this_present_dashboards && that_present_dashboards))
        return false;
      if (!this.dashboards.equals(that.dashboards))
        return false;
    }

    boolean this_present_nextStartDashboard = true && this.isSetNextStartDashboard();
    boolean that_present_nextStartDashboard = true && that.isSetNextStartDashboard();
    if (this_present_nextStartDashboard || that_present_nextStartDashboard) {
      if (!(this_present_nextStartDashboard && that_present_nextStartDashboard))
        return false;
      if (!this.nextStartDashboard.equals(that.nextStartDashboard))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dashboards = true && (isSetDashboards());
    list.add(present_dashboards);
    if (present_dashboards)
      list.add(dashboards);

    boolean present_nextStartDashboard = true && (isSetNextStartDashboard());
    list.add(present_nextStartDashboard);
    if (present_nextStartDashboard)
      list.add(nextStartDashboard);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListDashboardsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDashboards()).compareTo(other.isSetDashboards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDashboards()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.dashboards, other.dashboards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextStartDashboard()).compareTo(other.isSetNextStartDashboard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextStartDashboard()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.nextStartDashboard, other.nextStartDashboard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListDashboardsResult(");
    boolean first = true;

    if (isSetDashboards()) {
      sb.append("dashboards:");
      if (this.dashboards == null) {
        sb.append("null");
      } else {
        sb.append(this.dashboards);
      }
      first = false;
    }
    if (isSetNextStartDashboard()) {
      if (!first) sb.append(", ");
      sb.append("nextStartDashboard:");
      if (this.nextStartDashboard == null) {
        sb.append("null");
      } else {
        sb.append(this.nextStartDashboard);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListDashboardsResultStandardSchemeFactory implements SchemeFactory {
    public ListDashboardsResultStandardScheme getScheme() {
      return new ListDashboardsResultStandardScheme();
    }
  }

  private static class ListDashboardsResultStandardScheme extends StandardScheme<ListDashboardsResult> {

    public void read(libthrift091.protocol.TProtocol iprot, ListDashboardsResult struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DASHBOARDS
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list24 = iprot.readListBegin();
                struct.dashboards = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.dashboards.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setDashboardsIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEXT_START_DASHBOARD
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.nextStartDashboard = iprot.readString();
              struct.setNextStartDashboardIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, ListDashboardsResult struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dashboards != null) {
        if (struct.isSetDashboards()) {
          oprot.writeFieldBegin(DASHBOARDS_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRING, struct.dashboards.size()));
            for (String _iter27 : struct.dashboards)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextStartDashboard != null) {
        if (struct.isSetNextStartDashboard()) {
          oprot.writeFieldBegin(NEXT_START_DASHBOARD_FIELD_DESC);
          oprot.writeString(struct.nextStartDashboard);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListDashboardsResultTupleSchemeFactory implements SchemeFactory {
    public ListDashboardsResultTupleScheme getScheme() {
      return new ListDashboardsResultTupleScheme();
    }
  }

  private static class ListDashboardsResultTupleScheme extends TupleScheme<ListDashboardsResult> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, ListDashboardsResult struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDashboards()) {
        optionals.set(0);
      }
      if (struct.isSetNextStartDashboard()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDashboards()) {
        {
          oprot.writeI32(struct.dashboards.size());
          for (String _iter28 : struct.dashboards)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetNextStartDashboard()) {
        oprot.writeString(struct.nextStartDashboard);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, ListDashboardsResult struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          libthrift091.protocol.TList _list29 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRING, iprot.readI32());
          struct.dashboards = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.dashboards.add(_elem30);
          }
        }
        struct.setDashboardsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nextStartDashboard = iprot.readString();
        struct.setNextStartDashboardIsSet(true);
      }
    }
  }

}

