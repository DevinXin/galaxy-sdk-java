/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.metrics.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-30")
public class DownSample implements libthrift091.TBase<DownSample, DownSample._Fields>, java.io.Serializable, Cloneable, Comparable<DownSample> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("DownSample");

  private static final libthrift091.protocol.TField INTERNAL_FIELD_DESC = new libthrift091.protocol.TField("internal", libthrift091.protocol.TType.I32, (short)1);
  private static final libthrift091.protocol.TField TIME_UNIT_FIELD_DESC = new libthrift091.protocol.TField("timeUnit", libthrift091.protocol.TType.I32, (short)2);
  private static final libthrift091.protocol.TField AGGREGATOR_FIELD_DESC = new libthrift091.protocol.TField("aggregator", libthrift091.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DownSampleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DownSampleTupleSchemeFactory());
  }

  public int internal; // optional
  /**
   * 
   * @see TimeUnit
   */
  public TimeUnit timeUnit; // optional
  /**
   * 
   * @see Aggregator
   */
  public Aggregator aggregator; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    INTERNAL((short)1, "internal"),
    /**
     * 
     * @see TimeUnit
     */
    TIME_UNIT((short)2, "timeUnit"),
    /**
     * 
     * @see Aggregator
     */
    AGGREGATOR((short)3, "aggregator");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERNAL
          return INTERNAL;
        case 2: // TIME_UNIT
          return TIME_UNIT;
        case 3: // AGGREGATOR
          return AGGREGATOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERNAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INTERNAL,_Fields.TIME_UNIT,_Fields.AGGREGATOR};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERNAL, new libthrift091.meta_data.FieldMetaData("internal", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_UNIT, new libthrift091.meta_data.FieldMetaData("timeUnit", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.EnumMetaData(libthrift091.protocol.TType.ENUM, TimeUnit.class)));
    tmpMap.put(_Fields.AGGREGATOR, new libthrift091.meta_data.FieldMetaData("aggregator", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.EnumMetaData(libthrift091.protocol.TType.ENUM, Aggregator.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(DownSample.class, metaDataMap);
  }

  public DownSample() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DownSample(DownSample other) {
    __isset_bitfield = other.__isset_bitfield;
    this.internal = other.internal;
    if (other.isSetTimeUnit()) {
      this.timeUnit = other.timeUnit;
    }
    if (other.isSetAggregator()) {
      this.aggregator = other.aggregator;
    }
  }

  public DownSample deepCopy() {
    return new DownSample(this);
  }

  @Override
  public void clear() {
    setInternalIsSet(false);
    this.internal = 0;
    this.timeUnit = null;
    this.aggregator = null;
  }

  public int getInternal() {
    return this.internal;
  }

  public DownSample setInternal(int internal) {
    this.internal = internal;
    setInternalIsSet(true);
    return this;
  }

  public void unsetInternal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNAL_ISSET_ID);
  }

  /** Returns true if field internal is set (has been assigned a value) and false otherwise */
  public boolean isSetInternal() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERNAL_ISSET_ID);
  }

  public void setInternalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNAL_ISSET_ID, value);
  }

  /**
   * 
   * @see TimeUnit
   */
  public TimeUnit getTimeUnit() {
    return this.timeUnit;
  }

  /**
   * 
   * @see TimeUnit
   */
  public DownSample setTimeUnit(TimeUnit timeUnit) {
    this.timeUnit = timeUnit;
    return this;
  }

  public void unsetTimeUnit() {
    this.timeUnit = null;
  }

  /** Returns true if field timeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeUnit() {
    return this.timeUnit != null;
  }

  public void setTimeUnitIsSet(boolean value) {
    if (!value) {
      this.timeUnit = null;
    }
  }

  /**
   * 
   * @see Aggregator
   */
  public Aggregator getAggregator() {
    return this.aggregator;
  }

  /**
   * 
   * @see Aggregator
   */
  public DownSample setAggregator(Aggregator aggregator) {
    this.aggregator = aggregator;
    return this;
  }

  public void unsetAggregator() {
    this.aggregator = null;
  }

  /** Returns true if field aggregator is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregator() {
    return this.aggregator != null;
  }

  public void setAggregatorIsSet(boolean value) {
    if (!value) {
      this.aggregator = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERNAL:
      if (value == null) {
        unsetInternal();
      } else {
        setInternal((Integer)value);
      }
      break;

    case TIME_UNIT:
      if (value == null) {
        unsetTimeUnit();
      } else {
        setTimeUnit((TimeUnit)value);
      }
      break;

    case AGGREGATOR:
      if (value == null) {
        unsetAggregator();
      } else {
        setAggregator((Aggregator)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERNAL:
      return Integer.valueOf(getInternal());

    case TIME_UNIT:
      return getTimeUnit();

    case AGGREGATOR:
      return getAggregator();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERNAL:
      return isSetInternal();
    case TIME_UNIT:
      return isSetTimeUnit();
    case AGGREGATOR:
      return isSetAggregator();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DownSample)
      return this.equals((DownSample)that);
    return false;
  }

  public boolean equals(DownSample that) {
    if (that == null)
      return false;

    boolean this_present_internal = true && this.isSetInternal();
    boolean that_present_internal = true && that.isSetInternal();
    if (this_present_internal || that_present_internal) {
      if (!(this_present_internal && that_present_internal))
        return false;
      if (this.internal != that.internal)
        return false;
    }

    boolean this_present_timeUnit = true && this.isSetTimeUnit();
    boolean that_present_timeUnit = true && that.isSetTimeUnit();
    if (this_present_timeUnit || that_present_timeUnit) {
      if (!(this_present_timeUnit && that_present_timeUnit))
        return false;
      if (!this.timeUnit.equals(that.timeUnit))
        return false;
    }

    boolean this_present_aggregator = true && this.isSetAggregator();
    boolean that_present_aggregator = true && that.isSetAggregator();
    if (this_present_aggregator || that_present_aggregator) {
      if (!(this_present_aggregator && that_present_aggregator))
        return false;
      if (!this.aggregator.equals(that.aggregator))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_internal = true && (isSetInternal());
    list.add(present_internal);
    if (present_internal)
      list.add(internal);

    boolean present_timeUnit = true && (isSetTimeUnit());
    list.add(present_timeUnit);
    if (present_timeUnit)
      list.add(timeUnit.getValue());

    boolean present_aggregator = true && (isSetAggregator());
    list.add(present_aggregator);
    if (present_aggregator)
      list.add(aggregator.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(DownSample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInternal()).compareTo(other.isSetInternal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternal()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.internal, other.internal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeUnit()).compareTo(other.isSetTimeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeUnit()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.timeUnit, other.timeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregator()).compareTo(other.isSetAggregator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregator()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.aggregator, other.aggregator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DownSample(");
    boolean first = true;

    if (isSetInternal()) {
      sb.append("internal:");
      sb.append(this.internal);
      first = false;
    }
    if (isSetTimeUnit()) {
      if (!first) sb.append(", ");
      sb.append("timeUnit:");
      if (this.timeUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.timeUnit);
      }
      first = false;
    }
    if (isSetAggregator()) {
      if (!first) sb.append(", ");
      sb.append("aggregator:");
      if (this.aggregator == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregator);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DownSampleStandardSchemeFactory implements SchemeFactory {
    public DownSampleStandardScheme getScheme() {
      return new DownSampleStandardScheme();
    }
  }

  private static class DownSampleStandardScheme extends StandardScheme<DownSample> {

    public void read(libthrift091.protocol.TProtocol iprot, DownSample struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERNAL
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.internal = iprot.readI32();
              struct.setInternalIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_UNIT
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.timeUnit = com.xiaomi.infra.galaxy.metrics.thrift.TimeUnit.findByValue(iprot.readI32());
              struct.setTimeUnitIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGGREGATOR
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.aggregator = com.xiaomi.infra.galaxy.metrics.thrift.Aggregator.findByValue(iprot.readI32());
              struct.setAggregatorIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, DownSample struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetInternal()) {
        oprot.writeFieldBegin(INTERNAL_FIELD_DESC);
        oprot.writeI32(struct.internal);
        oprot.writeFieldEnd();
      }
      if (struct.timeUnit != null) {
        if (struct.isSetTimeUnit()) {
          oprot.writeFieldBegin(TIME_UNIT_FIELD_DESC);
          oprot.writeI32(struct.timeUnit.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregator != null) {
        if (struct.isSetAggregator()) {
          oprot.writeFieldBegin(AGGREGATOR_FIELD_DESC);
          oprot.writeI32(struct.aggregator.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DownSampleTupleSchemeFactory implements SchemeFactory {
    public DownSampleTupleScheme getScheme() {
      return new DownSampleTupleScheme();
    }
  }

  private static class DownSampleTupleScheme extends TupleScheme<DownSample> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, DownSample struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInternal()) {
        optionals.set(0);
      }
      if (struct.isSetTimeUnit()) {
        optionals.set(1);
      }
      if (struct.isSetAggregator()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInternal()) {
        oprot.writeI32(struct.internal);
      }
      if (struct.isSetTimeUnit()) {
        oprot.writeI32(struct.timeUnit.getValue());
      }
      if (struct.isSetAggregator()) {
        oprot.writeI32(struct.aggregator.getValue());
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, DownSample struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.internal = iprot.readI32();
        struct.setInternalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeUnit = com.xiaomi.infra.galaxy.metrics.thrift.TimeUnit.findByValue(iprot.readI32());
        struct.setTimeUnitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aggregator = com.xiaomi.infra.galaxy.metrics.thrift.Aggregator.findByValue(iprot.readI32());
        struct.setAggregatorIsSet(true);
      }
    }
  }

}

