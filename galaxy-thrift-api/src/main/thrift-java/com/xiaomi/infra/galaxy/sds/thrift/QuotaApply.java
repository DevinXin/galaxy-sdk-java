/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.sds.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This is a struct for Quota application from users
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-4-24")
public class QuotaApply implements libthrift091.TBase<QuotaApply, QuotaApply._Fields>, java.io.Serializable, Cloneable, Comparable<QuotaApply> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("QuotaApply");

  private static final libthrift091.protocol.TField ORG_ID_FIELD_DESC = new libthrift091.protocol.TField("orgId", libthrift091.protocol.TType.STRING, (short)1);
  private static final libthrift091.protocol.TField TABLE_NUM_FIELD_DESC = new libthrift091.protocol.TField("tableNum", libthrift091.protocol.TType.I32, (short)2);
  private static final libthrift091.protocol.TField TABLE_SIZE_IN_GB_FIELD_DESC = new libthrift091.protocol.TField("tableSizeInGB", libthrift091.protocol.TType.I32, (short)3);
  private static final libthrift091.protocol.TField READ_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("readQuota", libthrift091.protocol.TType.I64, (short)4);
  private static final libthrift091.protocol.TField WRITE_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("writeQuota", libthrift091.protocol.TType.I64, (short)5);
  private static final libthrift091.protocol.TField TIMESTAMP_FIELD_DESC = new libthrift091.protocol.TField("timestamp", libthrift091.protocol.TType.I64, (short)6);
  private static final libthrift091.protocol.TField SLAVE_READ_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("slaveReadQuota", libthrift091.protocol.TType.I64, (short)7);
  private static final libthrift091.protocol.TField SLAVE_WRITE_QUOTA_FIELD_DESC = new libthrift091.protocol.TField("slaveWriteQuota", libthrift091.protocol.TType.I64, (short)8);
  private static final libthrift091.protocol.TField COM_NAME_FIELD_DESC = new libthrift091.protocol.TField("comName", libthrift091.protocol.TType.STRING, (short)9);
  private static final libthrift091.protocol.TField APPLY_USER_NAME_FIELD_DESC = new libthrift091.protocol.TField("applyUserName", libthrift091.protocol.TType.STRING, (short)10);
  private static final libthrift091.protocol.TField STATUS_FIELD_DESC = new libthrift091.protocol.TField("status", libthrift091.protocol.TType.I16, (short)11);
  private static final libthrift091.protocol.TField APPLY_ID_FIELD_DESC = new libthrift091.protocol.TField("applyId", libthrift091.protocol.TType.STRING, (short)12);
  private static final libthrift091.protocol.TField MESSAGE_FIELD_DESC = new libthrift091.protocol.TField("message", libthrift091.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuotaApplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuotaApplyTupleSchemeFactory());
  }

  public String orgId; // optional
  public int tableNum; // optional
  public int tableSizeInGB; // optional
  public long readQuota; // optional
  public long writeQuota; // optional
  public long timestamp; // optional
  public long slaveReadQuota; // optional
  public long slaveWriteQuota; // optional
  public String comName; // optional
  public String applyUserName; // optional
  public short status; // optional
  public String applyId; // optional
  public String message; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    ORG_ID((short)1, "orgId"),
    TABLE_NUM((short)2, "tableNum"),
    TABLE_SIZE_IN_GB((short)3, "tableSizeInGB"),
    READ_QUOTA((short)4, "readQuota"),
    WRITE_QUOTA((short)5, "writeQuota"),
    TIMESTAMP((short)6, "timestamp"),
    SLAVE_READ_QUOTA((short)7, "slaveReadQuota"),
    SLAVE_WRITE_QUOTA((short)8, "slaveWriteQuota"),
    COM_NAME((short)9, "comName"),
    APPLY_USER_NAME((short)10, "applyUserName"),
    STATUS((short)11, "status"),
    APPLY_ID((short)12, "applyId"),
    MESSAGE((short)13, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORG_ID
          return ORG_ID;
        case 2: // TABLE_NUM
          return TABLE_NUM;
        case 3: // TABLE_SIZE_IN_GB
          return TABLE_SIZE_IN_GB;
        case 4: // READ_QUOTA
          return READ_QUOTA;
        case 5: // WRITE_QUOTA
          return WRITE_QUOTA;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // SLAVE_READ_QUOTA
          return SLAVE_READ_QUOTA;
        case 8: // SLAVE_WRITE_QUOTA
          return SLAVE_WRITE_QUOTA;
        case 9: // COM_NAME
          return COM_NAME;
        case 10: // APPLY_USER_NAME
          return APPLY_USER_NAME;
        case 11: // STATUS
          return STATUS;
        case 12: // APPLY_ID
          return APPLY_ID;
        case 13: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLENUM_ISSET_ID = 0;
  private static final int __TABLESIZEINGB_ISSET_ID = 1;
  private static final int __READQUOTA_ISSET_ID = 2;
  private static final int __WRITEQUOTA_ISSET_ID = 3;
  private static final int __TIMESTAMP_ISSET_ID = 4;
  private static final int __SLAVEREADQUOTA_ISSET_ID = 5;
  private static final int __SLAVEWRITEQUOTA_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORG_ID,_Fields.TABLE_NUM,_Fields.TABLE_SIZE_IN_GB,_Fields.READ_QUOTA,_Fields.WRITE_QUOTA,_Fields.TIMESTAMP,_Fields.SLAVE_READ_QUOTA,_Fields.SLAVE_WRITE_QUOTA,_Fields.COM_NAME,_Fields.APPLY_USER_NAME,_Fields.STATUS,_Fields.APPLY_ID,_Fields.MESSAGE};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORG_ID, new libthrift091.meta_data.FieldMetaData("orgId", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NUM, new libthrift091.meta_data.FieldMetaData("tableNum", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_SIZE_IN_GB, new libthrift091.meta_data.FieldMetaData("tableSizeInGB", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_QUOTA, new libthrift091.meta_data.FieldMetaData("readQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE_QUOTA, new libthrift091.meta_data.FieldMetaData("writeQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP, new libthrift091.meta_data.FieldMetaData("timestamp", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.SLAVE_READ_QUOTA, new libthrift091.meta_data.FieldMetaData("slaveReadQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.SLAVE_WRITE_QUOTA, new libthrift091.meta_data.FieldMetaData("slaveWriteQuota", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64)));
    tmpMap.put(_Fields.COM_NAME, new libthrift091.meta_data.FieldMetaData("comName", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_USER_NAME, new libthrift091.meta_data.FieldMetaData("applyUserName", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new libthrift091.meta_data.FieldMetaData("status", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I16)));
    tmpMap.put(_Fields.APPLY_ID, new libthrift091.meta_data.FieldMetaData("applyId", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new libthrift091.meta_data.FieldMetaData("message", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(QuotaApply.class, metaDataMap);
  }

  public QuotaApply() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuotaApply(QuotaApply other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrgId()) {
      this.orgId = other.orgId;
    }
    this.tableNum = other.tableNum;
    this.tableSizeInGB = other.tableSizeInGB;
    this.readQuota = other.readQuota;
    this.writeQuota = other.writeQuota;
    this.timestamp = other.timestamp;
    this.slaveReadQuota = other.slaveReadQuota;
    this.slaveWriteQuota = other.slaveWriteQuota;
    if (other.isSetComName()) {
      this.comName = other.comName;
    }
    if (other.isSetApplyUserName()) {
      this.applyUserName = other.applyUserName;
    }
    this.status = other.status;
    if (other.isSetApplyId()) {
      this.applyId = other.applyId;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public QuotaApply deepCopy() {
    return new QuotaApply(this);
  }

  @Override
  public void clear() {
    this.orgId = null;
    setTableNumIsSet(false);
    this.tableNum = 0;
    setTableSizeInGBIsSet(false);
    this.tableSizeInGB = 0;
    setReadQuotaIsSet(false);
    this.readQuota = 0;
    setWriteQuotaIsSet(false);
    this.writeQuota = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setSlaveReadQuotaIsSet(false);
    this.slaveReadQuota = 0;
    setSlaveWriteQuotaIsSet(false);
    this.slaveWriteQuota = 0;
    this.comName = null;
    this.applyUserName = null;
    setStatusIsSet(false);
    this.status = 0;
    this.applyId = null;
    this.message = null;
  }

  public String getOrgId() {
    return this.orgId;
  }

  public QuotaApply setOrgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  public void unsetOrgId() {
    this.orgId = null;
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return this.orgId != null;
  }

  public void setOrgIdIsSet(boolean value) {
    if (!value) {
      this.orgId = null;
    }
  }

  public int getTableNum() {
    return this.tableNum;
  }

  public QuotaApply setTableNum(int tableNum) {
    this.tableNum = tableNum;
    setTableNumIsSet(true);
    return this;
  }

  public void unsetTableNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLENUM_ISSET_ID);
  }

  /** Returns true if field tableNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTableNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLENUM_ISSET_ID);
  }

  public void setTableNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLENUM_ISSET_ID, value);
  }

  public int getTableSizeInGB() {
    return this.tableSizeInGB;
  }

  public QuotaApply setTableSizeInGB(int tableSizeInGB) {
    this.tableSizeInGB = tableSizeInGB;
    setTableSizeInGBIsSet(true);
    return this;
  }

  public void unsetTableSizeInGB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLESIZEINGB_ISSET_ID);
  }

  /** Returns true if field tableSizeInGB is set (has been assigned a value) and false otherwise */
  public boolean isSetTableSizeInGB() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLESIZEINGB_ISSET_ID);
  }

  public void setTableSizeInGBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLESIZEINGB_ISSET_ID, value);
  }

  public long getReadQuota() {
    return this.readQuota;
  }

  public QuotaApply setReadQuota(long readQuota) {
    this.readQuota = readQuota;
    setReadQuotaIsSet(true);
    return this;
  }

  public void unsetReadQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READQUOTA_ISSET_ID);
  }

  /** Returns true if field readQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetReadQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __READQUOTA_ISSET_ID);
  }

  public void setReadQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READQUOTA_ISSET_ID, value);
  }

  public long getWriteQuota() {
    return this.writeQuota;
  }

  public QuotaApply setWriteQuota(long writeQuota) {
    this.writeQuota = writeQuota;
    setWriteQuotaIsSet(true);
    return this;
  }

  public void unsetWriteQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITEQUOTA_ISSET_ID);
  }

  /** Returns true if field writeQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITEQUOTA_ISSET_ID);
  }

  public void setWriteQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITEQUOTA_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public QuotaApply setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getSlaveReadQuota() {
    return this.slaveReadQuota;
  }

  public QuotaApply setSlaveReadQuota(long slaveReadQuota) {
    this.slaveReadQuota = slaveReadQuota;
    setSlaveReadQuotaIsSet(true);
    return this;
  }

  public void unsetSlaveReadQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLAVEREADQUOTA_ISSET_ID);
  }

  /** Returns true if field slaveReadQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetSlaveReadQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __SLAVEREADQUOTA_ISSET_ID);
  }

  public void setSlaveReadQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLAVEREADQUOTA_ISSET_ID, value);
  }

  public long getSlaveWriteQuota() {
    return this.slaveWriteQuota;
  }

  public QuotaApply setSlaveWriteQuota(long slaveWriteQuota) {
    this.slaveWriteQuota = slaveWriteQuota;
    setSlaveWriteQuotaIsSet(true);
    return this;
  }

  public void unsetSlaveWriteQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLAVEWRITEQUOTA_ISSET_ID);
  }

  /** Returns true if field slaveWriteQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetSlaveWriteQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __SLAVEWRITEQUOTA_ISSET_ID);
  }

  public void setSlaveWriteQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLAVEWRITEQUOTA_ISSET_ID, value);
  }

  public String getComName() {
    return this.comName;
  }

  public QuotaApply setComName(String comName) {
    this.comName = comName;
    return this;
  }

  public void unsetComName() {
    this.comName = null;
  }

  /** Returns true if field comName is set (has been assigned a value) and false otherwise */
  public boolean isSetComName() {
    return this.comName != null;
  }

  public void setComNameIsSet(boolean value) {
    if (!value) {
      this.comName = null;
    }
  }

  public String getApplyUserName() {
    return this.applyUserName;
  }

  public QuotaApply setApplyUserName(String applyUserName) {
    this.applyUserName = applyUserName;
    return this;
  }

  public void unsetApplyUserName() {
    this.applyUserName = null;
  }

  /** Returns true if field applyUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserName() {
    return this.applyUserName != null;
  }

  public void setApplyUserNameIsSet(boolean value) {
    if (!value) {
      this.applyUserName = null;
    }
  }

  public short getStatus() {
    return this.status;
  }

  public QuotaApply setStatus(short status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getApplyId() {
    return this.applyId;
  }

  public QuotaApply setApplyId(String applyId) {
    this.applyId = applyId;
    return this;
  }

  public void unsetApplyId() {
    this.applyId = null;
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return this.applyId != null;
  }

  public void setApplyIdIsSet(boolean value) {
    if (!value) {
      this.applyId = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public QuotaApply setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((String)value);
      }
      break;

    case TABLE_NUM:
      if (value == null) {
        unsetTableNum();
      } else {
        setTableNum((Integer)value);
      }
      break;

    case TABLE_SIZE_IN_GB:
      if (value == null) {
        unsetTableSizeInGB();
      } else {
        setTableSizeInGB((Integer)value);
      }
      break;

    case READ_QUOTA:
      if (value == null) {
        unsetReadQuota();
      } else {
        setReadQuota((Long)value);
      }
      break;

    case WRITE_QUOTA:
      if (value == null) {
        unsetWriteQuota();
      } else {
        setWriteQuota((Long)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case SLAVE_READ_QUOTA:
      if (value == null) {
        unsetSlaveReadQuota();
      } else {
        setSlaveReadQuota((Long)value);
      }
      break;

    case SLAVE_WRITE_QUOTA:
      if (value == null) {
        unsetSlaveWriteQuota();
      } else {
        setSlaveWriteQuota((Long)value);
      }
      break;

    case COM_NAME:
      if (value == null) {
        unsetComName();
      } else {
        setComName((String)value);
      }
      break;

    case APPLY_USER_NAME:
      if (value == null) {
        unsetApplyUserName();
      } else {
        setApplyUserName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Short)value);
      }
      break;

    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORG_ID:
      return getOrgId();

    case TABLE_NUM:
      return Integer.valueOf(getTableNum());

    case TABLE_SIZE_IN_GB:
      return Integer.valueOf(getTableSizeInGB());

    case READ_QUOTA:
      return Long.valueOf(getReadQuota());

    case WRITE_QUOTA:
      return Long.valueOf(getWriteQuota());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case SLAVE_READ_QUOTA:
      return Long.valueOf(getSlaveReadQuota());

    case SLAVE_WRITE_QUOTA:
      return Long.valueOf(getSlaveWriteQuota());

    case COM_NAME:
      return getComName();

    case APPLY_USER_NAME:
      return getApplyUserName();

    case STATUS:
      return Short.valueOf(getStatus());

    case APPLY_ID:
      return getApplyId();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORG_ID:
      return isSetOrgId();
    case TABLE_NUM:
      return isSetTableNum();
    case TABLE_SIZE_IN_GB:
      return isSetTableSizeInGB();
    case READ_QUOTA:
      return isSetReadQuota();
    case WRITE_QUOTA:
      return isSetWriteQuota();
    case TIMESTAMP:
      return isSetTimestamp();
    case SLAVE_READ_QUOTA:
      return isSetSlaveReadQuota();
    case SLAVE_WRITE_QUOTA:
      return isSetSlaveWriteQuota();
    case COM_NAME:
      return isSetComName();
    case APPLY_USER_NAME:
      return isSetApplyUserName();
    case STATUS:
      return isSetStatus();
    case APPLY_ID:
      return isSetApplyId();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuotaApply)
      return this.equals((QuotaApply)that);
    return false;
  }

  public boolean equals(QuotaApply that) {
    if (that == null)
      return false;

    boolean this_present_orgId = true && this.isSetOrgId();
    boolean that_present_orgId = true && that.isSetOrgId();
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (!this.orgId.equals(that.orgId))
        return false;
    }

    boolean this_present_tableNum = true && this.isSetTableNum();
    boolean that_present_tableNum = true && that.isSetTableNum();
    if (this_present_tableNum || that_present_tableNum) {
      if (!(this_present_tableNum && that_present_tableNum))
        return false;
      if (this.tableNum != that.tableNum)
        return false;
    }

    boolean this_present_tableSizeInGB = true && this.isSetTableSizeInGB();
    boolean that_present_tableSizeInGB = true && that.isSetTableSizeInGB();
    if (this_present_tableSizeInGB || that_present_tableSizeInGB) {
      if (!(this_present_tableSizeInGB && that_present_tableSizeInGB))
        return false;
      if (this.tableSizeInGB != that.tableSizeInGB)
        return false;
    }

    boolean this_present_readQuota = true && this.isSetReadQuota();
    boolean that_present_readQuota = true && that.isSetReadQuota();
    if (this_present_readQuota || that_present_readQuota) {
      if (!(this_present_readQuota && that_present_readQuota))
        return false;
      if (this.readQuota != that.readQuota)
        return false;
    }

    boolean this_present_writeQuota = true && this.isSetWriteQuota();
    boolean that_present_writeQuota = true && that.isSetWriteQuota();
    if (this_present_writeQuota || that_present_writeQuota) {
      if (!(this_present_writeQuota && that_present_writeQuota))
        return false;
      if (this.writeQuota != that.writeQuota)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_slaveReadQuota = true && this.isSetSlaveReadQuota();
    boolean that_present_slaveReadQuota = true && that.isSetSlaveReadQuota();
    if (this_present_slaveReadQuota || that_present_slaveReadQuota) {
      if (!(this_present_slaveReadQuota && that_present_slaveReadQuota))
        return false;
      if (this.slaveReadQuota != that.slaveReadQuota)
        return false;
    }

    boolean this_present_slaveWriteQuota = true && this.isSetSlaveWriteQuota();
    boolean that_present_slaveWriteQuota = true && that.isSetSlaveWriteQuota();
    if (this_present_slaveWriteQuota || that_present_slaveWriteQuota) {
      if (!(this_present_slaveWriteQuota && that_present_slaveWriteQuota))
        return false;
      if (this.slaveWriteQuota != that.slaveWriteQuota)
        return false;
    }

    boolean this_present_comName = true && this.isSetComName();
    boolean that_present_comName = true && that.isSetComName();
    if (this_present_comName || that_present_comName) {
      if (!(this_present_comName && that_present_comName))
        return false;
      if (!this.comName.equals(that.comName))
        return false;
    }

    boolean this_present_applyUserName = true && this.isSetApplyUserName();
    boolean that_present_applyUserName = true && that.isSetApplyUserName();
    if (this_present_applyUserName || that_present_applyUserName) {
      if (!(this_present_applyUserName && that_present_applyUserName))
        return false;
      if (!this.applyUserName.equals(that.applyUserName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_applyId = true && this.isSetApplyId();
    boolean that_present_applyId = true && that.isSetApplyId();
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (!this.applyId.equals(that.applyId))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orgId = true && (isSetOrgId());
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_tableNum = true && (isSetTableNum());
    list.add(present_tableNum);
    if (present_tableNum)
      list.add(tableNum);

    boolean present_tableSizeInGB = true && (isSetTableSizeInGB());
    list.add(present_tableSizeInGB);
    if (present_tableSizeInGB)
      list.add(tableSizeInGB);

    boolean present_readQuota = true && (isSetReadQuota());
    list.add(present_readQuota);
    if (present_readQuota)
      list.add(readQuota);

    boolean present_writeQuota = true && (isSetWriteQuota());
    list.add(present_writeQuota);
    if (present_writeQuota)
      list.add(writeQuota);

    boolean present_timestamp = true && (isSetTimestamp());
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_slaveReadQuota = true && (isSetSlaveReadQuota());
    list.add(present_slaveReadQuota);
    if (present_slaveReadQuota)
      list.add(slaveReadQuota);

    boolean present_slaveWriteQuota = true && (isSetSlaveWriteQuota());
    list.add(present_slaveWriteQuota);
    if (present_slaveWriteQuota)
      list.add(slaveWriteQuota);

    boolean present_comName = true && (isSetComName());
    list.add(present_comName);
    if (present_comName)
      list.add(comName);

    boolean present_applyUserName = true && (isSetApplyUserName());
    list.add(present_applyUserName);
    if (present_applyUserName)
      list.add(applyUserName);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_applyId = true && (isSetApplyId());
    list.add(present_applyId);
    if (present_applyId)
      list.add(applyId);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuotaApply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableNum()).compareTo(other.isSetTableNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableNum()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.tableNum, other.tableNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableSizeInGB()).compareTo(other.isSetTableSizeInGB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableSizeInGB()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.tableSizeInGB, other.tableSizeInGB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadQuota()).compareTo(other.isSetReadQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.readQuota, other.readQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteQuota()).compareTo(other.isSetWriteQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.writeQuota, other.writeQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlaveReadQuota()).compareTo(other.isSetSlaveReadQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlaveReadQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.slaveReadQuota, other.slaveReadQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlaveWriteQuota()).compareTo(other.isSetSlaveWriteQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlaveWriteQuota()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.slaveWriteQuota, other.slaveWriteQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComName()).compareTo(other.isSetComName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.comName, other.comName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserName()).compareTo(other.isSetApplyUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.applyUserName, other.applyUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuotaApply(");
    boolean first = true;

    if (isSetOrgId()) {
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
    }
    if (isSetTableNum()) {
      if (!first) sb.append(", ");
      sb.append("tableNum:");
      sb.append(this.tableNum);
      first = false;
    }
    if (isSetTableSizeInGB()) {
      if (!first) sb.append(", ");
      sb.append("tableSizeInGB:");
      sb.append(this.tableSizeInGB);
      first = false;
    }
    if (isSetReadQuota()) {
      if (!first) sb.append(", ");
      sb.append("readQuota:");
      sb.append(this.readQuota);
      first = false;
    }
    if (isSetWriteQuota()) {
      if (!first) sb.append(", ");
      sb.append("writeQuota:");
      sb.append(this.writeQuota);
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetSlaveReadQuota()) {
      if (!first) sb.append(", ");
      sb.append("slaveReadQuota:");
      sb.append(this.slaveReadQuota);
      first = false;
    }
    if (isSetSlaveWriteQuota()) {
      if (!first) sb.append(", ");
      sb.append("slaveWriteQuota:");
      sb.append(this.slaveWriteQuota);
      first = false;
    }
    if (isSetComName()) {
      if (!first) sb.append(", ");
      sb.append("comName:");
      if (this.comName == null) {
        sb.append("null");
      } else {
        sb.append(this.comName);
      }
      first = false;
    }
    if (isSetApplyUserName()) {
      if (!first) sb.append(", ");
      sb.append("applyUserName:");
      if (this.applyUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.applyUserName);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetApplyId()) {
      if (!first) sb.append(", ");
      sb.append("applyId:");
      if (this.applyId == null) {
        sb.append("null");
      } else {
        sb.append(this.applyId);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuotaApplyStandardSchemeFactory implements SchemeFactory {
    public QuotaApplyStandardScheme getScheme() {
      return new QuotaApplyStandardScheme();
    }
  }

  private static class QuotaApplyStandardScheme extends StandardScheme<QuotaApply> {

    public void read(libthrift091.protocol.TProtocol iprot, QuotaApply struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORG_ID
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.orgId = iprot.readString();
              struct.setOrgIdIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NUM
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.tableNum = iprot.readI32();
              struct.setTableNumIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_SIZE_IN_GB
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.tableSizeInGB = iprot.readI32();
              struct.setTableSizeInGBIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // READ_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.readQuota = iprot.readI64();
              struct.setReadQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WRITE_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.writeQuota = iprot.readI64();
              struct.setWriteQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SLAVE_READ_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.slaveReadQuota = iprot.readI64();
              struct.setSlaveReadQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SLAVE_WRITE_QUOTA
            if (schemeField.type == libthrift091.protocol.TType.I64) {
              struct.slaveWriteQuota = iprot.readI64();
              struct.setSlaveWriteQuotaIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COM_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.comName = iprot.readString();
              struct.setComNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APPLY_USER_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.applyUserName = iprot.readString();
              struct.setApplyUserNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == libthrift091.protocol.TType.I16) {
              struct.status = iprot.readI16();
              struct.setStatusIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // APPLY_ID
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.applyId = iprot.readString();
              struct.setApplyIdIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MESSAGE
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, QuotaApply struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orgId != null) {
        if (struct.isSetOrgId()) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTableNum()) {
        oprot.writeFieldBegin(TABLE_NUM_FIELD_DESC);
        oprot.writeI32(struct.tableNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTableSizeInGB()) {
        oprot.writeFieldBegin(TABLE_SIZE_IN_GB_FIELD_DESC);
        oprot.writeI32(struct.tableSizeInGB);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadQuota()) {
        oprot.writeFieldBegin(READ_QUOTA_FIELD_DESC);
        oprot.writeI64(struct.readQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWriteQuota()) {
        oprot.writeFieldBegin(WRITE_QUOTA_FIELD_DESC);
        oprot.writeI64(struct.writeQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSlaveReadQuota()) {
        oprot.writeFieldBegin(SLAVE_READ_QUOTA_FIELD_DESC);
        oprot.writeI64(struct.slaveReadQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSlaveWriteQuota()) {
        oprot.writeFieldBegin(SLAVE_WRITE_QUOTA_FIELD_DESC);
        oprot.writeI64(struct.slaveWriteQuota);
        oprot.writeFieldEnd();
      }
      if (struct.comName != null) {
        if (struct.isSetComName()) {
          oprot.writeFieldBegin(COM_NAME_FIELD_DESC);
          oprot.writeString(struct.comName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.applyUserName != null) {
        if (struct.isSetApplyUserName()) {
          oprot.writeFieldBegin(APPLY_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.applyUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI16(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.applyId != null) {
        if (struct.isSetApplyId()) {
          oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
          oprot.writeString(struct.applyId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuotaApplyTupleSchemeFactory implements SchemeFactory {
    public QuotaApplyTupleScheme getScheme() {
      return new QuotaApplyTupleScheme();
    }
  }

  private static class QuotaApplyTupleScheme extends TupleScheme<QuotaApply> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, QuotaApply struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrgId()) {
        optionals.set(0);
      }
      if (struct.isSetTableNum()) {
        optionals.set(1);
      }
      if (struct.isSetTableSizeInGB()) {
        optionals.set(2);
      }
      if (struct.isSetReadQuota()) {
        optionals.set(3);
      }
      if (struct.isSetWriteQuota()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetSlaveReadQuota()) {
        optionals.set(6);
      }
      if (struct.isSetSlaveWriteQuota()) {
        optionals.set(7);
      }
      if (struct.isSetComName()) {
        optionals.set(8);
      }
      if (struct.isSetApplyUserName()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetApplyId()) {
        optionals.set(11);
      }
      if (struct.isSetMessage()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetOrgId()) {
        oprot.writeString(struct.orgId);
      }
      if (struct.isSetTableNum()) {
        oprot.writeI32(struct.tableNum);
      }
      if (struct.isSetTableSizeInGB()) {
        oprot.writeI32(struct.tableSizeInGB);
      }
      if (struct.isSetReadQuota()) {
        oprot.writeI64(struct.readQuota);
      }
      if (struct.isSetWriteQuota()) {
        oprot.writeI64(struct.writeQuota);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetSlaveReadQuota()) {
        oprot.writeI64(struct.slaveReadQuota);
      }
      if (struct.isSetSlaveWriteQuota()) {
        oprot.writeI64(struct.slaveWriteQuota);
      }
      if (struct.isSetComName()) {
        oprot.writeString(struct.comName);
      }
      if (struct.isSetApplyUserName()) {
        oprot.writeString(struct.applyUserName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI16(struct.status);
      }
      if (struct.isSetApplyId()) {
        oprot.writeString(struct.applyId);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, QuotaApply struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.orgId = iprot.readString();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tableNum = iprot.readI32();
        struct.setTableNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tableSizeInGB = iprot.readI32();
        struct.setTableSizeInGBIsSet(true);
      }
      if (incoming.get(3)) {
        struct.readQuota = iprot.readI64();
        struct.setReadQuotaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.writeQuota = iprot.readI64();
        struct.setWriteQuotaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.slaveReadQuota = iprot.readI64();
        struct.setSlaveReadQuotaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.slaveWriteQuota = iprot.readI64();
        struct.setSlaveWriteQuotaIsSet(true);
      }
      if (incoming.get(8)) {
        struct.comName = iprot.readString();
        struct.setComNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.applyUserName = iprot.readString();
        struct.setApplyUserNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI16();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.applyId = iprot.readString();
        struct.setApplyIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

