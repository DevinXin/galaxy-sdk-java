/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emr.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-8")
public class ClusterState implements libthrift091.TBase<ClusterState, ClusterState._Fields>, java.io.Serializable, Cloneable, Comparable<ClusterState> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("ClusterState");

  private static final libthrift091.protocol.TField READY_FIELD_DESC = new libthrift091.protocol.TField("ready", libthrift091.protocol.TType.BOOL, (short)1);
  private static final libthrift091.protocol.TField TIMELINE_FIELD_DESC = new libthrift091.protocol.TField("timeline", libthrift091.protocol.TType.STRUCT, (short)2);
  private static final libthrift091.protocol.TField HOST_READY_FIELD_DESC = new libthrift091.protocol.TField("hostReady", libthrift091.protocol.TType.BOOL, (short)3);
  private static final libthrift091.protocol.TField SERVICE_READY_FIELD_DESC = new libthrift091.protocol.TField("serviceReady", libthrift091.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClusterStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClusterStateTupleSchemeFactory());
  }

  public boolean ready; // optional
  public Timeline timeline; // optional
  public boolean hostReady; // optional
  public boolean serviceReady; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    READY((short)1, "ready"),
    TIMELINE((short)2, "timeline"),
    HOST_READY((short)3, "hostReady"),
    SERVICE_READY((short)4, "serviceReady");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READY
          return READY;
        case 2: // TIMELINE
          return TIMELINE;
        case 3: // HOST_READY
          return HOST_READY;
        case 4: // SERVICE_READY
          return SERVICE_READY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READY_ISSET_ID = 0;
  private static final int __HOSTREADY_ISSET_ID = 1;
  private static final int __SERVICEREADY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.READY,_Fields.TIMELINE,_Fields.HOST_READY,_Fields.SERVICE_READY};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READY, new libthrift091.meta_data.FieldMetaData("ready", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMELINE, new libthrift091.meta_data.FieldMetaData("timeline", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, Timeline.class)));
    tmpMap.put(_Fields.HOST_READY, new libthrift091.meta_data.FieldMetaData("hostReady", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVICE_READY, new libthrift091.meta_data.FieldMetaData("serviceReady", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(ClusterState.class, metaDataMap);
  }

  public ClusterState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterState(ClusterState other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ready = other.ready;
    if (other.isSetTimeline()) {
      this.timeline = new Timeline(other.timeline);
    }
    this.hostReady = other.hostReady;
    this.serviceReady = other.serviceReady;
  }

  public ClusterState deepCopy() {
    return new ClusterState(this);
  }

  @Override
  public void clear() {
    setReadyIsSet(false);
    this.ready = false;
    this.timeline = null;
    setHostReadyIsSet(false);
    this.hostReady = false;
    setServiceReadyIsSet(false);
    this.serviceReady = false;
  }

  public boolean isReady() {
    return this.ready;
  }

  public ClusterState setReady(boolean ready) {
    this.ready = ready;
    setReadyIsSet(true);
    return this;
  }

  public void unsetReady() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READY_ISSET_ID);
  }

  /** Returns true if field ready is set (has been assigned a value) and false otherwise */
  public boolean isSetReady() {
    return EncodingUtils.testBit(__isset_bitfield, __READY_ISSET_ID);
  }

  public void setReadyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READY_ISSET_ID, value);
  }

  public Timeline getTimeline() {
    return this.timeline;
  }

  public ClusterState setTimeline(Timeline timeline) {
    this.timeline = timeline;
    return this;
  }

  public void unsetTimeline() {
    this.timeline = null;
  }

  /** Returns true if field timeline is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeline() {
    return this.timeline != null;
  }

  public void setTimelineIsSet(boolean value) {
    if (!value) {
      this.timeline = null;
    }
  }

  public boolean isHostReady() {
    return this.hostReady;
  }

  public ClusterState setHostReady(boolean hostReady) {
    this.hostReady = hostReady;
    setHostReadyIsSet(true);
    return this;
  }

  public void unsetHostReady() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOSTREADY_ISSET_ID);
  }

  /** Returns true if field hostReady is set (has been assigned a value) and false otherwise */
  public boolean isSetHostReady() {
    return EncodingUtils.testBit(__isset_bitfield, __HOSTREADY_ISSET_ID);
  }

  public void setHostReadyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOSTREADY_ISSET_ID, value);
  }

  public boolean isServiceReady() {
    return this.serviceReady;
  }

  public ClusterState setServiceReady(boolean serviceReady) {
    this.serviceReady = serviceReady;
    setServiceReadyIsSet(true);
    return this;
  }

  public void unsetServiceReady() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICEREADY_ISSET_ID);
  }

  /** Returns true if field serviceReady is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceReady() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICEREADY_ISSET_ID);
  }

  public void setServiceReadyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICEREADY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case READY:
      if (value == null) {
        unsetReady();
      } else {
        setReady((Boolean)value);
      }
      break;

    case TIMELINE:
      if (value == null) {
        unsetTimeline();
      } else {
        setTimeline((Timeline)value);
      }
      break;

    case HOST_READY:
      if (value == null) {
        unsetHostReady();
      } else {
        setHostReady((Boolean)value);
      }
      break;

    case SERVICE_READY:
      if (value == null) {
        unsetServiceReady();
      } else {
        setServiceReady((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case READY:
      return Boolean.valueOf(isReady());

    case TIMELINE:
      return getTimeline();

    case HOST_READY:
      return Boolean.valueOf(isHostReady());

    case SERVICE_READY:
      return Boolean.valueOf(isServiceReady());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case READY:
      return isSetReady();
    case TIMELINE:
      return isSetTimeline();
    case HOST_READY:
      return isSetHostReady();
    case SERVICE_READY:
      return isSetServiceReady();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClusterState)
      return this.equals((ClusterState)that);
    return false;
  }

  public boolean equals(ClusterState that) {
    if (that == null)
      return false;

    boolean this_present_ready = true && this.isSetReady();
    boolean that_present_ready = true && that.isSetReady();
    if (this_present_ready || that_present_ready) {
      if (!(this_present_ready && that_present_ready))
        return false;
      if (this.ready != that.ready)
        return false;
    }

    boolean this_present_timeline = true && this.isSetTimeline();
    boolean that_present_timeline = true && that.isSetTimeline();
    if (this_present_timeline || that_present_timeline) {
      if (!(this_present_timeline && that_present_timeline))
        return false;
      if (!this.timeline.equals(that.timeline))
        return false;
    }

    boolean this_present_hostReady = true && this.isSetHostReady();
    boolean that_present_hostReady = true && that.isSetHostReady();
    if (this_present_hostReady || that_present_hostReady) {
      if (!(this_present_hostReady && that_present_hostReady))
        return false;
      if (this.hostReady != that.hostReady)
        return false;
    }

    boolean this_present_serviceReady = true && this.isSetServiceReady();
    boolean that_present_serviceReady = true && that.isSetServiceReady();
    if (this_present_serviceReady || that_present_serviceReady) {
      if (!(this_present_serviceReady && that_present_serviceReady))
        return false;
      if (this.serviceReady != that.serviceReady)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ready = true && (isSetReady());
    list.add(present_ready);
    if (present_ready)
      list.add(ready);

    boolean present_timeline = true && (isSetTimeline());
    list.add(present_timeline);
    if (present_timeline)
      list.add(timeline);

    boolean present_hostReady = true && (isSetHostReady());
    list.add(present_hostReady);
    if (present_hostReady)
      list.add(hostReady);

    boolean present_serviceReady = true && (isSetServiceReady());
    list.add(present_serviceReady);
    if (present_serviceReady)
      list.add(serviceReady);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClusterState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReady()).compareTo(other.isSetReady());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReady()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.ready, other.ready);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeline()).compareTo(other.isSetTimeline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeline()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.timeline, other.timeline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostReady()).compareTo(other.isSetHostReady());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostReady()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.hostReady, other.hostReady);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceReady()).compareTo(other.isSetServiceReady());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceReady()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.serviceReady, other.serviceReady);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterState(");
    boolean first = true;

    if (isSetReady()) {
      sb.append("ready:");
      sb.append(this.ready);
      first = false;
    }
    if (isSetTimeline()) {
      if (!first) sb.append(", ");
      sb.append("timeline:");
      if (this.timeline == null) {
        sb.append("null");
      } else {
        sb.append(this.timeline);
      }
      first = false;
    }
    if (isSetHostReady()) {
      if (!first) sb.append(", ");
      sb.append("hostReady:");
      sb.append(this.hostReady);
      first = false;
    }
    if (isSetServiceReady()) {
      if (!first) sb.append(", ");
      sb.append("serviceReady:");
      sb.append(this.serviceReady);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
    if (timeline != null) {
      timeline.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClusterStateStandardSchemeFactory implements SchemeFactory {
    public ClusterStateStandardScheme getScheme() {
      return new ClusterStateStandardScheme();
    }
  }

  private static class ClusterStateStandardScheme extends StandardScheme<ClusterState> {

    public void read(libthrift091.protocol.TProtocol iprot, ClusterState struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // READY
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.ready = iprot.readBool();
              struct.setReadyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMELINE
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.timeline = new Timeline();
              struct.timeline.read(iprot);
              struct.setTimelineIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_READY
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.hostReady = iprot.readBool();
              struct.setHostReadyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVICE_READY
            if (schemeField.type == libthrift091.protocol.TType.BOOL) {
              struct.serviceReady = iprot.readBool();
              struct.setServiceReadyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, ClusterState struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetReady()) {
        oprot.writeFieldBegin(READY_FIELD_DESC);
        oprot.writeBool(struct.ready);
        oprot.writeFieldEnd();
      }
      if (struct.timeline != null) {
        if (struct.isSetTimeline()) {
          oprot.writeFieldBegin(TIMELINE_FIELD_DESC);
          struct.timeline.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHostReady()) {
        oprot.writeFieldBegin(HOST_READY_FIELD_DESC);
        oprot.writeBool(struct.hostReady);
        oprot.writeFieldEnd();
      }
      if (struct.isSetServiceReady()) {
        oprot.writeFieldBegin(SERVICE_READY_FIELD_DESC);
        oprot.writeBool(struct.serviceReady);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClusterStateTupleSchemeFactory implements SchemeFactory {
    public ClusterStateTupleScheme getScheme() {
      return new ClusterStateTupleScheme();
    }
  }

  private static class ClusterStateTupleScheme extends TupleScheme<ClusterState> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, ClusterState struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReady()) {
        optionals.set(0);
      }
      if (struct.isSetTimeline()) {
        optionals.set(1);
      }
      if (struct.isSetHostReady()) {
        optionals.set(2);
      }
      if (struct.isSetServiceReady()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetReady()) {
        oprot.writeBool(struct.ready);
      }
      if (struct.isSetTimeline()) {
        struct.timeline.write(oprot);
      }
      if (struct.isSetHostReady()) {
        oprot.writeBool(struct.hostReady);
      }
      if (struct.isSetServiceReady()) {
        oprot.writeBool(struct.serviceReady);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, ClusterState struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ready = iprot.readBool();
        struct.setReadyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeline = new Timeline();
        struct.timeline.read(iprot);
        struct.setTimelineIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostReady = iprot.readBool();
        struct.setHostReadyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serviceReady = iprot.readBool();
        struct.setServiceReadyIsSet(true);
      }
    }
  }

}

