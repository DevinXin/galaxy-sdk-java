/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emr.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-29")
public class GetQuotaResponse implements libthrift091.TBase<GetQuotaResponse, GetQuotaResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetQuotaResponse> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("GetQuotaResponse");

  private static final libthrift091.protocol.TField CLUSTER_LIMIT_FIELD_DESC = new libthrift091.protocol.TField("clusterLimit", libthrift091.protocol.TType.I32, (short)1);
  private static final libthrift091.protocol.TField CLUSTER_USED_FIELD_DESC = new libthrift091.protocol.TField("clusterUsed", libthrift091.protocol.TType.I32, (short)2);
  private static final libthrift091.protocol.TField INSTANCE_LIMIT_FIELD_DESC = new libthrift091.protocol.TField("instanceLimit", libthrift091.protocol.TType.I32, (short)3);
  private static final libthrift091.protocol.TField INSTANCE_USED_FIELD_DESC = new libthrift091.protocol.TField("instanceUsed", libthrift091.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetQuotaResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetQuotaResponseTupleSchemeFactory());
  }

  public int clusterLimit; // optional
  public int clusterUsed; // optional
  public int instanceLimit; // optional
  public int instanceUsed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    CLUSTER_LIMIT((short)1, "clusterLimit"),
    CLUSTER_USED((short)2, "clusterUsed"),
    INSTANCE_LIMIT((short)3, "instanceLimit"),
    INSTANCE_USED((short)4, "instanceUsed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER_LIMIT
          return CLUSTER_LIMIT;
        case 2: // CLUSTER_USED
          return CLUSTER_USED;
        case 3: // INSTANCE_LIMIT
          return INSTANCE_LIMIT;
        case 4: // INSTANCE_USED
          return INSTANCE_USED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLUSTERLIMIT_ISSET_ID = 0;
  private static final int __CLUSTERUSED_ISSET_ID = 1;
  private static final int __INSTANCELIMIT_ISSET_ID = 2;
  private static final int __INSTANCEUSED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLUSTER_LIMIT,_Fields.CLUSTER_USED,_Fields.INSTANCE_LIMIT,_Fields.INSTANCE_USED};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER_LIMIT, new libthrift091.meta_data.FieldMetaData("clusterLimit", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.CLUSTER_USED, new libthrift091.meta_data.FieldMetaData("clusterUsed", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.INSTANCE_LIMIT, new libthrift091.meta_data.FieldMetaData("instanceLimit", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.INSTANCE_USED, new libthrift091.meta_data.FieldMetaData("instanceUsed", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(GetQuotaResponse.class, metaDataMap);
  }

  public GetQuotaResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetQuotaResponse(GetQuotaResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.clusterLimit = other.clusterLimit;
    this.clusterUsed = other.clusterUsed;
    this.instanceLimit = other.instanceLimit;
    this.instanceUsed = other.instanceUsed;
  }

  public GetQuotaResponse deepCopy() {
    return new GetQuotaResponse(this);
  }

  @Override
  public void clear() {
    setClusterLimitIsSet(false);
    this.clusterLimit = 0;
    setClusterUsedIsSet(false);
    this.clusterUsed = 0;
    setInstanceLimitIsSet(false);
    this.instanceLimit = 0;
    setInstanceUsedIsSet(false);
    this.instanceUsed = 0;
  }

  public int getClusterLimit() {
    return this.clusterLimit;
  }

  public GetQuotaResponse setClusterLimit(int clusterLimit) {
    this.clusterLimit = clusterLimit;
    setClusterLimitIsSet(true);
    return this;
  }

  public void unsetClusterLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLUSTERLIMIT_ISSET_ID);
  }

  /** Returns true if field clusterLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLUSTERLIMIT_ISSET_ID);
  }

  public void setClusterLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLUSTERLIMIT_ISSET_ID, value);
  }

  public int getClusterUsed() {
    return this.clusterUsed;
  }

  public GetQuotaResponse setClusterUsed(int clusterUsed) {
    this.clusterUsed = clusterUsed;
    setClusterUsedIsSet(true);
    return this;
  }

  public void unsetClusterUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLUSTERUSED_ISSET_ID);
  }

  /** Returns true if field clusterUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __CLUSTERUSED_ISSET_ID);
  }

  public void setClusterUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLUSTERUSED_ISSET_ID, value);
  }

  public int getInstanceLimit() {
    return this.instanceLimit;
  }

  public GetQuotaResponse setInstanceLimit(int instanceLimit) {
    this.instanceLimit = instanceLimit;
    setInstanceLimitIsSet(true);
    return this;
  }

  public void unsetInstanceLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTANCELIMIT_ISSET_ID);
  }

  /** Returns true if field instanceLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTANCELIMIT_ISSET_ID);
  }

  public void setInstanceLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTANCELIMIT_ISSET_ID, value);
  }

  public int getInstanceUsed() {
    return this.instanceUsed;
  }

  public GetQuotaResponse setInstanceUsed(int instanceUsed) {
    this.instanceUsed = instanceUsed;
    setInstanceUsedIsSet(true);
    return this;
  }

  public void unsetInstanceUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTANCEUSED_ISSET_ID);
  }

  /** Returns true if field instanceUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTANCEUSED_ISSET_ID);
  }

  public void setInstanceUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTANCEUSED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER_LIMIT:
      if (value == null) {
        unsetClusterLimit();
      } else {
        setClusterLimit((Integer)value);
      }
      break;

    case CLUSTER_USED:
      if (value == null) {
        unsetClusterUsed();
      } else {
        setClusterUsed((Integer)value);
      }
      break;

    case INSTANCE_LIMIT:
      if (value == null) {
        unsetInstanceLimit();
      } else {
        setInstanceLimit((Integer)value);
      }
      break;

    case INSTANCE_USED:
      if (value == null) {
        unsetInstanceUsed();
      } else {
        setInstanceUsed((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER_LIMIT:
      return Integer.valueOf(getClusterLimit());

    case CLUSTER_USED:
      return Integer.valueOf(getClusterUsed());

    case INSTANCE_LIMIT:
      return Integer.valueOf(getInstanceLimit());

    case INSTANCE_USED:
      return Integer.valueOf(getInstanceUsed());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER_LIMIT:
      return isSetClusterLimit();
    case CLUSTER_USED:
      return isSetClusterUsed();
    case INSTANCE_LIMIT:
      return isSetInstanceLimit();
    case INSTANCE_USED:
      return isSetInstanceUsed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetQuotaResponse)
      return this.equals((GetQuotaResponse)that);
    return false;
  }

  public boolean equals(GetQuotaResponse that) {
    if (that == null)
      return false;

    boolean this_present_clusterLimit = true && this.isSetClusterLimit();
    boolean that_present_clusterLimit = true && that.isSetClusterLimit();
    if (this_present_clusterLimit || that_present_clusterLimit) {
      if (!(this_present_clusterLimit && that_present_clusterLimit))
        return false;
      if (this.clusterLimit != that.clusterLimit)
        return false;
    }

    boolean this_present_clusterUsed = true && this.isSetClusterUsed();
    boolean that_present_clusterUsed = true && that.isSetClusterUsed();
    if (this_present_clusterUsed || that_present_clusterUsed) {
      if (!(this_present_clusterUsed && that_present_clusterUsed))
        return false;
      if (this.clusterUsed != that.clusterUsed)
        return false;
    }

    boolean this_present_instanceLimit = true && this.isSetInstanceLimit();
    boolean that_present_instanceLimit = true && that.isSetInstanceLimit();
    if (this_present_instanceLimit || that_present_instanceLimit) {
      if (!(this_present_instanceLimit && that_present_instanceLimit))
        return false;
      if (this.instanceLimit != that.instanceLimit)
        return false;
    }

    boolean this_present_instanceUsed = true && this.isSetInstanceUsed();
    boolean that_present_instanceUsed = true && that.isSetInstanceUsed();
    if (this_present_instanceUsed || that_present_instanceUsed) {
      if (!(this_present_instanceUsed && that_present_instanceUsed))
        return false;
      if (this.instanceUsed != that.instanceUsed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clusterLimit = true && (isSetClusterLimit());
    list.add(present_clusterLimit);
    if (present_clusterLimit)
      list.add(clusterLimit);

    boolean present_clusterUsed = true && (isSetClusterUsed());
    list.add(present_clusterUsed);
    if (present_clusterUsed)
      list.add(clusterUsed);

    boolean present_instanceLimit = true && (isSetInstanceLimit());
    list.add(present_instanceLimit);
    if (present_instanceLimit)
      list.add(instanceLimit);

    boolean present_instanceUsed = true && (isSetInstanceUsed());
    list.add(present_instanceUsed);
    if (present_instanceUsed)
      list.add(instanceUsed);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetQuotaResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClusterLimit()).compareTo(other.isSetClusterLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterLimit()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.clusterLimit, other.clusterLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterUsed()).compareTo(other.isSetClusterUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterUsed()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.clusterUsed, other.clusterUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceLimit()).compareTo(other.isSetInstanceLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceLimit()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.instanceLimit, other.instanceLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceUsed()).compareTo(other.isSetInstanceUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceUsed()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.instanceUsed, other.instanceUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetQuotaResponse(");
    boolean first = true;

    if (isSetClusterLimit()) {
      sb.append("clusterLimit:");
      sb.append(this.clusterLimit);
      first = false;
    }
    if (isSetClusterUsed()) {
      if (!first) sb.append(", ");
      sb.append("clusterUsed:");
      sb.append(this.clusterUsed);
      first = false;
    }
    if (isSetInstanceLimit()) {
      if (!first) sb.append(", ");
      sb.append("instanceLimit:");
      sb.append(this.instanceLimit);
      first = false;
    }
    if (isSetInstanceUsed()) {
      if (!first) sb.append(", ");
      sb.append("instanceUsed:");
      sb.append(this.instanceUsed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetQuotaResponseStandardSchemeFactory implements SchemeFactory {
    public GetQuotaResponseStandardScheme getScheme() {
      return new GetQuotaResponseStandardScheme();
    }
  }

  private static class GetQuotaResponseStandardScheme extends StandardScheme<GetQuotaResponse> {

    public void read(libthrift091.protocol.TProtocol iprot, GetQuotaResponse struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER_LIMIT
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.clusterLimit = iprot.readI32();
              struct.setClusterLimitIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLUSTER_USED
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.clusterUsed = iprot.readI32();
              struct.setClusterUsedIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTANCE_LIMIT
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.instanceLimit = iprot.readI32();
              struct.setInstanceLimitIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INSTANCE_USED
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.instanceUsed = iprot.readI32();
              struct.setInstanceUsedIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, GetQuotaResponse struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetClusterLimit()) {
        oprot.writeFieldBegin(CLUSTER_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.clusterLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClusterUsed()) {
        oprot.writeFieldBegin(CLUSTER_USED_FIELD_DESC);
        oprot.writeI32(struct.clusterUsed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInstanceLimit()) {
        oprot.writeFieldBegin(INSTANCE_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.instanceLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInstanceUsed()) {
        oprot.writeFieldBegin(INSTANCE_USED_FIELD_DESC);
        oprot.writeI32(struct.instanceUsed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetQuotaResponseTupleSchemeFactory implements SchemeFactory {
    public GetQuotaResponseTupleScheme getScheme() {
      return new GetQuotaResponseTupleScheme();
    }
  }

  private static class GetQuotaResponseTupleScheme extends TupleScheme<GetQuotaResponse> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, GetQuotaResponse struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClusterLimit()) {
        optionals.set(0);
      }
      if (struct.isSetClusterUsed()) {
        optionals.set(1);
      }
      if (struct.isSetInstanceLimit()) {
        optionals.set(2);
      }
      if (struct.isSetInstanceUsed()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetClusterLimit()) {
        oprot.writeI32(struct.clusterLimit);
      }
      if (struct.isSetClusterUsed()) {
        oprot.writeI32(struct.clusterUsed);
      }
      if (struct.isSetInstanceLimit()) {
        oprot.writeI32(struct.instanceLimit);
      }
      if (struct.isSetInstanceUsed()) {
        oprot.writeI32(struct.instanceUsed);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, GetQuotaResponse struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.clusterLimit = iprot.readI32();
        struct.setClusterLimitIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clusterUsed = iprot.readI32();
        struct.setClusterUsedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instanceLimit = iprot.readI32();
        struct.setInstanceLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.instanceUsed = iprot.readI32();
        struct.setInstanceUsedIsSet(true);
      }
    }
  }

}

