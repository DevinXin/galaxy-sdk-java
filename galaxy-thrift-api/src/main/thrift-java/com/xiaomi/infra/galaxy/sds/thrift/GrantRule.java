/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.sds.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-8")
public class GrantRule implements libthrift091.TBase<GrantRule, GrantRule._Fields>, java.io.Serializable, Cloneable, Comparable<GrantRule> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("GrantRule");

  private static final libthrift091.protocol.TField GRANT_RULE_FIELD_DESC = new libthrift091.protocol.TField("grantRule", libthrift091.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GrantRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GrantRuleTupleSchemeFactory());
  }

  public Map<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> grantRule; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    GRANT_RULE((short)1, "grantRule");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GRANT_RULE
          return GRANT_RULE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GRANT_RULE, new libthrift091.meta_data.FieldMetaData("grantRule", libthrift091.TFieldRequirementType.DEFAULT, 
        new libthrift091.meta_data.MapMetaData(libthrift091.protocol.TType.MAP, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING), 
            new libthrift091.meta_data.MapMetaData(libthrift091.protocol.TType.MAP, 
                new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING), 
                new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
                    new libthrift091.meta_data.EnumMetaData(libthrift091.protocol.TType.ENUM, com.xiaomi.infra.galaxy.sds.thrift.Permission.class))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(GrantRule.class, metaDataMap);
  }

  public GrantRule() {
  }

  public GrantRule(
    Map<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> grantRule)
  {
    this();
    this.grantRule = grantRule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GrantRule(GrantRule other) {
    if (other.isSetGrantRule()) {
      Map<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> __this__grantRule = new HashMap<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>>(other.grantRule.size());
      for (Map.Entry<String, Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> other_element : other.grantRule.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> other_element_value = other_element.getValue();

        String __this__grantRule_copy_key = other_element_key;

        Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> __this__grantRule_copy_value = new HashMap<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>(other_element_value.size());
        for (Map.Entry<String, List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          List<com.xiaomi.infra.galaxy.sds.thrift.Permission> other_element_value_element_value = other_element_value_element.getValue();

          String __this__grantRule_copy_value_copy_key = other_element_value_element_key;

          List<com.xiaomi.infra.galaxy.sds.thrift.Permission> __this__grantRule_copy_value_copy_value = new ArrayList<com.xiaomi.infra.galaxy.sds.thrift.Permission>(other_element_value_element_value.size());
          for (com.xiaomi.infra.galaxy.sds.thrift.Permission other_element_value_element_value_element : other_element_value_element_value) {
            __this__grantRule_copy_value_copy_value.add(other_element_value_element_value_element);
          }

          __this__grantRule_copy_value.put(__this__grantRule_copy_value_copy_key, __this__grantRule_copy_value_copy_value);
        }

        __this__grantRule.put(__this__grantRule_copy_key, __this__grantRule_copy_value);
      }
      this.grantRule = __this__grantRule;
    }
  }

  public GrantRule deepCopy() {
    return new GrantRule(this);
  }

  @Override
  public void clear() {
    this.grantRule = null;
  }

  public int getGrantRuleSize() {
    return (this.grantRule == null) ? 0 : this.grantRule.size();
  }

  public void putToGrantRule(String key, Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> val) {
    if (this.grantRule == null) {
      this.grantRule = new HashMap<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>>();
    }
    this.grantRule.put(key, val);
  }

  public Map<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> getGrantRule() {
    return this.grantRule;
  }

  public GrantRule setGrantRule(Map<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> grantRule) {
    this.grantRule = grantRule;
    return this;
  }

  public void unsetGrantRule() {
    this.grantRule = null;
  }

  /** Returns true if field grantRule is set (has been assigned a value) and false otherwise */
  public boolean isSetGrantRule() {
    return this.grantRule != null;
  }

  public void setGrantRuleIsSet(boolean value) {
    if (!value) {
      this.grantRule = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GRANT_RULE:
      if (value == null) {
        unsetGrantRule();
      } else {
        setGrantRule((Map<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GRANT_RULE:
      return getGrantRule();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GRANT_RULE:
      return isSetGrantRule();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GrantRule)
      return this.equals((GrantRule)that);
    return false;
  }

  public boolean equals(GrantRule that) {
    if (that == null)
      return false;

    boolean this_present_grantRule = true && this.isSetGrantRule();
    boolean that_present_grantRule = true && that.isSetGrantRule();
    if (this_present_grantRule || that_present_grantRule) {
      if (!(this_present_grantRule && that_present_grantRule))
        return false;
      if (!this.grantRule.equals(that.grantRule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_grantRule = true && (isSetGrantRule());
    list.add(present_grantRule);
    if (present_grantRule)
      list.add(grantRule);

    return list.hashCode();
  }

  @Override
  public int compareTo(GrantRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGrantRule()).compareTo(other.isSetGrantRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrantRule()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.grantRule, other.grantRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GrantRule(");
    boolean first = true;

    sb.append("grantRule:");
    if (this.grantRule == null) {
      sb.append("null");
    } else {
      sb.append(this.grantRule);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GrantRuleStandardSchemeFactory implements SchemeFactory {
    public GrantRuleStandardScheme getScheme() {
      return new GrantRuleStandardScheme();
    }
  }

  private static class GrantRuleStandardScheme extends StandardScheme<GrantRule> {

    public void read(libthrift091.protocol.TProtocol iprot, GrantRule struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GRANT_RULE
            if (schemeField.type == libthrift091.protocol.TType.MAP) {
              {
                libthrift091.protocol.TMap _map70 = iprot.readMapBegin();
                struct.grantRule = new HashMap<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>>(2*_map70.size);
                String _key71;
                Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> _val72;
                for (int _i73 = 0; _i73 < _map70.size; ++_i73)
                {
                  _key71 = iprot.readString();
                  {
                    libthrift091.protocol.TMap _map74 = iprot.readMapBegin();
                    _val72 = new HashMap<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>(2*_map74.size);
                    String _key75;
                    List<com.xiaomi.infra.galaxy.sds.thrift.Permission> _val76;
                    for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                    {
                      _key75 = iprot.readString();
                      {
                        libthrift091.protocol.TList _list78 = iprot.readListBegin();
                        _val76 = new ArrayList<com.xiaomi.infra.galaxy.sds.thrift.Permission>(_list78.size);
                        com.xiaomi.infra.galaxy.sds.thrift.Permission _elem79;
                        for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                        {
                          _elem79 = com.xiaomi.infra.galaxy.sds.thrift.Permission.findByValue(iprot.readI32());
                          _val76.add(_elem79);
                        }
                        iprot.readListEnd();
                      }
                      _val72.put(_key75, _val76);
                    }
                    iprot.readMapEnd();
                  }
                  struct.grantRule.put(_key71, _val72);
                }
                iprot.readMapEnd();
              }
              struct.setGrantRuleIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, GrantRule struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.grantRule != null) {
        oprot.writeFieldBegin(GRANT_RULE_FIELD_DESC);
        {
          oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.MAP, struct.grantRule.size()));
          for (Map.Entry<String, Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> _iter81 : struct.grantRule.entrySet())
          {
            oprot.writeString(_iter81.getKey());
            {
              oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.LIST, _iter81.getValue().size()));
              for (Map.Entry<String, List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> _iter82 : _iter81.getValue().entrySet())
              {
                oprot.writeString(_iter82.getKey());
                {
                  oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.I32, _iter82.getValue().size()));
                  for (com.xiaomi.infra.galaxy.sds.thrift.Permission _iter83 : _iter82.getValue())
                  {
                    oprot.writeI32(_iter83.getValue());
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GrantRuleTupleSchemeFactory implements SchemeFactory {
    public GrantRuleTupleScheme getScheme() {
      return new GrantRuleTupleScheme();
    }
  }

  private static class GrantRuleTupleScheme extends TupleScheme<GrantRule> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, GrantRule struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGrantRule()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetGrantRule()) {
        {
          oprot.writeI32(struct.grantRule.size());
          for (Map.Entry<String, Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>> _iter84 : struct.grantRule.entrySet())
          {
            oprot.writeString(_iter84.getKey());
            {
              oprot.writeI32(_iter84.getValue().size());
              for (Map.Entry<String, List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> _iter85 : _iter84.getValue().entrySet())
              {
                oprot.writeString(_iter85.getKey());
                {
                  oprot.writeI32(_iter85.getValue().size());
                  for (com.xiaomi.infra.galaxy.sds.thrift.Permission _iter86 : _iter85.getValue())
                  {
                    oprot.writeI32(_iter86.getValue());
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, GrantRule struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          libthrift091.protocol.TMap _map87 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.MAP, iprot.readI32());
          struct.grantRule = new HashMap<String,Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>>(2*_map87.size);
          String _key88;
          Map<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>> _val89;
          for (int _i90 = 0; _i90 < _map87.size; ++_i90)
          {
            _key88 = iprot.readString();
            {
              libthrift091.protocol.TMap _map91 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.STRING, libthrift091.protocol.TType.LIST, iprot.readI32());
              _val89 = new HashMap<String,List<com.xiaomi.infra.galaxy.sds.thrift.Permission>>(2*_map91.size);
              String _key92;
              List<com.xiaomi.infra.galaxy.sds.thrift.Permission> _val93;
              for (int _i94 = 0; _i94 < _map91.size; ++_i94)
              {
                _key92 = iprot.readString();
                {
                  libthrift091.protocol.TList _list95 = new libthrift091.protocol.TList(libthrift091.protocol.TType.I32, iprot.readI32());
                  _val93 = new ArrayList<com.xiaomi.infra.galaxy.sds.thrift.Permission>(_list95.size);
                  com.xiaomi.infra.galaxy.sds.thrift.Permission _elem96;
                  for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                  {
                    _elem96 = com.xiaomi.infra.galaxy.sds.thrift.Permission.findByValue(iprot.readI32());
                    _val93.add(_elem96);
                  }
                }
                _val89.put(_key92, _val93);
              }
            }
            struct.grantRule.put(_key88, _val89);
          }
        }
        struct.setGrantRuleIsSet(true);
      }
    }
  }

}

