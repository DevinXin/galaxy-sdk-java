/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.sds.thrift;


import java.util.Map;
import java.util.HashMap;
import libthrift091.TEnum;

/**
 * 数据类型
 */
public enum DataType implements libthrift091.TEnum {
  /**
   * 布尔类型
   */
  BOOL(1),
  /**
   * 1字节整形
   */
  INT8(2),
  /**
   * 2字节整形
   */
  INT16(3),
  /**
   * 4字节整形
   */
  INT32(4),
  /**
   * 8字节整形
   */
  INT64(5),
  /**
   * 单精度浮点类型
   */
  FLOAT(6),
  /**
   * 双精度浮点类型
   */
  DOUBLE(7),
  /**
   * 字符串类型
   */
  STRING(8),
  /**
   * 编码二进制类型，可用做索引属性
   */
  BINARY(9),
  /**
   * 原生二进制类型，存储序列化开销最小，不能包含'0x00'数据，不可用做索引
   */
  RAWBINARY(10),
  /**
   * 布尔类型集合
   */
  BOOL_SET(100),
  /**
   * 1字节整形集合
   */
  INT8_SET(101),
  /**
   * 2字节整形集合
   */
  INT16_SET(102),
  /**
   * 4字节整形集合
   */
  INT32_SET(103),
  /**
   * 8字节整形集合
   */
  INT64_SET(104),
  /**
   * 单精度浮点集合
   */
  FLOAT_SET(105),
  /**
   * 双精度浮点集合
   */
  DOUBLE_SET(106),
  /**
   * 字符串集合
   */
  STRING_SET(107),
  /**
   * 编码二进制集合
   */
  BINARY_SET(108);

  private final int value;

  private DataType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static DataType findByValue(int value) { 
    switch (value) {
      case 1:
        return BOOL;
      case 2:
        return INT8;
      case 3:
        return INT16;
      case 4:
        return INT32;
      case 5:
        return INT64;
      case 6:
        return FLOAT;
      case 7:
        return DOUBLE;
      case 8:
        return STRING;
      case 9:
        return BINARY;
      case 10:
        return RAWBINARY;
      case 100:
        return BOOL_SET;
      case 101:
        return INT8_SET;
      case 102:
        return INT16_SET;
      case 103:
        return INT32_SET;
      case 104:
        return INT64_SET;
      case 105:
        return FLOAT_SET;
      case 106:
        return DOUBLE_SET;
      case 107:
        return STRING_SET;
      case 108:
        return BINARY_SET;
      default:
        return null;
    }
  }
}
