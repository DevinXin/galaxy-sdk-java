/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.sds.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-6")
public class Sinker implements libthrift091.TBase<Sinker, Sinker._Fields>, java.io.Serializable, Cloneable, Comparable<Sinker> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("Sinker");

  private static final libthrift091.protocol.TField SUBSCRIBED_TABLE_NAME_FIELD_DESC = new libthrift091.protocol.TField("subscribedTableName", libthrift091.protocol.TType.STRING, (short)1);
  private static final libthrift091.protocol.TField SUBSCRIBER_NAME_FIELD_DESC = new libthrift091.protocol.TField("subscriberName", libthrift091.protocol.TType.STRING, (short)2);
  private static final libthrift091.protocol.TField ENDPOINT_FIELD_DESC = new libthrift091.protocol.TField("endpoint", libthrift091.protocol.TType.STRING, (short)3);
  private static final libthrift091.protocol.TField SINKED_TABLE_NAME_FIELD_DESC = new libthrift091.protocol.TField("sinkedTableName", libthrift091.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SinkerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SinkerTupleSchemeFactory());
  }

  /**
   * 主集群订阅的表名
   */
  public String subscribedTableName; // optional
  /**
   * 订阅者名字
   */
  public String subscriberName; // optional
  /**
   * 主集群域名
   */
  public String endpoint; // optional
  /**
   * 备集群的表名
   */
  public String sinkedTableName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * 主集群订阅的表名
     */
    SUBSCRIBED_TABLE_NAME((short)1, "subscribedTableName"),
    /**
     * 订阅者名字
     */
    SUBSCRIBER_NAME((short)2, "subscriberName"),
    /**
     * 主集群域名
     */
    ENDPOINT((short)3, "endpoint"),
    /**
     * 备集群的表名
     */
    SINKED_TABLE_NAME((short)4, "sinkedTableName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBSCRIBED_TABLE_NAME
          return SUBSCRIBED_TABLE_NAME;
        case 2: // SUBSCRIBER_NAME
          return SUBSCRIBER_NAME;
        case 3: // ENDPOINT
          return ENDPOINT;
        case 4: // SINKED_TABLE_NAME
          return SINKED_TABLE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUBSCRIBED_TABLE_NAME,_Fields.SUBSCRIBER_NAME,_Fields.ENDPOINT,_Fields.SINKED_TABLE_NAME};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBSCRIBED_TABLE_NAME, new libthrift091.meta_data.FieldMetaData("subscribedTableName", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIBER_NAME, new libthrift091.meta_data.FieldMetaData("subscriberName", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDPOINT, new libthrift091.meta_data.FieldMetaData("endpoint", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINKED_TABLE_NAME, new libthrift091.meta_data.FieldMetaData("sinkedTableName", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(Sinker.class, metaDataMap);
  }

  public Sinker() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sinker(Sinker other) {
    if (other.isSetSubscribedTableName()) {
      this.subscribedTableName = other.subscribedTableName;
    }
    if (other.isSetSubscriberName()) {
      this.subscriberName = other.subscriberName;
    }
    if (other.isSetEndpoint()) {
      this.endpoint = other.endpoint;
    }
    if (other.isSetSinkedTableName()) {
      this.sinkedTableName = other.sinkedTableName;
    }
  }

  public Sinker deepCopy() {
    return new Sinker(this);
  }

  @Override
  public void clear() {
    this.subscribedTableName = null;
    this.subscriberName = null;
    this.endpoint = null;
    this.sinkedTableName = null;
  }

  /**
   * 主集群订阅的表名
   */
  public String getSubscribedTableName() {
    return this.subscribedTableName;
  }

  /**
   * 主集群订阅的表名
   */
  public Sinker setSubscribedTableName(String subscribedTableName) {
    this.subscribedTableName = subscribedTableName;
    return this;
  }

  public void unsetSubscribedTableName() {
    this.subscribedTableName = null;
  }

  /** Returns true if field subscribedTableName is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribedTableName() {
    return this.subscribedTableName != null;
  }

  public void setSubscribedTableNameIsSet(boolean value) {
    if (!value) {
      this.subscribedTableName = null;
    }
  }

  /**
   * 订阅者名字
   */
  public String getSubscriberName() {
    return this.subscriberName;
  }

  /**
   * 订阅者名字
   */
  public Sinker setSubscriberName(String subscriberName) {
    this.subscriberName = subscriberName;
    return this;
  }

  public void unsetSubscriberName() {
    this.subscriberName = null;
  }

  /** Returns true if field subscriberName is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriberName() {
    return this.subscriberName != null;
  }

  public void setSubscriberNameIsSet(boolean value) {
    if (!value) {
      this.subscriberName = null;
    }
  }

  /**
   * 主集群域名
   */
  public String getEndpoint() {
    return this.endpoint;
  }

  /**
   * 主集群域名
   */
  public Sinker setEndpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  public void unsetEndpoint() {
    this.endpoint = null;
  }

  /** Returns true if field endpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpoint() {
    return this.endpoint != null;
  }

  public void setEndpointIsSet(boolean value) {
    if (!value) {
      this.endpoint = null;
    }
  }

  /**
   * 备集群的表名
   */
  public String getSinkedTableName() {
    return this.sinkedTableName;
  }

  /**
   * 备集群的表名
   */
  public Sinker setSinkedTableName(String sinkedTableName) {
    this.sinkedTableName = sinkedTableName;
    return this;
  }

  public void unsetSinkedTableName() {
    this.sinkedTableName = null;
  }

  /** Returns true if field sinkedTableName is set (has been assigned a value) and false otherwise */
  public boolean isSetSinkedTableName() {
    return this.sinkedTableName != null;
  }

  public void setSinkedTableNameIsSet(boolean value) {
    if (!value) {
      this.sinkedTableName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBSCRIBED_TABLE_NAME:
      if (value == null) {
        unsetSubscribedTableName();
      } else {
        setSubscribedTableName((String)value);
      }
      break;

    case SUBSCRIBER_NAME:
      if (value == null) {
        unsetSubscriberName();
      } else {
        setSubscriberName((String)value);
      }
      break;

    case ENDPOINT:
      if (value == null) {
        unsetEndpoint();
      } else {
        setEndpoint((String)value);
      }
      break;

    case SINKED_TABLE_NAME:
      if (value == null) {
        unsetSinkedTableName();
      } else {
        setSinkedTableName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBSCRIBED_TABLE_NAME:
      return getSubscribedTableName();

    case SUBSCRIBER_NAME:
      return getSubscriberName();

    case ENDPOINT:
      return getEndpoint();

    case SINKED_TABLE_NAME:
      return getSinkedTableName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBSCRIBED_TABLE_NAME:
      return isSetSubscribedTableName();
    case SUBSCRIBER_NAME:
      return isSetSubscriberName();
    case ENDPOINT:
      return isSetEndpoint();
    case SINKED_TABLE_NAME:
      return isSetSinkedTableName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sinker)
      return this.equals((Sinker)that);
    return false;
  }

  public boolean equals(Sinker that) {
    if (that == null)
      return false;

    boolean this_present_subscribedTableName = true && this.isSetSubscribedTableName();
    boolean that_present_subscribedTableName = true && that.isSetSubscribedTableName();
    if (this_present_subscribedTableName || that_present_subscribedTableName) {
      if (!(this_present_subscribedTableName && that_present_subscribedTableName))
        return false;
      if (!this.subscribedTableName.equals(that.subscribedTableName))
        return false;
    }

    boolean this_present_subscriberName = true && this.isSetSubscriberName();
    boolean that_present_subscriberName = true && that.isSetSubscriberName();
    if (this_present_subscriberName || that_present_subscriberName) {
      if (!(this_present_subscriberName && that_present_subscriberName))
        return false;
      if (!this.subscriberName.equals(that.subscriberName))
        return false;
    }

    boolean this_present_endpoint = true && this.isSetEndpoint();
    boolean that_present_endpoint = true && that.isSetEndpoint();
    if (this_present_endpoint || that_present_endpoint) {
      if (!(this_present_endpoint && that_present_endpoint))
        return false;
      if (!this.endpoint.equals(that.endpoint))
        return false;
    }

    boolean this_present_sinkedTableName = true && this.isSetSinkedTableName();
    boolean that_present_sinkedTableName = true && that.isSetSinkedTableName();
    if (this_present_sinkedTableName || that_present_sinkedTableName) {
      if (!(this_present_sinkedTableName && that_present_sinkedTableName))
        return false;
      if (!this.sinkedTableName.equals(that.sinkedTableName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_subscribedTableName = true && (isSetSubscribedTableName());
    list.add(present_subscribedTableName);
    if (present_subscribedTableName)
      list.add(subscribedTableName);

    boolean present_subscriberName = true && (isSetSubscriberName());
    list.add(present_subscriberName);
    if (present_subscriberName)
      list.add(subscriberName);

    boolean present_endpoint = true && (isSetEndpoint());
    list.add(present_endpoint);
    if (present_endpoint)
      list.add(endpoint);

    boolean present_sinkedTableName = true && (isSetSinkedTableName());
    list.add(present_sinkedTableName);
    if (present_sinkedTableName)
      list.add(sinkedTableName);

    return list.hashCode();
  }

  @Override
  public int compareTo(Sinker other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubscribedTableName()).compareTo(other.isSetSubscribedTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribedTableName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.subscribedTableName, other.subscribedTableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscriberName()).compareTo(other.isSetSubscriberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriberName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.subscriberName, other.subscriberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndpoint()).compareTo(other.isSetEndpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoint()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.endpoint, other.endpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSinkedTableName()).compareTo(other.isSetSinkedTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinkedTableName()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.sinkedTableName, other.sinkedTableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sinker(");
    boolean first = true;

    if (isSetSubscribedTableName()) {
      sb.append("subscribedTableName:");
      if (this.subscribedTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.subscribedTableName);
      }
      first = false;
    }
    if (isSetSubscriberName()) {
      if (!first) sb.append(", ");
      sb.append("subscriberName:");
      if (this.subscriberName == null) {
        sb.append("null");
      } else {
        sb.append(this.subscriberName);
      }
      first = false;
    }
    if (isSetEndpoint()) {
      if (!first) sb.append(", ");
      sb.append("endpoint:");
      if (this.endpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endpoint);
      }
      first = false;
    }
    if (isSetSinkedTableName()) {
      if (!first) sb.append(", ");
      sb.append("sinkedTableName:");
      if (this.sinkedTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.sinkedTableName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SinkerStandardSchemeFactory implements SchemeFactory {
    public SinkerStandardScheme getScheme() {
      return new SinkerStandardScheme();
    }
  }

  private static class SinkerStandardScheme extends StandardScheme<Sinker> {

    public void read(libthrift091.protocol.TProtocol iprot, Sinker struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBSCRIBED_TABLE_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.subscribedTableName = iprot.readString();
              struct.setSubscribedTableNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBSCRIBER_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.subscriberName = iprot.readString();
              struct.setSubscriberNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENDPOINT
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.endpoint = iprot.readString();
              struct.setEndpointIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SINKED_TABLE_NAME
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.sinkedTableName = iprot.readString();
              struct.setSinkedTableNameIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, Sinker struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subscribedTableName != null) {
        if (struct.isSetSubscribedTableName()) {
          oprot.writeFieldBegin(SUBSCRIBED_TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.subscribedTableName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscriberName != null) {
        if (struct.isSetSubscriberName()) {
          oprot.writeFieldBegin(SUBSCRIBER_NAME_FIELD_DESC);
          oprot.writeString(struct.subscriberName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endpoint != null) {
        if (struct.isSetEndpoint()) {
          oprot.writeFieldBegin(ENDPOINT_FIELD_DESC);
          oprot.writeString(struct.endpoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sinkedTableName != null) {
        if (struct.isSetSinkedTableName()) {
          oprot.writeFieldBegin(SINKED_TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.sinkedTableName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SinkerTupleSchemeFactory implements SchemeFactory {
    public SinkerTupleScheme getScheme() {
      return new SinkerTupleScheme();
    }
  }

  private static class SinkerTupleScheme extends TupleScheme<Sinker> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, Sinker struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubscribedTableName()) {
        optionals.set(0);
      }
      if (struct.isSetSubscriberName()) {
        optionals.set(1);
      }
      if (struct.isSetEndpoint()) {
        optionals.set(2);
      }
      if (struct.isSetSinkedTableName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubscribedTableName()) {
        oprot.writeString(struct.subscribedTableName);
      }
      if (struct.isSetSubscriberName()) {
        oprot.writeString(struct.subscriberName);
      }
      if (struct.isSetEndpoint()) {
        oprot.writeString(struct.endpoint);
      }
      if (struct.isSetSinkedTableName()) {
        oprot.writeString(struct.sinkedTableName);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, Sinker struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.subscribedTableName = iprot.readString();
        struct.setSubscribedTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subscriberName = iprot.readString();
        struct.setSubscriberNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endpoint = iprot.readString();
        struct.setEndpointIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sinkedTableName = iprot.readString();
        struct.setSinkedTableNameIsSet(true);
      }
    }
  }

}

