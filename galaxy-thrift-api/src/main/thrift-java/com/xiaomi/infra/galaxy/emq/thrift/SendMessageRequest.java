/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emq.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-27")
public class SendMessageRequest implements libthrift091.TBase<SendMessageRequest, SendMessageRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SendMessageRequest> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("SendMessageRequest");

  private static final libthrift091.protocol.TField MESSAGE_BODY_FIELD_DESC = new libthrift091.protocol.TField("messageBody", libthrift091.protocol.TType.STRING, (short)1);
  private static final libthrift091.protocol.TField DELAY_SECONDS_FIELD_DESC = new libthrift091.protocol.TField("delaySeconds", libthrift091.protocol.TType.I32, (short)2);
  private static final libthrift091.protocol.TField INVISIBILITY_SECONDS_FIELD_DESC = new libthrift091.protocol.TField("invisibilitySeconds", libthrift091.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SendMessageRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SendMessageRequestTupleSchemeFactory());
  }

  /**
   * Message body;
   * 
   */
  public String messageBody; // required
  /**
   * Delay seconds for this message, this will overwrite delaySecond of this
   * queue, default 0s (0s ~ 15min);
   * 
   */
  public int delaySeconds; // optional
  /**
   * Invisibility seconds for this message, this will overwrite
   * invisibilitySeconds of this queue, default 30s (0s ~ 12hour);
   * 
   */
  public int invisibilitySeconds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    /**
     * Message body;
     * 
     */
    MESSAGE_BODY((short)1, "messageBody"),
    /**
     * Delay seconds for this message, this will overwrite delaySecond of this
     * queue, default 0s (0s ~ 15min);
     * 
     */
    DELAY_SECONDS((short)2, "delaySeconds"),
    /**
     * Invisibility seconds for this message, this will overwrite
     * invisibilitySeconds of this queue, default 30s (0s ~ 12hour);
     * 
     */
    INVISIBILITY_SECONDS((short)3, "invisibilitySeconds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_BODY
          return MESSAGE_BODY;
        case 2: // DELAY_SECONDS
          return DELAY_SECONDS;
        case 3: // INVISIBILITY_SECONDS
          return INVISIBILITY_SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELAYSECONDS_ISSET_ID = 0;
  private static final int __INVISIBILITYSECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DELAY_SECONDS,_Fields.INVISIBILITY_SECONDS};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_BODY, new libthrift091.meta_data.FieldMetaData("messageBody", libthrift091.TFieldRequirementType.REQUIRED, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELAY_SECONDS, new libthrift091.meta_data.FieldMetaData("delaySeconds", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.INVISIBILITY_SECONDS, new libthrift091.meta_data.FieldMetaData("invisibilitySeconds", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(SendMessageRequest.class, metaDataMap);
  }

  public SendMessageRequest() {
  }

  public SendMessageRequest(
    String messageBody)
  {
    this();
    this.messageBody = messageBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendMessageRequest(SendMessageRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessageBody()) {
      this.messageBody = other.messageBody;
    }
    this.delaySeconds = other.delaySeconds;
    this.invisibilitySeconds = other.invisibilitySeconds;
  }

  public SendMessageRequest deepCopy() {
    return new SendMessageRequest(this);
  }

  @Override
  public void clear() {
    this.messageBody = null;
    setDelaySecondsIsSet(false);
    this.delaySeconds = 0;
    setInvisibilitySecondsIsSet(false);
    this.invisibilitySeconds = 0;
  }

  /**
   * Message body;
   * 
   */
  public String getMessageBody() {
    return this.messageBody;
  }

  /**
   * Message body;
   * 
   */
  public SendMessageRequest setMessageBody(String messageBody) {
    this.messageBody = messageBody;
    return this;
  }

  public void unsetMessageBody() {
    this.messageBody = null;
  }

  /** Returns true if field messageBody is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageBody() {
    return this.messageBody != null;
  }

  public void setMessageBodyIsSet(boolean value) {
    if (!value) {
      this.messageBody = null;
    }
  }

  /**
   * Delay seconds for this message, this will overwrite delaySecond of this
   * queue, default 0s (0s ~ 15min);
   * 
   */
  public int getDelaySeconds() {
    return this.delaySeconds;
  }

  /**
   * Delay seconds for this message, this will overwrite delaySecond of this
   * queue, default 0s (0s ~ 15min);
   * 
   */
  public SendMessageRequest setDelaySeconds(int delaySeconds) {
    this.delaySeconds = delaySeconds;
    setDelaySecondsIsSet(true);
    return this;
  }

  public void unsetDelaySeconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELAYSECONDS_ISSET_ID);
  }

  /** Returns true if field delaySeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetDelaySeconds() {
    return EncodingUtils.testBit(__isset_bitfield, __DELAYSECONDS_ISSET_ID);
  }

  public void setDelaySecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELAYSECONDS_ISSET_ID, value);
  }

  /**
   * Invisibility seconds for this message, this will overwrite
   * invisibilitySeconds of this queue, default 30s (0s ~ 12hour);
   * 
   */
  public int getInvisibilitySeconds() {
    return this.invisibilitySeconds;
  }

  /**
   * Invisibility seconds for this message, this will overwrite
   * invisibilitySeconds of this queue, default 30s (0s ~ 12hour);
   * 
   */
  public SendMessageRequest setInvisibilitySeconds(int invisibilitySeconds) {
    this.invisibilitySeconds = invisibilitySeconds;
    setInvisibilitySecondsIsSet(true);
    return this;
  }

  public void unsetInvisibilitySeconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVISIBILITYSECONDS_ISSET_ID);
  }

  /** Returns true if field invisibilitySeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetInvisibilitySeconds() {
    return EncodingUtils.testBit(__isset_bitfield, __INVISIBILITYSECONDS_ISSET_ID);
  }

  public void setInvisibilitySecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVISIBILITYSECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_BODY:
      if (value == null) {
        unsetMessageBody();
      } else {
        setMessageBody((String)value);
      }
      break;

    case DELAY_SECONDS:
      if (value == null) {
        unsetDelaySeconds();
      } else {
        setDelaySeconds((Integer)value);
      }
      break;

    case INVISIBILITY_SECONDS:
      if (value == null) {
        unsetInvisibilitySeconds();
      } else {
        setInvisibilitySeconds((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_BODY:
      return getMessageBody();

    case DELAY_SECONDS:
      return Integer.valueOf(getDelaySeconds());

    case INVISIBILITY_SECONDS:
      return Integer.valueOf(getInvisibilitySeconds());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_BODY:
      return isSetMessageBody();
    case DELAY_SECONDS:
      return isSetDelaySeconds();
    case INVISIBILITY_SECONDS:
      return isSetInvisibilitySeconds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SendMessageRequest)
      return this.equals((SendMessageRequest)that);
    return false;
  }

  public boolean equals(SendMessageRequest that) {
    if (that == null)
      return false;

    boolean this_present_messageBody = true && this.isSetMessageBody();
    boolean that_present_messageBody = true && that.isSetMessageBody();
    if (this_present_messageBody || that_present_messageBody) {
      if (!(this_present_messageBody && that_present_messageBody))
        return false;
      if (!this.messageBody.equals(that.messageBody))
        return false;
    }

    boolean this_present_delaySeconds = true && this.isSetDelaySeconds();
    boolean that_present_delaySeconds = true && that.isSetDelaySeconds();
    if (this_present_delaySeconds || that_present_delaySeconds) {
      if (!(this_present_delaySeconds && that_present_delaySeconds))
        return false;
      if (this.delaySeconds != that.delaySeconds)
        return false;
    }

    boolean this_present_invisibilitySeconds = true && this.isSetInvisibilitySeconds();
    boolean that_present_invisibilitySeconds = true && that.isSetInvisibilitySeconds();
    if (this_present_invisibilitySeconds || that_present_invisibilitySeconds) {
      if (!(this_present_invisibilitySeconds && that_present_invisibilitySeconds))
        return false;
      if (this.invisibilitySeconds != that.invisibilitySeconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_messageBody = true && (isSetMessageBody());
    list.add(present_messageBody);
    if (present_messageBody)
      list.add(messageBody);

    boolean present_delaySeconds = true && (isSetDelaySeconds());
    list.add(present_delaySeconds);
    if (present_delaySeconds)
      list.add(delaySeconds);

    boolean present_invisibilitySeconds = true && (isSetInvisibilitySeconds());
    list.add(present_invisibilitySeconds);
    if (present_invisibilitySeconds)
      list.add(invisibilitySeconds);

    return list.hashCode();
  }

  @Override
  public int compareTo(SendMessageRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessageBody()).compareTo(other.isSetMessageBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageBody()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.messageBody, other.messageBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelaySeconds()).compareTo(other.isSetDelaySeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelaySeconds()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.delaySeconds, other.delaySeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvisibilitySeconds()).compareTo(other.isSetInvisibilitySeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvisibilitySeconds()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.invisibilitySeconds, other.invisibilitySeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SendMessageRequest(");
    boolean first = true;

    sb.append("messageBody:");
    if (this.messageBody == null) {
      sb.append("null");
    } else {
      sb.append(this.messageBody);
    }
    first = false;
    if (isSetDelaySeconds()) {
      if (!first) sb.append(", ");
      sb.append("delaySeconds:");
      sb.append(this.delaySeconds);
      first = false;
    }
    if (isSetInvisibilitySeconds()) {
      if (!first) sb.append(", ");
      sb.append("invisibilitySeconds:");
      sb.append(this.invisibilitySeconds);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    if (messageBody == null) {
      throw new libthrift091.protocol.TProtocolException("Required field 'messageBody' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendMessageRequestStandardSchemeFactory implements SchemeFactory {
    public SendMessageRequestStandardScheme getScheme() {
      return new SendMessageRequestStandardScheme();
    }
  }

  private static class SendMessageRequestStandardScheme extends StandardScheme<SendMessageRequest> {

    public void read(libthrift091.protocol.TProtocol iprot, SendMessageRequest struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_BODY
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.messageBody = iprot.readString();
              struct.setMessageBodyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DELAY_SECONDS
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.delaySeconds = iprot.readI32();
              struct.setDelaySecondsIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVISIBILITY_SECONDS
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.invisibilitySeconds = iprot.readI32();
              struct.setInvisibilitySecondsIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, SendMessageRequest struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.messageBody != null) {
        oprot.writeFieldBegin(MESSAGE_BODY_FIELD_DESC);
        oprot.writeString(struct.messageBody);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDelaySeconds()) {
        oprot.writeFieldBegin(DELAY_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.delaySeconds);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInvisibilitySeconds()) {
        oprot.writeFieldBegin(INVISIBILITY_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.invisibilitySeconds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendMessageRequestTupleSchemeFactory implements SchemeFactory {
    public SendMessageRequestTupleScheme getScheme() {
      return new SendMessageRequestTupleScheme();
    }
  }

  private static class SendMessageRequestTupleScheme extends TupleScheme<SendMessageRequest> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, SendMessageRequest struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.messageBody);
      BitSet optionals = new BitSet();
      if (struct.isSetDelaySeconds()) {
        optionals.set(0);
      }
      if (struct.isSetInvisibilitySeconds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDelaySeconds()) {
        oprot.writeI32(struct.delaySeconds);
      }
      if (struct.isSetInvisibilitySeconds()) {
        oprot.writeI32(struct.invisibilitySeconds);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, SendMessageRequest struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.messageBody = iprot.readString();
      struct.setMessageBodyIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.delaySeconds = iprot.readI32();
        struct.setDelaySecondsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.invisibilitySeconds = iprot.readI32();
        struct.setInvisibilitySecondsIsSet(true);
      }
    }
  }

}

