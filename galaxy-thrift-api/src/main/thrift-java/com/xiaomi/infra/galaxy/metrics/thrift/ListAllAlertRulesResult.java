/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.metrics.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-2")
public class ListAllAlertRulesResult implements libthrift091.TBase<ListAllAlertRulesResult, ListAllAlertRulesResult._Fields>, java.io.Serializable, Cloneable, Comparable<ListAllAlertRulesResult> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("ListAllAlertRulesResult");

  private static final libthrift091.protocol.TField ALERT_RULES_FIELD_DESC = new libthrift091.protocol.TField("alertRules", libthrift091.protocol.TType.LIST, (short)1);
  private static final libthrift091.protocol.TField NEXT_START_KEY_FIELD_DESC = new libthrift091.protocol.TField("nextStartKey", libthrift091.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListAllAlertRulesResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListAllAlertRulesResultTupleSchemeFactory());
  }

  public List<AlertRule> alertRules; // optional
  public AlertRuleKey nextStartKey; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    ALERT_RULES((short)1, "alertRules"),
    NEXT_START_KEY((short)2, "nextStartKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALERT_RULES
          return ALERT_RULES;
        case 2: // NEXT_START_KEY
          return NEXT_START_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ALERT_RULES,_Fields.NEXT_START_KEY};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALERT_RULES, new libthrift091.meta_data.FieldMetaData("alertRules", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, AlertRule.class))));
    tmpMap.put(_Fields.NEXT_START_KEY, new libthrift091.meta_data.FieldMetaData("nextStartKey", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, AlertRuleKey.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(ListAllAlertRulesResult.class, metaDataMap);
  }

  public ListAllAlertRulesResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListAllAlertRulesResult(ListAllAlertRulesResult other) {
    if (other.isSetAlertRules()) {
      List<AlertRule> __this__alertRules = new ArrayList<AlertRule>(other.alertRules.size());
      for (AlertRule other_element : other.alertRules) {
        __this__alertRules.add(new AlertRule(other_element));
      }
      this.alertRules = __this__alertRules;
    }
    if (other.isSetNextStartKey()) {
      this.nextStartKey = new AlertRuleKey(other.nextStartKey);
    }
  }

  public ListAllAlertRulesResult deepCopy() {
    return new ListAllAlertRulesResult(this);
  }

  @Override
  public void clear() {
    this.alertRules = null;
    this.nextStartKey = null;
  }

  public int getAlertRulesSize() {
    return (this.alertRules == null) ? 0 : this.alertRules.size();
  }

  public java.util.Iterator<AlertRule> getAlertRulesIterator() {
    return (this.alertRules == null) ? null : this.alertRules.iterator();
  }

  public void addToAlertRules(AlertRule elem) {
    if (this.alertRules == null) {
      this.alertRules = new ArrayList<AlertRule>();
    }
    this.alertRules.add(elem);
  }

  public List<AlertRule> getAlertRules() {
    return this.alertRules;
  }

  public ListAllAlertRulesResult setAlertRules(List<AlertRule> alertRules) {
    this.alertRules = alertRules;
    return this;
  }

  public void unsetAlertRules() {
    this.alertRules = null;
  }

  /** Returns true if field alertRules is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertRules() {
    return this.alertRules != null;
  }

  public void setAlertRulesIsSet(boolean value) {
    if (!value) {
      this.alertRules = null;
    }
  }

  public AlertRuleKey getNextStartKey() {
    return this.nextStartKey;
  }

  public ListAllAlertRulesResult setNextStartKey(AlertRuleKey nextStartKey) {
    this.nextStartKey = nextStartKey;
    return this;
  }

  public void unsetNextStartKey() {
    this.nextStartKey = null;
  }

  /** Returns true if field nextStartKey is set (has been assigned a value) and false otherwise */
  public boolean isSetNextStartKey() {
    return this.nextStartKey != null;
  }

  public void setNextStartKeyIsSet(boolean value) {
    if (!value) {
      this.nextStartKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALERT_RULES:
      if (value == null) {
        unsetAlertRules();
      } else {
        setAlertRules((List<AlertRule>)value);
      }
      break;

    case NEXT_START_KEY:
      if (value == null) {
        unsetNextStartKey();
      } else {
        setNextStartKey((AlertRuleKey)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALERT_RULES:
      return getAlertRules();

    case NEXT_START_KEY:
      return getNextStartKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALERT_RULES:
      return isSetAlertRules();
    case NEXT_START_KEY:
      return isSetNextStartKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListAllAlertRulesResult)
      return this.equals((ListAllAlertRulesResult)that);
    return false;
  }

  public boolean equals(ListAllAlertRulesResult that) {
    if (that == null)
      return false;

    boolean this_present_alertRules = true && this.isSetAlertRules();
    boolean that_present_alertRules = true && that.isSetAlertRules();
    if (this_present_alertRules || that_present_alertRules) {
      if (!(this_present_alertRules && that_present_alertRules))
        return false;
      if (!this.alertRules.equals(that.alertRules))
        return false;
    }

    boolean this_present_nextStartKey = true && this.isSetNextStartKey();
    boolean that_present_nextStartKey = true && that.isSetNextStartKey();
    if (this_present_nextStartKey || that_present_nextStartKey) {
      if (!(this_present_nextStartKey && that_present_nextStartKey))
        return false;
      if (!this.nextStartKey.equals(that.nextStartKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_alertRules = true && (isSetAlertRules());
    list.add(present_alertRules);
    if (present_alertRules)
      list.add(alertRules);

    boolean present_nextStartKey = true && (isSetNextStartKey());
    list.add(present_nextStartKey);
    if (present_nextStartKey)
      list.add(nextStartKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListAllAlertRulesResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlertRules()).compareTo(other.isSetAlertRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertRules()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.alertRules, other.alertRules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextStartKey()).compareTo(other.isSetNextStartKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextStartKey()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.nextStartKey, other.nextStartKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListAllAlertRulesResult(");
    boolean first = true;

    if (isSetAlertRules()) {
      sb.append("alertRules:");
      if (this.alertRules == null) {
        sb.append("null");
      } else {
        sb.append(this.alertRules);
      }
      first = false;
    }
    if (isSetNextStartKey()) {
      if (!first) sb.append(", ");
      sb.append("nextStartKey:");
      if (this.nextStartKey == null) {
        sb.append("null");
      } else {
        sb.append(this.nextStartKey);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
    if (nextStartKey != null) {
      nextStartKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListAllAlertRulesResultStandardSchemeFactory implements SchemeFactory {
    public ListAllAlertRulesResultStandardScheme getScheme() {
      return new ListAllAlertRulesResultStandardScheme();
    }
  }

  private static class ListAllAlertRulesResultStandardScheme extends StandardScheme<ListAllAlertRulesResult> {

    public void read(libthrift091.protocol.TProtocol iprot, ListAllAlertRulesResult struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALERT_RULES
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list16 = iprot.readListBegin();
                struct.alertRules = new ArrayList<AlertRule>(_list16.size);
                AlertRule _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new AlertRule();
                  _elem17.read(iprot);
                  struct.alertRules.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAlertRulesIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEXT_START_KEY
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.nextStartKey = new AlertRuleKey();
              struct.nextStartKey.read(iprot);
              struct.setNextStartKeyIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, ListAllAlertRulesResult struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.alertRules != null) {
        if (struct.isSetAlertRules()) {
          oprot.writeFieldBegin(ALERT_RULES_FIELD_DESC);
          {
            oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, struct.alertRules.size()));
            for (AlertRule _iter19 : struct.alertRules)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextStartKey != null) {
        if (struct.isSetNextStartKey()) {
          oprot.writeFieldBegin(NEXT_START_KEY_FIELD_DESC);
          struct.nextStartKey.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListAllAlertRulesResultTupleSchemeFactory implements SchemeFactory {
    public ListAllAlertRulesResultTupleScheme getScheme() {
      return new ListAllAlertRulesResultTupleScheme();
    }
  }

  private static class ListAllAlertRulesResultTupleScheme extends TupleScheme<ListAllAlertRulesResult> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, ListAllAlertRulesResult struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAlertRules()) {
        optionals.set(0);
      }
      if (struct.isSetNextStartKey()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAlertRules()) {
        {
          oprot.writeI32(struct.alertRules.size());
          for (AlertRule _iter20 : struct.alertRules)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetNextStartKey()) {
        struct.nextStartKey.write(oprot);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, ListAllAlertRulesResult struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          libthrift091.protocol.TList _list21 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
          struct.alertRules = new ArrayList<AlertRule>(_list21.size);
          AlertRule _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new AlertRule();
            _elem22.read(iprot);
            struct.alertRules.add(_elem22);
          }
        }
        struct.setAlertRulesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nextStartKey = new AlertRuleKey();
        struct.nextStartKey.read(iprot);
        struct.setNextStartKeyIsSet(true);
      }
    }
  }

}

