/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emr.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-8")
public class Timeline implements libthrift091.TBase<Timeline, Timeline._Fields>, java.io.Serializable, Cloneable, Comparable<Timeline> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("Timeline");

  private static final libthrift091.protocol.TField CREATION_TIME_FIELD_DESC = new libthrift091.protocol.TField("creationTime", libthrift091.protocol.TType.I32, (short)1);
  private static final libthrift091.protocol.TField READY_TIME_FIELD_DESC = new libthrift091.protocol.TField("readyTime", libthrift091.protocol.TType.I32, (short)2);
  private static final libthrift091.protocol.TField END_TIME_FIELD_DESC = new libthrift091.protocol.TField("endTime", libthrift091.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimelineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimelineTupleSchemeFactory());
  }

  public int creationTime; // optional
  public int readyTime; // optional
  public int endTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    CREATION_TIME((short)1, "creationTime"),
    READY_TIME((short)2, "readyTime"),
    END_TIME((short)3, "endTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATION_TIME
          return CREATION_TIME;
        case 2: // READY_TIME
          return READY_TIME;
        case 3: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIONTIME_ISSET_ID = 0;
  private static final int __READYTIME_ISSET_ID = 1;
  private static final int __ENDTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CREATION_TIME,_Fields.READY_TIME,_Fields.END_TIME};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATION_TIME, new libthrift091.meta_data.FieldMetaData("creationTime", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.READY_TIME, new libthrift091.meta_data.FieldMetaData("readyTime", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    tmpMap.put(_Fields.END_TIME, new libthrift091.meta_data.FieldMetaData("endTime", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(Timeline.class, metaDataMap);
  }

  public Timeline() {
    this.creationTime = 0;

    this.readyTime = 0;

    this.endTime = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Timeline(Timeline other) {
    __isset_bitfield = other.__isset_bitfield;
    this.creationTime = other.creationTime;
    this.readyTime = other.readyTime;
    this.endTime = other.endTime;
  }

  public Timeline deepCopy() {
    return new Timeline(this);
  }

  @Override
  public void clear() {
    this.creationTime = 0;

    this.readyTime = 0;

    this.endTime = 0;

  }

  public int getCreationTime() {
    return this.creationTime;
  }

  public Timeline setCreationTime(int creationTime) {
    this.creationTime = creationTime;
    setCreationTimeIsSet(true);
    return this;
  }

  public void unsetCreationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  /** Returns true if field creationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  public void setCreationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIME_ISSET_ID, value);
  }

  public int getReadyTime() {
    return this.readyTime;
  }

  public Timeline setReadyTime(int readyTime) {
    this.readyTime = readyTime;
    setReadyTimeIsSet(true);
    return this;
  }

  public void unsetReadyTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READYTIME_ISSET_ID);
  }

  /** Returns true if field readyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReadyTime() {
    return EncodingUtils.testBit(__isset_bitfield, __READYTIME_ISSET_ID);
  }

  public void setReadyTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READYTIME_ISSET_ID, value);
  }

  public int getEndTime() {
    return this.endTime;
  }

  public Timeline setEndTime(int endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATION_TIME:
      if (value == null) {
        unsetCreationTime();
      } else {
        setCreationTime((Integer)value);
      }
      break;

    case READY_TIME:
      if (value == null) {
        unsetReadyTime();
      } else {
        setReadyTime((Integer)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATION_TIME:
      return Integer.valueOf(getCreationTime());

    case READY_TIME:
      return Integer.valueOf(getReadyTime());

    case END_TIME:
      return Integer.valueOf(getEndTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATION_TIME:
      return isSetCreationTime();
    case READY_TIME:
      return isSetReadyTime();
    case END_TIME:
      return isSetEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Timeline)
      return this.equals((Timeline)that);
    return false;
  }

  public boolean equals(Timeline that) {
    if (that == null)
      return false;

    boolean this_present_creationTime = true && this.isSetCreationTime();
    boolean that_present_creationTime = true && that.isSetCreationTime();
    if (this_present_creationTime || that_present_creationTime) {
      if (!(this_present_creationTime && that_present_creationTime))
        return false;
      if (this.creationTime != that.creationTime)
        return false;
    }

    boolean this_present_readyTime = true && this.isSetReadyTime();
    boolean that_present_readyTime = true && that.isSetReadyTime();
    if (this_present_readyTime || that_present_readyTime) {
      if (!(this_present_readyTime && that_present_readyTime))
        return false;
      if (this.readyTime != that.readyTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_creationTime = true && (isSetCreationTime());
    list.add(present_creationTime);
    if (present_creationTime)
      list.add(creationTime);

    boolean present_readyTime = true && (isSetReadyTime());
    list.add(present_readyTime);
    if (present_readyTime)
      list.add(readyTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(Timeline other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCreationTime()).compareTo(other.isSetCreationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTime()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.creationTime, other.creationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadyTime()).compareTo(other.isSetReadyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadyTime()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.readyTime, other.readyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Timeline(");
    boolean first = true;

    if (isSetCreationTime()) {
      sb.append("creationTime:");
      sb.append(this.creationTime);
      first = false;
    }
    if (isSetReadyTime()) {
      if (!first) sb.append(", ");
      sb.append("readyTime:");
      sb.append(this.readyTime);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimelineStandardSchemeFactory implements SchemeFactory {
    public TimelineStandardScheme getScheme() {
      return new TimelineStandardScheme();
    }
  }

  private static class TimelineStandardScheme extends StandardScheme<Timeline> {

    public void read(libthrift091.protocol.TProtocol iprot, Timeline struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATION_TIME
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.creationTime = iprot.readI32();
              struct.setCreationTimeIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // READY_TIME
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.readyTime = iprot.readI32();
              struct.setReadyTimeIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == libthrift091.protocol.TType.I32) {
              struct.endTime = iprot.readI32();
              struct.setEndTimeIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, Timeline struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCreationTime()) {
        oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
        oprot.writeI32(struct.creationTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadyTime()) {
        oprot.writeFieldBegin(READY_TIME_FIELD_DESC);
        oprot.writeI32(struct.readyTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimelineTupleSchemeFactory implements SchemeFactory {
    public TimelineTupleScheme getScheme() {
      return new TimelineTupleScheme();
    }
  }

  private static class TimelineTupleScheme extends TupleScheme<Timeline> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, Timeline struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCreationTime()) {
        optionals.set(0);
      }
      if (struct.isSetReadyTime()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCreationTime()) {
        oprot.writeI32(struct.creationTime);
      }
      if (struct.isSetReadyTime()) {
        oprot.writeI32(struct.readyTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI32(struct.endTime);
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, Timeline struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.creationTime = iprot.readI32();
        struct.setCreationTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.readyTime = iprot.readI32();
        struct.setReadyTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = iprot.readI32();
        struct.setEndTimeIsSet(true);
      }
    }
  }

}

