/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.emr.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-26")
public class DetailBillItem implements libthrift091.TBase<DetailBillItem, DetailBillItem._Fields>, java.io.Serializable, Cloneable, Comparable<DetailBillItem> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("DetailBillItem");

  private static final libthrift091.protocol.TField CLASSIFIER_FIELD_DESC = new libthrift091.protocol.TField("classifier", libthrift091.protocol.TType.STRING, (short)1);
  private static final libthrift091.protocol.TField TOTAL_COST_FIELD_DESC = new libthrift091.protocol.TField("totalCost", libthrift091.protocol.TType.DOUBLE, (short)2);
  private static final libthrift091.protocol.TField SUB_BILL_LIST_FIELD_DESC = new libthrift091.protocol.TField("subBillList", libthrift091.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DetailBillItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DetailBillItemTupleSchemeFactory());
  }

  public String classifier; // required
  public double totalCost; // required
  public List<BillItem> subBillList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    CLASSIFIER((short)1, "classifier"),
    TOTAL_COST((short)2, "totalCost"),
    SUB_BILL_LIST((short)3, "subBillList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASSIFIER
          return CLASSIFIER;
        case 2: // TOTAL_COST
          return TOTAL_COST;
        case 3: // SUB_BILL_LIST
          return SUB_BILL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALCOST_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASSIFIER, new libthrift091.meta_data.FieldMetaData("classifier", libthrift091.TFieldRequirementType.DEFAULT, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COST, new libthrift091.meta_data.FieldMetaData("totalCost", libthrift091.TFieldRequirementType.DEFAULT, 
        new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUB_BILL_LIST, new libthrift091.meta_data.FieldMetaData("subBillList", libthrift091.TFieldRequirementType.DEFAULT, 
        new libthrift091.meta_data.ListMetaData(libthrift091.protocol.TType.LIST, 
            new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, BillItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(DetailBillItem.class, metaDataMap);
  }

  public DetailBillItem() {
  }

  public DetailBillItem(
    String classifier,
    double totalCost,
    List<BillItem> subBillList)
  {
    this();
    this.classifier = classifier;
    this.totalCost = totalCost;
    setTotalCostIsSet(true);
    this.subBillList = subBillList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetailBillItem(DetailBillItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClassifier()) {
      this.classifier = other.classifier;
    }
    this.totalCost = other.totalCost;
    if (other.isSetSubBillList()) {
      List<BillItem> __this__subBillList = new ArrayList<BillItem>(other.subBillList.size());
      for (BillItem other_element : other.subBillList) {
        __this__subBillList.add(new BillItem(other_element));
      }
      this.subBillList = __this__subBillList;
    }
  }

  public DetailBillItem deepCopy() {
    return new DetailBillItem(this);
  }

  @Override
  public void clear() {
    this.classifier = null;
    setTotalCostIsSet(false);
    this.totalCost = 0.0;
    this.subBillList = null;
  }

  public String getClassifier() {
    return this.classifier;
  }

  public DetailBillItem setClassifier(String classifier) {
    this.classifier = classifier;
    return this;
  }

  public void unsetClassifier() {
    this.classifier = null;
  }

  /** Returns true if field classifier is set (has been assigned a value) and false otherwise */
  public boolean isSetClassifier() {
    return this.classifier != null;
  }

  public void setClassifierIsSet(boolean value) {
    if (!value) {
      this.classifier = null;
    }
  }

  public double getTotalCost() {
    return this.totalCost;
  }

  public DetailBillItem setTotalCost(double totalCost) {
    this.totalCost = totalCost;
    setTotalCostIsSet(true);
    return this;
  }

  public void unsetTotalCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOST_ISSET_ID);
  }

  /** Returns true if field totalCost is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCost() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOST_ISSET_ID);
  }

  public void setTotalCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOST_ISSET_ID, value);
  }

  public int getSubBillListSize() {
    return (this.subBillList == null) ? 0 : this.subBillList.size();
  }

  public java.util.Iterator<BillItem> getSubBillListIterator() {
    return (this.subBillList == null) ? null : this.subBillList.iterator();
  }

  public void addToSubBillList(BillItem elem) {
    if (this.subBillList == null) {
      this.subBillList = new ArrayList<BillItem>();
    }
    this.subBillList.add(elem);
  }

  public List<BillItem> getSubBillList() {
    return this.subBillList;
  }

  public DetailBillItem setSubBillList(List<BillItem> subBillList) {
    this.subBillList = subBillList;
    return this;
  }

  public void unsetSubBillList() {
    this.subBillList = null;
  }

  /** Returns true if field subBillList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubBillList() {
    return this.subBillList != null;
  }

  public void setSubBillListIsSet(boolean value) {
    if (!value) {
      this.subBillList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLASSIFIER:
      if (value == null) {
        unsetClassifier();
      } else {
        setClassifier((String)value);
      }
      break;

    case TOTAL_COST:
      if (value == null) {
        unsetTotalCost();
      } else {
        setTotalCost((Double)value);
      }
      break;

    case SUB_BILL_LIST:
      if (value == null) {
        unsetSubBillList();
      } else {
        setSubBillList((List<BillItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASSIFIER:
      return getClassifier();

    case TOTAL_COST:
      return Double.valueOf(getTotalCost());

    case SUB_BILL_LIST:
      return getSubBillList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLASSIFIER:
      return isSetClassifier();
    case TOTAL_COST:
      return isSetTotalCost();
    case SUB_BILL_LIST:
      return isSetSubBillList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DetailBillItem)
      return this.equals((DetailBillItem)that);
    return false;
  }

  public boolean equals(DetailBillItem that) {
    if (that == null)
      return false;

    boolean this_present_classifier = true && this.isSetClassifier();
    boolean that_present_classifier = true && that.isSetClassifier();
    if (this_present_classifier || that_present_classifier) {
      if (!(this_present_classifier && that_present_classifier))
        return false;
      if (!this.classifier.equals(that.classifier))
        return false;
    }

    boolean this_present_totalCost = true;
    boolean that_present_totalCost = true;
    if (this_present_totalCost || that_present_totalCost) {
      if (!(this_present_totalCost && that_present_totalCost))
        return false;
      if (this.totalCost != that.totalCost)
        return false;
    }

    boolean this_present_subBillList = true && this.isSetSubBillList();
    boolean that_present_subBillList = true && that.isSetSubBillList();
    if (this_present_subBillList || that_present_subBillList) {
      if (!(this_present_subBillList && that_present_subBillList))
        return false;
      if (!this.subBillList.equals(that.subBillList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_classifier = true && (isSetClassifier());
    list.add(present_classifier);
    if (present_classifier)
      list.add(classifier);

    boolean present_totalCost = true;
    list.add(present_totalCost);
    if (present_totalCost)
      list.add(totalCost);

    boolean present_subBillList = true && (isSetSubBillList());
    list.add(present_subBillList);
    if (present_subBillList)
      list.add(subBillList);

    return list.hashCode();
  }

  @Override
  public int compareTo(DetailBillItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClassifier()).compareTo(other.isSetClassifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassifier()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.classifier, other.classifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCost()).compareTo(other.isSetTotalCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCost()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.totalCost, other.totalCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubBillList()).compareTo(other.isSetSubBillList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubBillList()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.subBillList, other.subBillList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DetailBillItem(");
    boolean first = true;

    sb.append("classifier:");
    if (this.classifier == null) {
      sb.append("null");
    } else {
      sb.append(this.classifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCost:");
    sb.append(this.totalCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subBillList:");
    if (this.subBillList == null) {
      sb.append("null");
    } else {
      sb.append(this.subBillList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetailBillItemStandardSchemeFactory implements SchemeFactory {
    public DetailBillItemStandardScheme getScheme() {
      return new DetailBillItemStandardScheme();
    }
  }

  private static class DetailBillItemStandardScheme extends StandardScheme<DetailBillItem> {

    public void read(libthrift091.protocol.TProtocol iprot, DetailBillItem struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASSIFIER
            if (schemeField.type == libthrift091.protocol.TType.STRING) {
              struct.classifier = iprot.readString();
              struct.setClassifierIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_COST
            if (schemeField.type == libthrift091.protocol.TType.DOUBLE) {
              struct.totalCost = iprot.readDouble();
              struct.setTotalCostIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_BILL_LIST
            if (schemeField.type == libthrift091.protocol.TType.LIST) {
              {
                libthrift091.protocol.TList _list8 = iprot.readListBegin();
                struct.subBillList = new ArrayList<BillItem>(_list8.size);
                BillItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new BillItem();
                  _elem9.read(iprot);
                  struct.subBillList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSubBillListIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, DetailBillItem struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.classifier != null) {
        oprot.writeFieldBegin(CLASSIFIER_FIELD_DESC);
        oprot.writeString(struct.classifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COST_FIELD_DESC);
      oprot.writeDouble(struct.totalCost);
      oprot.writeFieldEnd();
      if (struct.subBillList != null) {
        oprot.writeFieldBegin(SUB_BILL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, struct.subBillList.size()));
          for (BillItem _iter11 : struct.subBillList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetailBillItemTupleSchemeFactory implements SchemeFactory {
    public DetailBillItemTupleScheme getScheme() {
      return new DetailBillItemTupleScheme();
    }
  }

  private static class DetailBillItemTupleScheme extends TupleScheme<DetailBillItem> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, DetailBillItem struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClassifier()) {
        optionals.set(0);
      }
      if (struct.isSetTotalCost()) {
        optionals.set(1);
      }
      if (struct.isSetSubBillList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetClassifier()) {
        oprot.writeString(struct.classifier);
      }
      if (struct.isSetTotalCost()) {
        oprot.writeDouble(struct.totalCost);
      }
      if (struct.isSetSubBillList()) {
        {
          oprot.writeI32(struct.subBillList.size());
          for (BillItem _iter12 : struct.subBillList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, DetailBillItem struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.classifier = iprot.readString();
        struct.setClassifierIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalCost = iprot.readDouble();
        struct.setTotalCostIsSet(true);
      }
      if (incoming.get(2)) {
        {
          libthrift091.protocol.TList _list13 = new libthrift091.protocol.TList(libthrift091.protocol.TType.STRUCT, iprot.readI32());
          struct.subBillList = new ArrayList<BillItem>(_list13.size);
          BillItem _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new BillItem();
            _elem14.read(iprot);
            struct.subBillList.add(_elem14);
          }
        }
        struct.setSubBillListIsSet(true);
      }
    }
  }

}

