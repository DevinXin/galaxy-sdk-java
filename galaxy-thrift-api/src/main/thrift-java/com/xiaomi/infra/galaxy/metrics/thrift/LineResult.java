/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.galaxy.metrics.thrift;

import libthrift091.scheme.IScheme;
import libthrift091.scheme.SchemeFactory;
import libthrift091.scheme.StandardScheme;

import libthrift091.scheme.TupleScheme;
import libthrift091.protocol.TTupleProtocol;
import libthrift091.protocol.TProtocolException;
import libthrift091.EncodingUtils;
import libthrift091.TException;
import libthrift091.async.AsyncMethodCallback;
import libthrift091.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-2")
public class LineResult implements libthrift091.TBase<LineResult, LineResult._Fields>, java.io.Serializable, Cloneable, Comparable<LineResult> {
  private static final libthrift091.protocol.TStruct STRUCT_DESC = new libthrift091.protocol.TStruct("LineResult");

  private static final libthrift091.protocol.TField LINE_REQUEST_FIELD_DESC = new libthrift091.protocol.TField("lineRequest", libthrift091.protocol.TType.STRUCT, (short)1);
  private static final libthrift091.protocol.TField POINTS_FIELD_DESC = new libthrift091.protocol.TField("points", libthrift091.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LineResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LineResultTupleSchemeFactory());
  }

  public LineRequest lineRequest; // optional
  public Map<Long,Double> points; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements libthrift091.TFieldIdEnum {
    LINE_REQUEST((short)1, "lineRequest"),
    POINTS((short)2, "points");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINE_REQUEST
          return LINE_REQUEST;
        case 2: // POINTS
          return POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LINE_REQUEST,_Fields.POINTS};
  public static final Map<_Fields, libthrift091.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, libthrift091.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, libthrift091.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINE_REQUEST, new libthrift091.meta_data.FieldMetaData("lineRequest", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.StructMetaData(libthrift091.protocol.TType.STRUCT, LineRequest.class)));
    tmpMap.put(_Fields.POINTS, new libthrift091.meta_data.FieldMetaData("points", libthrift091.TFieldRequirementType.OPTIONAL, 
        new libthrift091.meta_data.MapMetaData(libthrift091.protocol.TType.MAP, 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.I64), 
            new libthrift091.meta_data.FieldValueMetaData(libthrift091.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    libthrift091.meta_data.FieldMetaData.addStructMetaDataMap(LineResult.class, metaDataMap);
  }

  public LineResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineResult(LineResult other) {
    if (other.isSetLineRequest()) {
      this.lineRequest = new LineRequest(other.lineRequest);
    }
    if (other.isSetPoints()) {
      Map<Long,Double> __this__points = new HashMap<Long,Double>(other.points);
      this.points = __this__points;
    }
  }

  public LineResult deepCopy() {
    return new LineResult(this);
  }

  @Override
  public void clear() {
    this.lineRequest = null;
    this.points = null;
  }

  public LineRequest getLineRequest() {
    return this.lineRequest;
  }

  public LineResult setLineRequest(LineRequest lineRequest) {
    this.lineRequest = lineRequest;
    return this;
  }

  public void unsetLineRequest() {
    this.lineRequest = null;
  }

  /** Returns true if field lineRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetLineRequest() {
    return this.lineRequest != null;
  }

  public void setLineRequestIsSet(boolean value) {
    if (!value) {
      this.lineRequest = null;
    }
  }

  public int getPointsSize() {
    return (this.points == null) ? 0 : this.points.size();
  }

  public void putToPoints(long key, double val) {
    if (this.points == null) {
      this.points = new HashMap<Long,Double>();
    }
    this.points.put(key, val);
  }

  public Map<Long,Double> getPoints() {
    return this.points;
  }

  public LineResult setPoints(Map<Long,Double> points) {
    this.points = points;
    return this;
  }

  public void unsetPoints() {
    this.points = null;
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return this.points != null;
  }

  public void setPointsIsSet(boolean value) {
    if (!value) {
      this.points = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINE_REQUEST:
      if (value == null) {
        unsetLineRequest();
      } else {
        setLineRequest((LineRequest)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Map<Long,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINE_REQUEST:
      return getLineRequest();

    case POINTS:
      return getPoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINE_REQUEST:
      return isSetLineRequest();
    case POINTS:
      return isSetPoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineResult)
      return this.equals((LineResult)that);
    return false;
  }

  public boolean equals(LineResult that) {
    if (that == null)
      return false;

    boolean this_present_lineRequest = true && this.isSetLineRequest();
    boolean that_present_lineRequest = true && that.isSetLineRequest();
    if (this_present_lineRequest || that_present_lineRequest) {
      if (!(this_present_lineRequest && that_present_lineRequest))
        return false;
      if (!this.lineRequest.equals(that.lineRequest))
        return false;
    }

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (!this.points.equals(that.points))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lineRequest = true && (isSetLineRequest());
    list.add(present_lineRequest);
    if (present_lineRequest)
      list.add(lineRequest);

    boolean present_points = true && (isSetPoints());
    list.add(present_points);
    if (present_points)
      list.add(points);

    return list.hashCode();
  }

  @Override
  public int compareTo(LineResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLineRequest()).compareTo(other.isSetLineRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineRequest()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.lineRequest, other.lineRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = libthrift091.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(libthrift091.protocol.TProtocol iprot) throws libthrift091.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(libthrift091.protocol.TProtocol oprot) throws libthrift091.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineResult(");
    boolean first = true;

    if (isSetLineRequest()) {
      sb.append("lineRequest:");
      if (this.lineRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.lineRequest);
      }
      first = false;
    }
    if (isSetPoints()) {
      if (!first) sb.append(", ");
      sb.append("points:");
      if (this.points == null) {
        sb.append("null");
      } else {
        sb.append(this.points);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws libthrift091.TException {
    // check for required fields
    // check for sub-struct validity
    if (lineRequest != null) {
      lineRequest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(out)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new libthrift091.protocol.TCompactProtocol(new libthrift091.transport.TIOStreamTransport(in)));
    } catch (libthrift091.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineResultStandardSchemeFactory implements SchemeFactory {
    public LineResultStandardScheme getScheme() {
      return new LineResultStandardScheme();
    }
  }

  private static class LineResultStandardScheme extends StandardScheme<LineResult> {

    public void read(libthrift091.protocol.TProtocol iprot, LineResult struct) throws libthrift091.TException {
      libthrift091.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == libthrift091.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINE_REQUEST
            if (schemeField.type == libthrift091.protocol.TType.STRUCT) {
              struct.lineRequest = new LineRequest();
              struct.lineRequest.read(iprot);
              struct.setLineRequestIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINTS
            if (schemeField.type == libthrift091.protocol.TType.MAP) {
              {
                libthrift091.protocol.TMap _map32 = iprot.readMapBegin();
                struct.points = new HashMap<Long,Double>(2*_map32.size);
                long _key33;
                double _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readI64();
                  _val34 = iprot.readDouble();
                  struct.points.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setPointsIsSet(true);
            } else { 
              libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            libthrift091.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(libthrift091.protocol.TProtocol oprot, LineResult struct) throws libthrift091.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lineRequest != null) {
        if (struct.isSetLineRequest()) {
          oprot.writeFieldBegin(LINE_REQUEST_FIELD_DESC);
          struct.lineRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.points != null) {
        if (struct.isSetPoints()) {
          oprot.writeFieldBegin(POINTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new libthrift091.protocol.TMap(libthrift091.protocol.TType.I64, libthrift091.protocol.TType.DOUBLE, struct.points.size()));
            for (Map.Entry<Long, Double> _iter36 : struct.points.entrySet())
            {
              oprot.writeI64(_iter36.getKey());
              oprot.writeDouble(_iter36.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineResultTupleSchemeFactory implements SchemeFactory {
    public LineResultTupleScheme getScheme() {
      return new LineResultTupleScheme();
    }
  }

  private static class LineResultTupleScheme extends TupleScheme<LineResult> {

    @Override
    public void write(libthrift091.protocol.TProtocol prot, LineResult struct) throws libthrift091.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLineRequest()) {
        optionals.set(0);
      }
      if (struct.isSetPoints()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLineRequest()) {
        struct.lineRequest.write(oprot);
      }
      if (struct.isSetPoints()) {
        {
          oprot.writeI32(struct.points.size());
          for (Map.Entry<Long, Double> _iter37 : struct.points.entrySet())
          {
            oprot.writeI64(_iter37.getKey());
            oprot.writeDouble(_iter37.getValue());
          }
        }
      }
    }

    @Override
    public void read(libthrift091.protocol.TProtocol prot, LineResult struct) throws libthrift091.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.lineRequest = new LineRequest();
        struct.lineRequest.read(iprot);
        struct.setLineRequestIsSet(true);
      }
      if (incoming.get(1)) {
        {
          libthrift091.protocol.TMap _map38 = new libthrift091.protocol.TMap(libthrift091.protocol.TType.I64, libthrift091.protocol.TType.DOUBLE, iprot.readI32());
          struct.points = new HashMap<Long,Double>(2*_map38.size);
          long _key39;
          double _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readI64();
            _val40 = iprot.readDouble();
            struct.points.put(_key39, _val40);
          }
        }
        struct.setPointsIsSet(true);
      }
    }
  }

}

